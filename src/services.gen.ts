import { createClient, createConfig, type Options } from './client';
import type { ActiveDirectoryObjectAddActiveDirectoryUserData, ActiveDirectoryObjectAddActiveDirectoryUserError, ActiveDirectoryObjectAddActiveDirectoryUserResponse, ActiveDirectoryObjectChangeAdUserPasswordData, ActiveDirectoryObjectChangeAdUserPasswordError, ActiveDirectoryObjectChangeAdUserPasswordResponse, ActiveDirectoryObjectToggleAdUserStateData, ActiveDirectoryObjectToggleAdUserStateError, ActiveDirectoryObjectToggleAdUserStateResponse, ActiveDirectoryGetOrganizationObjectsData, ActiveDirectoryGetOrganizationObjectsError, ActiveDirectoryGetOrganizationObjectsResponse, ActiveDirectoryDeleteMultipleObjectsData, ActiveDirectoryDeleteMultipleObjectsError, ActiveDirectoryDeleteMultipleObjectsResponse, ActiveDirectoryObjectGetObjectAccountSettingsData, ActiveDirectoryObjectGetObjectAccountSettingsError, ActiveDirectoryObjectGetObjectAccountSettingsResponse, ActiveDirectoryObjectSetObjectAccountSettingsData, ActiveDirectoryObjectSetObjectAccountSettingsError, ActiveDirectoryObjectSetObjectAccountSettingsResponse, ActiveDirectoryObjectSetObjectDetailsData, ActiveDirectoryObjectSetObjectDetailsError, ActiveDirectoryObjectSetObjectDetailsResponse, ActiveDirectoryObjectGetAdObjectGeneralPropertiesData, ActiveDirectoryObjectGetAdObjectGeneralPropertiesError, ActiveDirectoryObjectGetAdObjectGeneralPropertiesResponse, ActiveDirectoryObjectUpdateAdObjectGeneralPropertiesData, ActiveDirectoryObjectUpdateAdObjectGeneralPropertiesError, ActiveDirectoryObjectUpdateAdObjectGeneralPropertiesResponse, ActiveDirectoryObjectGetObjectMemberOfDetailsData, ActiveDirectoryObjectGetObjectMemberOfDetailsError, ActiveDirectoryObjectGetObjectMemberOfDetailsResponse, ActiveDirectoryObjectUpdateObjectMemberOfDetailsData, ActiveDirectoryObjectUpdateObjectMemberOfDetailsError, ActiveDirectoryObjectUpdateObjectMemberOfDetailsResponse, ActiveDirectoryObjectMoveObjectToOuData, ActiveDirectoryObjectMoveObjectToOuError, ActiveDirectoryObjectMoveObjectToOuResponse, ActiveDirectoryObjectGetGroupMembersData, ActiveDirectoryObjectGetGroupMembersError, ActiveDirectoryObjectGetGroupMembersResponse, ActiveDirectoryObjectUpdateGroupMembersData, ActiveDirectoryObjectUpdateGroupMembersError, ActiveDirectoryObjectUpdateGroupMembersResponse, ActiveDirectoryObjectGetGroupAdminData, ActiveDirectoryObjectGetGroupAdminError, ActiveDirectoryObjectGetGroupAdminResponse, ActiveDirectoryObjectUpdateGroupAdminData, ActiveDirectoryObjectUpdateGroupAdminError, ActiveDirectoryObjectUpdateGroupAdminResponse, TokenGetTokenDetailsData, TokenGetTokenDetailsError, TokenGetTokenDetailsResponse, TokenGenerateTokenData, TokenGenerateTokenError, TokenGenerateTokenResponse, TokenRevokeTokenData, TokenRevokeTokenError, TokenRevokeTokenResponse, UsersGetAllUsersData, UsersGetAllUsersError, UsersGetAllUsersResponse, UsersAddUserData, UsersAddUserError, UsersAddUserResponse, UsersGetUserDetailsData, UsersGetUserDetailsError, UsersGetUserDetailsResponse, UsersUpdateUserData, UsersUpdateUserError, UsersUpdateUserResponse, UsersDeleteUserData, UsersDeleteUserError, UsersDeleteUserResponse, UsersDisableUserData, UsersDisableUserError, UsersDisableUserResponse, UsersEnableUserData, UsersEnableUserError, UsersEnableUserResponse, UsersChangePasswordData, UsersChangePasswordError, UsersChangePasswordResponse, UsersIsLoginNameAvailableData, UsersIsLoginNameAvailableError, UsersIsLoginNameAvailableResponse, UsersGetUserProfileDetailsData, UsersGetUserProfileDetailsError, UsersGetUserProfileDetailsResponse, UsersUpdateUserProfileData, UsersUpdateUserProfileError, UsersUpdateUserProfileResponse, ReportGetUserQuotaReportData, ReportGetUserQuotaReportError, ReportGetUserQuotaReportResponse, ReportGetConsumedResourcesError, ReportGetConsumedResourcesResponse, ReportGetDailyResourcesUsageError, ReportGetDailyResourcesUsageResponse, ReportGetMonthlyResourcesUsageError, ReportGetMonthlyResourcesUsageResponse, ReportGetPanelStatsError, ReportGetPanelStatsResponse, ReportDiskUsageUsersListData, ReportDiskUsageUsersListError, ReportDiskUsageUsersListResponse, ReportDiskUsageReportMonthlyData, ReportDiskUsageReportMonthlyError, ReportDiskUsageReportMonthlyResponse, ReportDiskUsageReportTotalData, ReportDiskUsageReportTotalError, ReportDiskUsageReportTotalResponse, ReportBandwidthUsageReportMonthlyData, ReportBandwidthUsageReportMonthlyError, ReportBandwidthUsageReportMonthlyResponse, ReportBandwidthUsageReportTotalData, ReportBandwidthUsageReportTotalError, ReportBandwidthUsageReportTotalResponse, ConfigurationsBandwidthUsageUsersListData, ConfigurationsBandwidthUsageUsersListError, ConfigurationsBandwidthUsageUsersListResponse, SettingsGetAllStatesData, SettingsGetAllStatesError, SettingsGetAllStatesResponse, SettingsGetAllCountriesData, SettingsGetAllCountriesError, SettingsGetAllCountriesResponse, SettingsGetAllLanguagesError, SettingsGetAllLanguagesResponse, SettingsGetAllLanguagesByLangNameData, SettingsGetAllLanguagesByLangNameError, SettingsGetAllLanguagesByLangNameResponse, SettingsGetAllResourceQuotaTypesError, SettingsGetAllResourceQuotaTypesResponse, SettingsGetAllResourceProvisioningTypesError, SettingsGetAllResourceProvisioningTypesResponse, SettingsGetVmStatusTypesError, SettingsGetVmStatusTypesResponse, SettingsGetTicketStatusError, SettingsGetTicketStatusResponse, SettingsGetExchangeMailboxTypesError, SettingsGetExchangeMailboxTypesResponse, SettingsGetResourceMailboxTypesError, SettingsGetResourceMailboxTypesResponse, SettingsGetExchangeMailDomainTypesError, SettingsGetExchangeMailDomainTypesResponse, SettingsGetExchangeRecpientsTypesError, SettingsGetExchangeRecpientsTypesResponse, SettingsGetExchangeBlockedDomainRuleRecipientLocationError, SettingsGetExchangeBlockedDomainRuleRecipientLocationResponse, SettingsGetPublicFolderTypesError, SettingsGetPublicFolderTypesResponse, SettingsGetTelephonyOptionsError, SettingsGetTelephonyOptionsResponse, SettingsGetRoutingMethodsError, SettingsGetRoutingMethodsResponse, SettingsGetParticipationPolicyError, SettingsGetParticipationPolicyResponse, SettingsGetResponseGroupCallActionsError, SettingsGetResponseGroupCallActionsResponse, SettingsGetWorkflowCallActionsError, SettingsGetWorkflowCallActionsResponse, SettingsGetWorkflowLanguagesError, SettingsGetWorkflowLanguagesResponse, MessageCenterAddNewMessageData, MessageCenterAddNewMessageError, MessageCenterAddNewMessageResponse, MessageCenterGetMessageDetailsData, MessageCenterGetMessageDetailsError, MessageCenterGetMessageDetailsResponse, MessageCenterUpdateMessageStatusData, MessageCenterUpdateMessageStatusError, MessageCenterUpdateMessageStatusResponse, MessageCenterDeleteMessageData, MessageCenterDeleteMessageError, MessageCenterDeleteMessageResponse, MessageCenterGetSentMessagesError, MessageCenterGetSentMessagesResponse, MessageCenterGetReceivedMessagesError, MessageCenterGetReceivedMessagesResponse, MessageCenterMessageRepliesData, MessageCenterMessageRepliesError, MessageCenterMessageRepliesResponse, MessageCenterAddMessageReplyData, MessageCenterAddMessageReplyError, MessageCenterAddMessageReplyResponse, TicketsGetAllStatsError, TicketsGetAllStatsResponse, TicketsGetAllTicketsData, TicketsGetAllTicketsError, TicketsGetAllTicketsResponse, TicketsAddTicketData, TicketsAddTicketError, TicketsAddTicketResponse, TicketsGetTicketDetailData, TicketsGetTicketDetailError, TicketsGetTicketDetailResponse, TicketsUpdateTicketData, TicketsUpdateTicketError, TicketsUpdateTicketResponse, TicketsDeleteTicketData, TicketsDeleteTicketError, TicketsDeleteTicketResponse, TicketsGetTicketReplyData, TicketsGetTicketReplyError, TicketsGetTicketReplyResponse, TicketsReplyTicketData, TicketsReplyTicketError, TicketsReplyTicketResponse, TicketsAddTicketAttachmentData, TicketsAddTicketAttachmentError, TicketsAddTicketAttachmentResponse, TicketsGetAllAttachmentsData, TicketsGetAllAttachmentsError, TicketsGetAllAttachmentsResponse, TicketsGetAttachmentDetailData, TicketsGetAttachmentDetailError, TicketsGetAttachmentDetailResponse, AddOnsGetAllResourcesData, AddOnsGetAllResourcesError, AddOnsGetAllResourcesResponse, AddOnsAddResourceData, AddOnsAddResourceError, AddOnsAddResourceResponse, AddOnsGetResourceDetailsData, AddOnsGetResourceDetailsError, AddOnsGetResourceDetailsResponse, AddOnsUpdateResourceData, AddOnsUpdateResourceError, AddOnsUpdateResourceResponse, AddOnsDeleteResourceData, AddOnsDeleteResourceError, AddOnsDeleteResourceResponse, AddOnsGetBaseOsTypesData, AddOnsGetBaseOsTypesError, AddOnsGetBaseOsTypesResponse, SoldAddOnsGetAllSoldAddOnsData, SoldAddOnsGetAllSoldAddOnsError, SoldAddOnsGetAllSoldAddOnsResponse, SoldAddOnsSellAddOnData, SoldAddOnsSellAddOnError, SoldAddOnsSellAddOnResponse, SoldAddOnsGetSoldAddonDetailsData, SoldAddOnsGetSoldAddonDetailsError, SoldAddOnsGetSoldAddonDetailsResponse, SoldAddOnsDeleteSoldAddonData, SoldAddOnsDeleteSoldAddonError, SoldAddOnsDeleteSoldAddonResponse, CompositeResourceGetAllCresourcesData, CompositeResourceGetAllCresourcesError, CompositeResourceGetAllCresourcesResponse, CompositeResourceAddCresourceData, CompositeResourceAddCresourceError, CompositeResourceAddCresourceResponse, CompositeResourceGetCresourceDetailsData, CompositeResourceGetCresourceDetailsError, CompositeResourceGetCresourceDetailsResponse, CompositeResourceUpdateCresourceData, CompositeResourceUpdateCresourceError, CompositeResourceUpdateCresourceResponse, CompositeResourceDeleteCresourceData, CompositeResourceDeleteCresourceError, CompositeResourceDeleteCresourceResponse, HostingServicesGetAllHostingServicesError, HostingServicesGetAllHostingServicesResponse, ProvidersGetProviderTypesData, ProvidersGetProviderTypesError, ProvidersGetProviderTypesResponse, SoldPlanGetAllSoldPlansData, SoldPlanGetAllSoldPlansError, SoldPlanGetAllSoldPlansResponse, SoldPlanAddSoldPlanData, SoldPlanAddSoldPlanError, SoldPlanAddSoldPlanResponse, SoldPlanGetSoldPlanDetailsData, SoldPlanGetSoldPlanDetailsError, SoldPlanGetSoldPlanDetailsResponse, SoldPlanUpDateSoldPlansData, SoldPlanUpDateSoldPlansError, SoldPlanUpDateSoldPlansResponse, SoldPlanDeleteSoldPlanData, SoldPlanDeleteSoldPlanError, SoldPlanDeleteSoldPlanResponse, SubscriptionsGetPurchasedPlanDetailsData, SubscriptionsGetPurchasedPlanDetailsError, SubscriptionsGetPurchasedPlanDetailsResponse, SubscriptionsGetAllPurchasedPlansData, SubscriptionsGetAllPurchasedPlansError, SubscriptionsGetAllPurchasedPlansResponse, CustomFieldsListAllCustomFieldsData, CustomFieldsListAllCustomFieldsError, CustomFieldsListAllCustomFieldsResponse, TicketsGetAllCategoryError, TicketsGetAllCategoryResponse, DnsListAllDnsZonesData, DnsListAllDnsZonesError, DnsListAllDnsZonesResponse, DnsAddDnsZoneData, DnsAddDnsZoneError, DnsAddDnsZoneResponse, DnsGetDnsZoneDetailData, DnsGetDnsZoneDetailError, DnsGetDnsZoneDetailResponse, DnsUpdateDnsZoneData, DnsUpdateDnsZoneError, DnsUpdateDnsZoneResponse, DnsDeleteDnsZoneData, DnsDeleteDnsZoneError, DnsDeleteDnsZoneResponse, DatabasesListAllDatabasesData, DatabasesListAllDatabasesError, DatabasesListAllDatabasesResponse, DatabasesAddDatabaseData, DatabasesAddDatabaseError, DatabasesAddDatabaseResponse, DatabasesListAllDatabaseTasksData, DatabasesListAllDatabaseTasksError, DatabasesListAllDatabaseTasksResponse, DatabasesBackupDatabaseData, DatabasesBackupDatabaseError, DatabasesBackupDatabaseResponse, DatabasesShrinkDatabaseData, DatabasesShrinkDatabaseError, DatabasesShrinkDatabaseResponse, DatabasesRestoreDatabaseData, DatabasesRestoreDatabaseError, DatabasesRestoreDatabaseResponse, DatabasesGetDatabaseDetailData, DatabasesGetDatabaseDetailError, DatabasesGetDatabaseDetailResponse, DatabasesUpdateDatabaseData, DatabasesUpdateDatabaseError, DatabasesUpdateDatabaseResponse, DatabasesDeleteDatabaseData, DatabasesDeleteDatabaseError, DatabasesDeleteDatabaseResponse, DatabasesAssignUserstoDatabaseData, DatabasesAssignUserstoDatabaseError, DatabasesAssignUserstoDatabaseResponse, DatabasesTestDatabaseConnectivityData, DatabasesTestDatabaseConnectivityError, DatabasesTestDatabaseConnectivityResponse, DatabasesListAllDatabaseUsersData, DatabasesListAllDatabaseUsersError, DatabasesListAllDatabaseUsersResponse, DatabasesAddDatabaseUserData, DatabasesAddDatabaseUserError, DatabasesAddDatabaseUserResponse, DatabasesGetDatabasesAssignedUserData, DatabasesGetDatabasesAssignedUserError, DatabasesGetDatabasesAssignedUserResponse, DatabasesGetUsersAssignedDatabaseData, DatabasesGetUsersAssignedDatabaseError, DatabasesGetUsersAssignedDatabaseResponse, DatabasesGetDatabaseUserDetailData, DatabasesGetDatabaseUserDetailError, DatabasesGetDatabaseUserDetailResponse, DatabasesDeleteDatabaseUserData, DatabasesDeleteDatabaseUserError, DatabasesDeleteDatabaseUserResponse, DatabasesChangePasswordData, DatabasesChangePasswordError, DatabasesChangePasswordResponse, DatabasesAssignDatabasestoUserData, DatabasesAssignDatabasestoUserError, DatabasesAssignDatabasestoUserResponse, MailDomainsListAllMailDomainsData, MailDomainsListAllMailDomainsError, MailDomainsListAllMailDomainsResponse, MailDomainsAddMailDomainData, MailDomainsAddMailDomainError, MailDomainsAddMailDomainResponse, MailDomainsGetMailDomainDetailData, MailDomainsGetMailDomainDetailError, MailDomainsGetMailDomainDetailResponse, MailDomainsDeleteMailDomainData, MailDomainsDeleteMailDomainError, MailDomainsDeleteMailDomainResponse, MailDomainsListAllMailBoxesData, MailDomainsListAllMailBoxesError, MailDomainsListAllMailBoxesResponse, MailDomainsAddMailBoxData, MailDomainsAddMailBoxError, MailDomainsAddMailBoxResponse, MailDomainsGetMailBoxDetailData, MailDomainsGetMailBoxDetailError, MailDomainsGetMailBoxDetailResponse, MailDomainsUpdateMailBoxData, MailDomainsUpdateMailBoxError, MailDomainsUpdateMailBoxResponse, MailDomainsDeleteMailBoxData, MailDomainsDeleteMailBoxError, MailDomainsDeleteMailBoxResponse, MailDomainsListAllEmailAddressesData, MailDomainsListAllEmailAddressesError, MailDomainsListAllEmailAddressesResponse, MailDomainsAddEmailAddressData, MailDomainsAddEmailAddressError, MailDomainsAddEmailAddressResponse, MailDomainsDeleteEmailAddressData, MailDomainsDeleteEmailAddressError, MailDomainsDeleteEmailAddressResponse, MailDomainsListAllDistributionListData, MailDomainsListAllDistributionListError, MailDomainsListAllDistributionListResponse, MailDomainsAddDistributionListData, MailDomainsAddDistributionListError, MailDomainsAddDistributionListResponse, MailDomainsGetDistributionListDetailData, MailDomainsGetDistributionListDetailError, MailDomainsGetDistributionListDetailResponse, MailDomainsUpdateDistributionListData, MailDomainsUpdateDistributionListError, MailDomainsUpdateDistributionListResponse, MailDomainsDeleteDistributionListData, MailDomainsDeleteDistributionListError, MailDomainsDeleteDistributionListResponse, WebsiteIoGetAllFilesAndFoldersData, WebsiteIoGetAllFilesAndFoldersError, WebsiteIoGetAllFilesAndFoldersResponse, WebsiteIoUploadData, WebsiteIoUploadError, WebsiteIoUploadResponse, WebsiteIoDeleteData, WebsiteIoDeleteError, WebsiteIoDeleteResponse, WebsiteIoCreateData, WebsiteIoCreateError, WebsiteIoCreateResponse, WebsiteIoDownloadData, WebsiteIoDownloadError, WebsiteIoDownloadResponse, WebsiteIoUpdateData, WebsiteIoUpdateError, WebsiteIoUpdateResponse, WebsiteIoRenameData, WebsiteIoRenameError, WebsiteIoRenameResponse, WebsiteIoZipData, WebsiteIoZipError, WebsiteIoZipResponse, WebsiteIoUnzipData, WebsiteIoUnzipError, WebsiteIoUnzipResponse, WebsiteIoGetAclPermissionData, WebsiteIoGetAclPermissionError, WebsiteIoGetAclPermissionResponse, WebsiteIoSetAclPermissionData, WebsiteIoSetAclPermissionError, WebsiteIoSetAclPermissionResponse, WebsitesGetAllWebsitesData, WebsitesGetAllWebsitesError, WebsitesGetAllWebsitesResponse, WebsitesAddWebsiteData, WebsitesAddWebsiteError, WebsitesAddWebsiteResponse, WebsitesGetWebsiteDetailsData, WebsitesGetWebsiteDetailsError, WebsitesGetWebsiteDetailsResponse, WebsitesEditWebsiteData, WebsitesEditWebsiteError, WebsitesEditWebsiteResponse, WebsitesDeleteWebsiteData, WebsitesDeleteWebsiteError, WebsitesDeleteWebsiteResponse, WebsitesStartSiteData, WebsitesStartSiteError, WebsitesStartSiteResponse, WebsitesStopSiteData, WebsitesStopSiteError, WebsitesStopSiteResponse, WebsitesEnableStatsData, WebsitesEnableStatsError, WebsitesEnableStatsResponse, WebsitesDisableStatsData, WebsitesDisableStatsError, WebsitesDisableStatsResponse, WebsitesViewStatsData, WebsitesViewStatsError, WebsitesViewStatsResponse, WebsitesGetAllSharedSslsData, WebsitesGetAllSharedSslsError, WebsitesGetAllSharedSslsResponse, WebsitesAddSharedSslData, WebsitesAddSharedSslError, WebsitesAddSharedSslResponse, WebsitesDeleteSharedSslData, WebsitesDeleteSharedSslError, WebsitesDeleteSharedSslResponse, WebsitesUpdateIpAddressData, WebsitesUpdateIpAddressError, WebsitesUpdateIpAddressResponse, WebsitesGetAllParkedDomainsData, WebsitesGetAllParkedDomainsError, WebsitesGetAllParkedDomainsResponse, WebsitesAddParkedDomainData, WebsitesAddParkedDomainError, WebsitesAddParkedDomainResponse, WebsitesDeleteParkedDomainData, WebsitesDeleteParkedDomainError, WebsitesDeleteParkedDomainResponse, WebsitesGetAllHostHeadersData, WebsitesGetAllHostHeadersError, WebsitesGetAllHostHeadersResponse, WebsitesAddHostHeaderData, WebsitesAddHostHeaderError, WebsitesAddHostHeaderResponse, WebsitesDeleteHostHeaderData, WebsitesDeleteHostHeaderError, WebsitesDeleteHostHeaderResponse, WebsitesGetAllVirtualDirectoriesData, WebsitesGetAllVirtualDirectoriesError, WebsitesGetAllVirtualDirectoriesResponse, WebsitesUpdateVirtualDirectoryData, WebsitesUpdateVirtualDirectoryError, WebsitesUpdateVirtualDirectoryResponse, WebsitesAddVirtualDirectoryData, WebsitesAddVirtualDirectoryError, WebsitesAddVirtualDirectoryResponse, WebsitesGetVirtualDirectoryDetailsData, WebsitesGetVirtualDirectoryDetailsError, WebsitesGetVirtualDirectoryDetailsResponse, WebsitesDeleteVirtualDirectoryData, WebsitesDeleteVirtualDirectoryError, WebsitesDeleteVirtualDirectoryResponse, WebsitesChangeSysUserPasswordData, WebsitesChangeSysUserPasswordError, WebsitesChangeSysUserPasswordResponse, WebsitesGetApplicationPoolProcessInfoData, WebsitesGetApplicationPoolProcessInfoError, WebsitesGetApplicationPoolProcessInfoResponse, WebsitesGetUrlRedirectionSettingsData, WebsitesGetUrlRedirectionSettingsError, WebsitesGetUrlRedirectionSettingsResponse, WebsitesSaveUrlRedirectionSettingsData, WebsitesSaveUrlRedirectionSettingsError, WebsitesSaveUrlRedirectionSettingsResponse, WebsitesGetAccessPermissionsSettingsData, WebsitesGetAccessPermissionsSettingsError, WebsitesGetAccessPermissionsSettingsResponse, WebsitesSaveAccessPermissionsSettingsData, WebsitesSaveAccessPermissionsSettingsError, WebsitesSaveAccessPermissionsSettingsResponse, WebsitesGetCustomErrorsListData, WebsitesGetCustomErrorsListError, WebsitesGetCustomErrorsListResponse, WebsitesUpdateCustomErrorsData, WebsitesUpdateCustomErrorsError, WebsitesUpdateCustomErrorsResponse, WebsitesListAllFtpUsersData, WebsitesListAllFtpUsersError, WebsitesListAllFtpUsersResponse, WebsitesAddFtpUserData, WebsitesAddFtpUserError, WebsitesAddFtpUserResponse, WebsitesGetFtpUserDetailData, WebsitesGetFtpUserDetailError, WebsitesGetFtpUserDetailResponse, WebsitesUpdateFtpUserPasswordData, WebsitesUpdateFtpUserPasswordError, WebsitesUpdateFtpUserPasswordResponse, WebsitesDeleteFtpUserData, WebsitesDeleteFtpUserError, WebsitesDeleteFtpUserResponse, WebsitesUpdateFtpUserStatusData, WebsitesUpdateFtpUserStatusError, WebsitesUpdateFtpUserStatusResponse, WebsitesUpdateFtpUserPermissionData, WebsitesUpdateFtpUserPermissionError, WebsitesUpdateFtpUserPermissionResponse, WebsitesGetDotNetInstalledVersionsData, WebsitesGetDotNetInstalledVersionsError, WebsitesGetDotNetInstalledVersionsResponse, WebsitesScriptingData, WebsitesScriptingError, WebsitesScriptingResponse, WebsitesRecycleWebsiteApplicationPoolData, WebsitesRecycleWebsiteApplicationPoolError, WebsitesRecycleWebsiteApplicationPoolResponse, WebsitesRestoreDefaultData, WebsitesRestoreDefaultError, WebsitesRestoreDefaultResponse, WebsitesGetSystemUsersData, WebsitesGetSystemUsersError, WebsitesGetSystemUsersResponse, RolesGetRolesData, RolesGetRolesError, RolesGetRolesResponse, RolesGetServerRolesData, RolesGetServerRolesError, RolesGetServerRolesResponse, RolesGetAllServersData, RolesGetAllServersError, RolesGetAllServersResponse, PlanGetAllPlansData, PlanGetAllPlansError, PlanGetAllPlansResponse, PlanAddPlanData, PlanAddPlanError, PlanAddPlanResponse, PlanGetPlanDetailsData, PlanGetPlanDetailsError, PlanGetPlanDetailsResponse, PlanUpdatePlanData, PlanUpdatePlanError, PlanUpdatePlanResponse, PlanDeletePlanData, PlanDeletePlanError, PlanDeletePlanResponse, OrganizationsGetAllOrganizationsData, OrganizationsGetAllOrganizationsError, OrganizationsGetAllOrganizationsResponse, OrganizationsGetOrganizationDetailsData, OrganizationsGetOrganizationDetailsError, OrganizationsGetOrganizationDetailsResponse, OrganizationsGetAllExchangeOrganizationsData, OrganizationsGetAllExchangeOrganizationsError, OrganizationsGetAllExchangeOrganizationsResponse, OrganizationsAddExchangeOrganizationData, OrganizationsAddExchangeOrganizationError, OrganizationsAddExchangeOrganizationResponse, OrganizationsDeleteExchangeOrganizationData, OrganizationsDeleteExchangeOrganizationError, OrganizationsDeleteExchangeOrganizationResponse, OrganizationsGetAllSharePointOrganizationsData, OrganizationsGetAllSharePointOrganizationsError, OrganizationsGetAllSharePointOrganizationsResponse, OrganizationsAddSharePointOrganizationData, OrganizationsAddSharePointOrganizationError, OrganizationsAddSharePointOrganizationResponse, OrganizationsDeleteSharePointOrganizationData, OrganizationsDeleteSharePointOrganizationError, OrganizationsDeleteSharePointOrganizationResponse, OrganizationsGetAllSkypeOrganizationsData, OrganizationsGetAllSkypeOrganizationsError, OrganizationsGetAllSkypeOrganizationsResponse, OrganizationsAddSkypeOrganizationData, OrganizationsAddSkypeOrganizationError, OrganizationsAddSkypeOrganizationResponse, OrganizationsDeleteSkypeOrganizationData, OrganizationsDeleteSkypeOrganizationError, OrganizationsDeleteSkypeOrganizationResponse, OrganizationsGetAllActiveDirectoryOrganizationsData, OrganizationsGetAllActiveDirectoryOrganizationsError, OrganizationsGetAllActiveDirectoryOrganizationsResponse, OrganizationsAddActiveDirectoryOrganizationData, OrganizationsAddActiveDirectoryOrganizationError, OrganizationsAddActiveDirectoryOrganizationResponse, OrganizationsAddActiveDirectorySubOrganizationData, OrganizationsAddActiveDirectorySubOrganizationError, OrganizationsAddActiveDirectorySubOrganizationResponse, OrganizationsDeleteActiveDirectoryOrganizationData, OrganizationsDeleteActiveDirectoryOrganizationError, OrganizationsDeleteActiveDirectoryOrganizationResponse, ExchangeMailDomainsGetAllExchangeMailDomainsData, ExchangeMailDomainsGetAllExchangeMailDomainsError, ExchangeMailDomainsGetAllExchangeMailDomainsResponse, ExchangeMailDomainsAddExchangeMailDomainData, ExchangeMailDomainsAddExchangeMailDomainError, ExchangeMailDomainsAddExchangeMailDomainResponse, ExchangeMailDomainsGetExchangemailDomainDetailsData, ExchangeMailDomainsGetExchangemailDomainDetailsError, ExchangeMailDomainsGetExchangemailDomainDetailsResponse, ExchangeMailDomainsEditExchangeMailDomainData, ExchangeMailDomainsEditExchangeMailDomainError, ExchangeMailDomainsEditExchangeMailDomainResponse, ExchangeMailDomainsDeleteExchangeMailDomainData, ExchangeMailDomainsDeleteExchangeMailDomainError, ExchangeMailDomainsDeleteExchangeMailDomainResponse, ExchangeMailDomainsEnableDisableExchangeMailDomainData, ExchangeMailDomainsEnableDisableExchangeMailDomainError, ExchangeMailDomainsEnableDisableExchangeMailDomainResponse, ExgMailboxGetAllExgMailboxsData, ExgMailboxGetAllExgMailboxsError, ExgMailboxGetAllExgMailboxsResponse, ExgMailboxAddExgMailboxData, ExgMailboxAddExgMailboxError, ExgMailboxAddExgMailboxResponse, ExgMailboxUpdateExgMailboxData, ExgMailboxUpdateExgMailboxError, ExgMailboxUpdateExgMailboxResponse, ExgMailboxGetExgMailboxDetailsData, ExgMailboxGetExgMailboxDetailsError, ExgMailboxGetExgMailboxDetailsResponse, ExgMailboxDeleteExgMailboxData, ExgMailboxDeleteExgMailboxError, ExgMailboxDeleteExgMailboxResponse, ExgMailboxGetExgMailboxAsyncPolicyData, ExgMailboxGetExgMailboxAsyncPolicyError, ExgMailboxGetExgMailboxAsyncPolicyResponse, ExgMailboxUpdateExgMailboxAsyncPolicyData, ExgMailboxUpdateExgMailboxAsyncPolicyError, ExgMailboxUpdateExgMailboxAsyncPolicyResponse, ExgMailboxGetUserMailboxGeneralPropertiesData, ExgMailboxGetUserMailboxGeneralPropertiesError, ExgMailboxGetUserMailboxGeneralPropertiesResponse, ExgMailboxUpdateExgMailboxGeneralPropertiesData, ExgMailboxUpdateExgMailboxGeneralPropertiesError, ExgMailboxUpdateExgMailboxGeneralPropertiesResponse, ExgMailboxChangeUserMailboxPasswordData, ExgMailboxChangeUserMailboxPasswordError, ExgMailboxChangeUserMailboxPasswordResponse, ExgMailboxGetUserMailboxEmailAddressesData, ExgMailboxGetUserMailboxEmailAddressesError, ExgMailboxGetUserMailboxEmailAddressesResponse, ExgMailboxSetPrimaryEmailAddressesData, ExgMailboxSetPrimaryEmailAddressesError, ExgMailboxSetPrimaryEmailAddressesResponse, ExgMailboxAddUserMailboxEmailAddressesData, ExgMailboxAddUserMailboxEmailAddressesError, ExgMailboxAddUserMailboxEmailAddressesResponse, ExgMailboxDeleteUserMailboxEmailAddressesData, ExgMailboxDeleteUserMailboxEmailAddressesError, ExgMailboxDeleteUserMailboxEmailAddressesResponse, ExgMailboxGetUserSendOnBehalfUsersData, ExgMailboxGetUserSendOnBehalfUsersError, ExgMailboxGetUserSendOnBehalfUsersResponse, ExgMailboxAddUserSendOnBehalfUsersData, ExgMailboxAddUserSendOnBehalfUsersError, ExgMailboxAddUserSendOnBehalfUsersResponse, ExgMailboxRemoveUserSendOnBehalfUsersData, ExgMailboxRemoveUserSendOnBehalfUsersError, ExgMailboxRemoveUserSendOnBehalfUsersResponse, ExgMailboxGetUserMailboxAdvancedPropertiesData, ExgMailboxGetUserMailboxAdvancedPropertiesError, ExgMailboxGetUserMailboxAdvancedPropertiesResponse, ExgMailboxUpdateUserMailboxAdvancedPropertiesData, ExgMailboxUpdateUserMailboxAdvancedPropertiesError, ExgMailboxUpdateUserMailboxAdvancedPropertiesResponse, ExgMailboxGetUserAcceptedSendersData, ExgMailboxGetUserAcceptedSendersError, ExgMailboxGetUserAcceptedSendersResponse, ExgMailboxAddUserAcceptedSendersData, ExgMailboxAddUserAcceptedSendersError, ExgMailboxAddUserAcceptedSendersResponse, ExgMailboxRemoveUserAcceptedSendersData, ExgMailboxRemoveUserAcceptedSendersError, ExgMailboxRemoveUserAcceptedSendersResponse, ExgMailboxGetUserRejectedSendersData, ExgMailboxGetUserRejectedSendersError, ExgMailboxGetUserRejectedSendersResponse, ExgMailboxAddUserRejectedSendersData, ExgMailboxAddUserRejectedSendersError, ExgMailboxAddUserRejectedSendersResponse, ExgMailboxRemoveUserRejectedSendersData, ExgMailboxRemoveUserRejectedSendersError, ExgMailboxRemoveUserRejectedSendersResponse, ExgMailboxGetUserFullAccessPermissionData, ExgMailboxGetUserFullAccessPermissionError, ExgMailboxGetUserFullAccessPermissionResponse, ExgMailboxAddUserFullAccessPermissionData, ExgMailboxAddUserFullAccessPermissionError, ExgMailboxAddUserFullAccessPermissionResponse, ExgMailboxRemoveUserFullAccessPermissionData, ExgMailboxRemoveUserFullAccessPermissionError, ExgMailboxRemoveUserFullAccessPermissionResponse, ExgMailboxGetUserSendAsPermissionData, ExgMailboxGetUserSendAsPermissionError, ExgMailboxGetUserSendAsPermissionResponse, ExgMailboxAddUserSendAsPermissionData, ExgMailboxAddUserSendAsPermissionError, ExgMailboxAddUserSendAsPermissionResponse, ExgMailboxRemoveUserSendAsPermissionData, ExgMailboxRemoveUserSendAsPermissionError, ExgMailboxRemoveUserSendAsPermissionResponse, ExgMailboxGetUserForwardingAddressData, ExgMailboxGetUserForwardingAddressError, ExgMailboxGetUserForwardingAddressResponse, ExgMailboxUpdateUserForwardingAddressData, ExgMailboxUpdateUserForwardingAddressError, ExgMailboxUpdateUserForwardingAddressResponse, ExgMailboxGetUserStatisticsData, ExgMailboxGetUserStatisticsError, ExgMailboxGetUserStatisticsResponse, ExgMailboxGetMailboxLitigationHoldSettingsData, ExgMailboxGetMailboxLitigationHoldSettingsError, ExgMailboxGetMailboxLitigationHoldSettingsResponse, ExgMailboxUpdateMailboxLitigationHoldSettingsData, ExgMailboxUpdateMailboxLitigationHoldSettingsError, ExgMailboxUpdateMailboxLitigationHoldSettingsResponse, ExgMailboxGetAllListsOfUserMailboxData, ExgMailboxGetAllListsOfUserMailboxError, ExgMailboxGetAllListsOfUserMailboxResponse, ExgMailboxAddUserMailboxToListData, ExgMailboxAddUserMailboxToListError, ExgMailboxAddUserMailboxToListResponse, ExgMailboxRemoveUserMailboxFromListData, ExgMailboxRemoveUserMailboxFromListError, ExgMailboxRemoveUserMailboxFromListResponse, ExgMailboxGetArchiveMailboxSettingsData, ExgMailboxGetArchiveMailboxSettingsError, ExgMailboxGetArchiveMailboxSettingsResponse, ExgMailboxUpdateArchiveMailboxData, ExgMailboxUpdateArchiveMailboxError, ExgMailboxUpdateArchiveMailboxResponse, ExgMailboxAddArchiveMailboxData, ExgMailboxAddArchiveMailboxError, ExgMailboxAddArchiveMailboxResponse, ExgMailboxUpdateArchiveMailboxStatusData, ExgMailboxUpdateArchiveMailboxStatusError, ExgMailboxUpdateArchiveMailboxStatusResponse, ExgMailboxCheckBulkMailboxFeasibilityData, ExgMailboxCheckBulkMailboxFeasibilityError, ExgMailboxCheckBulkMailboxFeasibilityResponse, ExgMailboxAddExgBulkMailboxData, ExgMailboxAddExgBulkMailboxError, ExgMailboxAddExgBulkMailboxResponse, ExgMailboxUpdateExgBulkMailboxData, ExgMailboxUpdateExgBulkMailboxError, ExgMailboxUpdateExgBulkMailboxResponse, ExgMailboxGetMailboxAutoReplyConfigurationData, ExgMailboxGetMailboxAutoReplyConfigurationError, ExgMailboxGetMailboxAutoReplyConfigurationResponse, ExgMailboxSetUserAutoReplyConfigurationData, ExgMailboxSetUserAutoReplyConfigurationError, ExgMailboxSetUserAutoReplyConfigurationResponse, ExchangeDistributionListGetAllExchangeDistributionListsData, ExchangeDistributionListGetAllExchangeDistributionListsError, ExchangeDistributionListGetAllExchangeDistributionListsResponse, ExchangeDistributionListAddExchangeDistributionListData, ExchangeDistributionListAddExchangeDistributionListError, ExchangeDistributionListAddExchangeDistributionListResponse, ExchangeDistributionListUpdateExchangeDlAdministratorData, ExchangeDistributionListUpdateExchangeDlAdministratorError, ExchangeDistributionListUpdateExchangeDlAdministratorResponse, ExchangeDistributionListGetExchangeDlDetailsData, ExchangeDistributionListGetExchangeDlDetailsError, ExchangeDistributionListGetExchangeDlDetailsResponse, ExchangeDistributionListDeleteExchangeDistributionListData, ExchangeDistributionListDeleteExchangeDistributionListError, ExchangeDistributionListDeleteExchangeDistributionListResponse, ExchangeDistributionListGetExchangeListMembersData, ExchangeDistributionListGetExchangeListMembersError, ExchangeDistributionListGetExchangeListMembersResponse, ExchangeDistributionListUpdateExchangeListMembersData, ExchangeDistributionListUpdateExchangeListMembersError, ExchangeDistributionListUpdateExchangeListMembersResponse, ExchangeDistributionListRemoveListExchangeListMembersData, ExchangeDistributionListRemoveListExchangeListMembersError, ExchangeDistributionListRemoveListExchangeListMembersResponse, ExchangeDistributionListGetListAcceptedSendersData, ExchangeDistributionListGetListAcceptedSendersError, ExchangeDistributionListGetListAcceptedSendersResponse, ExchangeDistributionListAddListAcceptedSendersData, ExchangeDistributionListAddListAcceptedSendersError, ExchangeDistributionListAddListAcceptedSendersResponse, ExchangeDistributionListRemoveListAcceptedSendersData, ExchangeDistributionListRemoveListAcceptedSendersError, ExchangeDistributionListRemoveListAcceptedSendersResponse, ExchangeDistributionListGetListRejectedSendersData, ExchangeDistributionListGetListRejectedSendersError, ExchangeDistributionListGetListRejectedSendersResponse, ExchangeDistributionListAddListRejectedSendersData, ExchangeDistributionListAddListRejectedSendersError, ExchangeDistributionListAddListRejectedSendersResponse, ExchangeDistributionListRemoveListRejectedSendersData, ExchangeDistributionListRemoveListRejectedSendersError, ExchangeDistributionListRemoveListRejectedSendersResponse, ExchangeDistributionListGetListSendOnBehalfUsersData, ExchangeDistributionListGetListSendOnBehalfUsersError, ExchangeDistributionListGetListSendOnBehalfUsersResponse, ExchangeDistributionListAddListSendOnBehalfUsersData, ExchangeDistributionListAddListSendOnBehalfUsersError, ExchangeDistributionListAddListSendOnBehalfUsersResponse, ExchangeDistributionListRemoveListSendOnBehalfUsersData, ExchangeDistributionListRemoveListSendOnBehalfUsersError, ExchangeDistributionListRemoveListSendOnBehalfUsersResponse, ExchangeDistributionListGetListEmailAddressesData, ExchangeDistributionListGetListEmailAddressesError, ExchangeDistributionListGetListEmailAddressesResponse, ExchangeDistributionListSetListPrimaryEmailAddressData, ExchangeDistributionListSetListPrimaryEmailAddressError, ExchangeDistributionListSetListPrimaryEmailAddressResponse, ExchangeDistributionListAddListEmailAddressData, ExchangeDistributionListAddListEmailAddressError, ExchangeDistributionListAddListEmailAddressResponse, ExchangeDistributionListDeleteListEmailAddressData, ExchangeDistributionListDeleteListEmailAddressError, ExchangeDistributionListDeleteListEmailAddressResponse, ExchangeDistributionListGetListPropertiesData, ExchangeDistributionListGetListPropertiesError, ExchangeDistributionListGetListPropertiesResponse, ExchangeDistributionListUpdateListSettingsData, ExchangeDistributionListUpdateListSettingsError, ExchangeDistributionListUpdateListSettingsResponse, ExchangeMailContactGetAllExchangeMailContactsData, ExchangeMailContactGetAllExchangeMailContactsError, ExchangeMailContactGetAllExchangeMailContactsResponse, ExchangeMailContactAddExchangeMailContactData, ExchangeMailContactAddExchangeMailContactError, ExchangeMailContactAddExchangeMailContactResponse, ExchangeMailContactGetExchangeMailContactDetailsData, ExchangeMailContactGetExchangeMailContactDetailsError, ExchangeMailContactGetExchangeMailContactDetailsResponse, ExchangeMailContactDeleteMailContactData, ExchangeMailContactDeleteMailContactError, ExchangeMailContactDeleteMailContactResponse, ExchangeMailContactGetMailContactAcceptedSendersData, ExchangeMailContactGetMailContactAcceptedSendersError, ExchangeMailContactGetMailContactAcceptedSendersResponse, ExchangeMailContactAddMailContactAcceptedSendersData, ExchangeMailContactAddMailContactAcceptedSendersError, ExchangeMailContactAddMailContactAcceptedSendersResponse, ExchangeMailContactRemoveMailContactAcceptedSendersData, ExchangeMailContactRemoveMailContactAcceptedSendersError, ExchangeMailContactRemoveMailContactAcceptedSendersResponse, ExchangeMailContactGetMailContactRejectedSendersData, ExchangeMailContactGetMailContactRejectedSendersError, ExchangeMailContactGetMailContactRejectedSendersResponse, ExchangeMailContactAddMailContactRejectedSendersData, ExchangeMailContactAddMailContactRejectedSendersError, ExchangeMailContactAddMailContactRejectedSendersResponse, ExchangeMailContactRemoveMailContactRejectedSendersData, ExchangeMailContactRemoveMailContactRejectedSendersError, ExchangeMailContactRemoveMailContactRejectedSendersResponse, ExchangeMailContactGetMailContactEmailAddressesData, ExchangeMailContactGetMailContactEmailAddressesError, ExchangeMailContactGetMailContactEmailAddressesResponse, ExchangeMailContactAddMailContactEmailAddressData, ExchangeMailContactAddMailContactEmailAddressError, ExchangeMailContactAddMailContactEmailAddressResponse, ExchangeMailContactDeleteMailContactEmailAddressData, ExchangeMailContactDeleteMailContactEmailAddressError, ExchangeMailContactDeleteMailContactEmailAddressResponse, ExchangeMailContactSetMailContactPrimaryEmailAddressData, ExchangeMailContactSetMailContactPrimaryEmailAddressError, ExchangeMailContactSetMailContactPrimaryEmailAddressResponse, ExchangeMailContactSetMailContactExternalEmailAddressData, ExchangeMailContactSetMailContactExternalEmailAddressError, ExchangeMailContactSetMailContactExternalEmailAddressResponse, ExchangeMailContactGetMailContactGeneralSettingsData, ExchangeMailContactGetMailContactGeneralSettingsError, ExchangeMailContactGetMailContactGeneralSettingsResponse, ExchangeMailContactUpdateMailContactGeneralSettingsData, ExchangeMailContactUpdateMailContactGeneralSettingsError, ExchangeMailContactUpdateMailContactGeneralSettingsResponse, ExchangeMailContactGetMailContactAdvancedSettingsData, ExchangeMailContactGetMailContactAdvancedSettingsError, ExchangeMailContactGetMailContactAdvancedSettingsResponse, ExchangeMailContactUpdateMailContactAdvancedSettingsData, ExchangeMailContactUpdateMailContactAdvancedSettingsError, ExchangeMailContactUpdateMailContactAdvancedSettingsResponse, ExchangeMailContactUpdateMailContactData, ExchangeMailContactUpdateMailContactError, ExchangeMailContactUpdateMailContactResponse, ExchangeResourceMailboxGetAllExchangeResourceMailboxsData, ExchangeResourceMailboxGetAllExchangeResourceMailboxsError, ExchangeResourceMailboxGetAllExchangeResourceMailboxsResponse, ExchangeResourceMailboxAddExchangeResourceMailboxData, ExchangeResourceMailboxAddExchangeResourceMailboxError, ExchangeResourceMailboxAddExchangeResourceMailboxResponse, ExchangeResourceMailboxGetResourceMailboxDetailsData, ExchangeResourceMailboxGetResourceMailboxDetailsError, ExchangeResourceMailboxGetResourceMailboxDetailsResponse, ExchangeResourceMailboxDeleteExchangeResourceMailboxData, ExchangeResourceMailboxDeleteExchangeResourceMailboxError, ExchangeResourceMailboxDeleteExchangeResourceMailboxResponse, ExchangeResourceMailboxUpdateExchangeResourceMailboxData, ExchangeResourceMailboxUpdateExchangeResourceMailboxError, ExchangeResourceMailboxUpdateExchangeResourceMailboxResponse, ExchangeResourceMailboxGetArchiveResourceMailboxSettingsData, ExchangeResourceMailboxGetArchiveResourceMailboxSettingsError, ExchangeResourceMailboxGetArchiveResourceMailboxSettingsResponse, ExchangeResourceMailboxUpdateArchiveResourceMailboxData, ExchangeResourceMailboxUpdateArchiveResourceMailboxError, ExchangeResourceMailboxUpdateArchiveResourceMailboxResponse, ExchangeResourceMailboxAddArchiveResourceMailboxData, ExchangeResourceMailboxAddArchiveResourceMailboxError, ExchangeResourceMailboxAddArchiveResourceMailboxResponse, ExchangeResourceMailboxUpdateArchiveResourceMailboxStatusData, ExchangeResourceMailboxUpdateArchiveResourceMailboxStatusError, ExchangeResourceMailboxUpdateArchiveResourceMailboxStatusResponse, ExchangeResourceMailboxGetExchangeResourceMailboxGeneralPropertiesData, ExchangeResourceMailboxGetExchangeResourceMailboxGeneralPropertiesError, ExchangeResourceMailboxGetExchangeResourceMailboxGeneralPropertiesResponse, ExchangeResourceMailboxUpdateExchangeResourceMailboxGeneralPropertiesData, ExchangeResourceMailboxUpdateExchangeResourceMailboxGeneralPropertiesError, ExchangeResourceMailboxUpdateExchangeResourceMailboxGeneralPropertiesResponse, ExchangeResourceMailboxGetExchangeResourceMailboxAdvancedPropertiesData, ExchangeResourceMailboxGetExchangeResourceMailboxAdvancedPropertiesError, ExchangeResourceMailboxGetExchangeResourceMailboxAdvancedPropertiesResponse, ExchangeResourceMailboxUpdateExchangeResourceMailboxAdvancedPropertiesData, ExchangeResourceMailboxUpdateExchangeResourceMailboxAdvancedPropertiesError, ExchangeResourceMailboxUpdateExchangeResourceMailboxAdvancedPropertiesResponse, ExchangeResourceMailboxGetResourceMailboxEmailAddressesData, ExchangeResourceMailboxGetResourceMailboxEmailAddressesError, ExchangeResourceMailboxGetResourceMailboxEmailAddressesResponse, ExchangeResourceMailboxSetPrimaryEmailAddressesData, ExchangeResourceMailboxSetPrimaryEmailAddressesError, ExchangeResourceMailboxSetPrimaryEmailAddressesResponse, ExchangeResourceMailboxAddResourceMailboxEmailAddressesData, ExchangeResourceMailboxAddResourceMailboxEmailAddressesError, ExchangeResourceMailboxAddResourceMailboxEmailAddressesResponse, ExchangeResourceMailboxDeleteResourceMailboxEmailAddressesData, ExchangeResourceMailboxDeleteResourceMailboxEmailAddressesError, ExchangeResourceMailboxDeleteResourceMailboxEmailAddressesResponse, ExchangeResourceMailboxGetResourceMailboxSendOnBehalfUsersData, ExchangeResourceMailboxGetResourceMailboxSendOnBehalfUsersError, ExchangeResourceMailboxGetResourceMailboxSendOnBehalfUsersResponse, ExchangeResourceMailboxAddResourceMailboxSendOnBehalfUsersData, ExchangeResourceMailboxAddResourceMailboxSendOnBehalfUsersError, ExchangeResourceMailboxAddResourceMailboxSendOnBehalfUsersResponse, ExchangeResourceMailboxRemoveResourceMailboxSendOnBehalfUsersData, ExchangeResourceMailboxRemoveResourceMailboxSendOnBehalfUsersError, ExchangeResourceMailboxRemoveResourceMailboxSendOnBehalfUsersResponse, ExchangeResourceMailboxGetResourceMailboxAcceptedSendersData, ExchangeResourceMailboxGetResourceMailboxAcceptedSendersError, ExchangeResourceMailboxGetResourceMailboxAcceptedSendersResponse, ExchangeResourceMailboxAddResourceMailboxAcceptedSendersData, ExchangeResourceMailboxAddResourceMailboxAcceptedSendersError, ExchangeResourceMailboxAddResourceMailboxAcceptedSendersResponse, ExchangeResourceMailboxRemoveResourceMailboxAcceptedSendersData, ExchangeResourceMailboxRemoveResourceMailboxAcceptedSendersError, ExchangeResourceMailboxRemoveResourceMailboxAcceptedSendersResponse, ExchangeResourceMailboxGetResourceMailboxRejectedSendersData, ExchangeResourceMailboxGetResourceMailboxRejectedSendersError, ExchangeResourceMailboxGetResourceMailboxRejectedSendersResponse, ExchangeResourceMailboxAddResourceMailboxRejectedSendersData, ExchangeResourceMailboxAddResourceMailboxRejectedSendersError, ExchangeResourceMailboxAddResourceMailboxRejectedSendersResponse, ExchangeResourceMailboxRemoveResourceMailboxRejectedSendersData, ExchangeResourceMailboxRemoveResourceMailboxRejectedSendersError, ExchangeResourceMailboxRemoveResourceMailboxRejectedSendersResponse, ExchangeResourceMailboxGetUserFullAccessPermissionData, ExchangeResourceMailboxGetUserFullAccessPermissionError, ExchangeResourceMailboxGetUserFullAccessPermissionResponse, ExchangeResourceMailboxAddUserFullAccessPermissionData, ExchangeResourceMailboxAddUserFullAccessPermissionError, ExchangeResourceMailboxAddUserFullAccessPermissionResponse, ExchangeResourceMailboxRemoveUserFullAccessPermissionData, ExchangeResourceMailboxRemoveUserFullAccessPermissionError, ExchangeResourceMailboxRemoveUserFullAccessPermissionResponse, ExchangeResourceMailboxGetUserSendAsPermissionData, ExchangeResourceMailboxGetUserSendAsPermissionError, ExchangeResourceMailboxGetUserSendAsPermissionResponse, ExchangeResourceMailboxAddUserSendAsPermissionData, ExchangeResourceMailboxAddUserSendAsPermissionError, ExchangeResourceMailboxAddUserSendAsPermissionResponse, ExchangeResourceMailboxRemoveUserSendAsPermissionData, ExchangeResourceMailboxRemoveUserSendAsPermissionError, ExchangeResourceMailboxRemoveUserSendAsPermissionResponse, ExchangeResourceMailboxGetUserForwardingAddressData, ExchangeResourceMailboxGetUserForwardingAddressError, ExchangeResourceMailboxGetUserForwardingAddressResponse, ExchangeResourceMailboxUpdateUserForwardingAddressData, ExchangeResourceMailboxUpdateUserForwardingAddressError, ExchangeResourceMailboxUpdateUserForwardingAddressResponse, ExchangeResourceMailboxGetResourceMailboxStatisticsData, ExchangeResourceMailboxGetResourceMailboxStatisticsError, ExchangeResourceMailboxGetResourceMailboxStatisticsResponse, ExchangeResourceMailboxGetAllListsOfUserMailboxData, ExchangeResourceMailboxGetAllListsOfUserMailboxError, ExchangeResourceMailboxGetAllListsOfUserMailboxResponse, ExchangeResourceMailboxAddUserMailboxToListData, ExchangeResourceMailboxAddUserMailboxToListError, ExchangeResourceMailboxAddUserMailboxToListResponse, ExchangeResourceMailboxRemoveUserMailboxFromListData, ExchangeResourceMailboxRemoveUserMailboxFromListError, ExchangeResourceMailboxRemoveUserMailboxFromListResponse, ExchangeResourceMailboxGetDelegatesForResourceMailboxData, ExchangeResourceMailboxGetDelegatesForResourceMailboxError, ExchangeResourceMailboxGetDelegatesForResourceMailboxResponse, ExchangeResourceMailboxAddDelegatesForResourceMailboxData, ExchangeResourceMailboxAddDelegatesForResourceMailboxError, ExchangeResourceMailboxAddDelegatesForResourceMailboxResponse, ExchangeResourceMailboxRemoveDelegatesForResourceMailboxData, ExchangeResourceMailboxRemoveDelegatesForResourceMailboxError, ExchangeResourceMailboxRemoveDelegatesForResourceMailboxResponse, ExchangeResourceMailboxGetResourceMailboxBookInPolicyUsersData, ExchangeResourceMailboxGetResourceMailboxBookInPolicyUsersError, ExchangeResourceMailboxGetResourceMailboxBookInPolicyUsersResponse, ExchangeResourceMailboxAddResourceMailboxBookInPolicyRequestData, ExchangeResourceMailboxAddResourceMailboxBookInPolicyRequestError, ExchangeResourceMailboxAddResourceMailboxBookInPolicyRequestResponse, ExchangeResourceMailboxRemoveResourceMailboxBookInPolicyUsersData, ExchangeResourceMailboxRemoveResourceMailboxBookInPolicyUsersError, ExchangeResourceMailboxRemoveResourceMailboxBookInPolicyUsersResponse, ExchangeResourceMailboxGetResourceMailboxRequestInPolicyUsersData, ExchangeResourceMailboxGetResourceMailboxRequestInPolicyUsersError, ExchangeResourceMailboxGetResourceMailboxRequestInPolicyUsersResponse, ExchangeResourceMailboxAddResourceMailboxRequestInPolicyUsersData, ExchangeResourceMailboxAddResourceMailboxRequestInPolicyUsersError, ExchangeResourceMailboxAddResourceMailboxRequestInPolicyUsersResponse, ExchangeResourceMailboxRemoveResourceMailboxRequestInPolicyUsersData, ExchangeResourceMailboxRemoveResourceMailboxRequestInPolicyUsersError, ExchangeResourceMailboxRemoveResourceMailboxRequestInPolicyUsersResponse, ExchangeResourceMailboxGetResourceMailboxOutPolicyUsersData, ExchangeResourceMailboxGetResourceMailboxOutPolicyUsersError, ExchangeResourceMailboxGetResourceMailboxOutPolicyUsersResponse, ExchangeResourceMailboxAddResourceMailboxOutPolicyUsersData, ExchangeResourceMailboxAddResourceMailboxOutPolicyUsersError, ExchangeResourceMailboxAddResourceMailboxOutPolicyUsersResponse, ExchangeResourceMailboxRemoveResourceMailboxOutPolicyUsersData, ExchangeResourceMailboxRemoveResourceMailboxOutPolicyUsersError, ExchangeResourceMailboxRemoveResourceMailboxOutPolicyUsersResponse, ExchangeResourceMailboxGetResourceMaiboxPolicySettingsData, ExchangeResourceMailboxGetResourceMaiboxPolicySettingsError, ExchangeResourceMailboxGetResourceMaiboxPolicySettingsResponse, ExchangeResourceMailboxUpdateResourceMaiboxPolicySettingsData, ExchangeResourceMailboxUpdateResourceMaiboxPolicySettingsError, ExchangeResourceMailboxUpdateResourceMaiboxPolicySettingsResponse, ExchangePublicFolderGetAllExchangePublicFoldersData, ExchangePublicFolderGetAllExchangePublicFoldersError, ExchangePublicFolderGetAllExchangePublicFoldersResponse, ExchangePublicFolderAddExchangePublicFolderData, ExchangePublicFolderAddExchangePublicFolderError, ExchangePublicFolderAddExchangePublicFolderResponse, ExchangePublicFolderGetExchangePublicFolderDetailsData, ExchangePublicFolderGetExchangePublicFolderDetailsError, ExchangePublicFolderGetExchangePublicFolderDetailsResponse, ExchangePublicFolderDeleteExchangePublicFolderData, ExchangePublicFolderDeleteExchangePublicFolderError, ExchangePublicFolderDeleteExchangePublicFolderResponse, ExchangePublicFolderGetExchangePublicFolderGeneralPropertiesData, ExchangePublicFolderGetExchangePublicFolderGeneralPropertiesError, ExchangePublicFolderGetExchangePublicFolderGeneralPropertiesResponse, ExchangePublicFolderUpdateExchangePublicFolderGeneralPropertiesData, ExchangePublicFolderUpdateExchangePublicFolderGeneralPropertiesError, ExchangePublicFolderUpdateExchangePublicFolderGeneralPropertiesResponse, ExchangePublicFolderGetExchangePublicFolderAdvancedPropertiesData, ExchangePublicFolderGetExchangePublicFolderAdvancedPropertiesError, ExchangePublicFolderGetExchangePublicFolderAdvancedPropertiesResponse, ExchangePublicFolderUpdateExchangePublicFolderAdvancedPropertiesData, ExchangePublicFolderUpdateExchangePublicFolderAdvancedPropertiesError, ExchangePublicFolderUpdateExchangePublicFolderAdvancedPropertiesResponse, ExchangePublicFolderGetExchangePublicFolderPermissionsData, ExchangePublicFolderGetExchangePublicFolderPermissionsError, ExchangePublicFolderGetExchangePublicFolderPermissionsResponse, ExchangePublicFolderUpdateExchangePublicFolderPermissionsData, ExchangePublicFolderUpdateExchangePublicFolderPermissionsError, ExchangePublicFolderUpdateExchangePublicFolderPermissionsResponse, ExchangePublicFolderGetPublicFolderAcceptedSendersData, ExchangePublicFolderGetPublicFolderAcceptedSendersError, ExchangePublicFolderGetPublicFolderAcceptedSendersResponse, ExchangePublicFolderAddPublicFolderAcceptedSendersData, ExchangePublicFolderAddPublicFolderAcceptedSendersError, ExchangePublicFolderAddPublicFolderAcceptedSendersResponse, ExchangePublicFolderRemovePublicFolderAcceptedSendersData, ExchangePublicFolderRemovePublicFolderAcceptedSendersError, ExchangePublicFolderRemovePublicFolderAcceptedSendersResponse, ExchangePublicFolderGetPublicFolderRejectedSendersData, ExchangePublicFolderGetPublicFolderRejectedSendersError, ExchangePublicFolderGetPublicFolderRejectedSendersResponse, ExchangePublicFolderAddPublicFolderRejectedSendersData, ExchangePublicFolderAddPublicFolderRejectedSendersError, ExchangePublicFolderAddPublicFolderRejectedSendersResponse, ExchangePublicFolderRemovePublicFolderRejectedSendersData, ExchangePublicFolderRemovePublicFolderRejectedSendersError, ExchangePublicFolderRemovePublicFolderRejectedSendersResponse, ExchangePublicFolderGetPublicFolderEmailAddressesData, ExchangePublicFolderGetPublicFolderEmailAddressesError, ExchangePublicFolderGetPublicFolderEmailAddressesResponse, ExchangePublicFolderAddPublicFolderEmailAddressesData, ExchangePublicFolderAddPublicFolderEmailAddressesError, ExchangePublicFolderAddPublicFolderEmailAddressesResponse, ExchangePublicFolderDeletePublicFolderEmailAddressesData, ExchangePublicFolderDeletePublicFolderEmailAddressesError, ExchangePublicFolderDeletePublicFolderEmailAddressesResponse, ExchangePublicFolderGetPublicFolderForwardingAddressData, ExchangePublicFolderGetPublicFolderForwardingAddressError, ExchangePublicFolderGetPublicFolderForwardingAddressResponse, ExchangePublicFolderUpdatePublicFolderForwardingAddressData, ExchangePublicFolderUpdatePublicFolderForwardingAddressError, ExchangePublicFolderUpdatePublicFolderForwardingAddressResponse, ExchangePublicFolderEnableDisablePublicFolderData, ExchangePublicFolderEnableDisablePublicFolderError, ExchangePublicFolderEnableDisablePublicFolderResponse, ExchangeJournalRuleAddExchangeJournalRuleData, ExchangeJournalRuleAddExchangeJournalRuleError, ExchangeJournalRuleAddExchangeJournalRuleResponse, ExchangeJournalRuleDeleteExchangeJournalRuleData, ExchangeJournalRuleDeleteExchangeJournalRuleError, ExchangeJournalRuleDeleteExchangeJournalRuleResponse, ExchangeJournalRuleGetAllExchangeJournalRulesData, ExchangeJournalRuleGetAllExchangeJournalRulesError, ExchangeJournalRuleGetAllExchangeJournalRulesResponse, ExchangeJournalRuleEnableDisableExchangeJournalRuleData, ExchangeJournalRuleEnableDisableExchangeJournalRuleError, ExchangeJournalRuleEnableDisableExchangeJournalRuleResponse, ExchangeBlockedDomainRuleGetBlockedDomainRuleDetailsData, ExchangeBlockedDomainRuleGetBlockedDomainRuleDetailsError, ExchangeBlockedDomainRuleGetBlockedDomainRuleDetailsResponse, ExchangeBlockedDomainRuleUpdateExchangeBlockedDomainRuleData, ExchangeBlockedDomainRuleUpdateExchangeBlockedDomainRuleError, ExchangeBlockedDomainRuleUpdateExchangeBlockedDomainRuleResponse, ExchangeBlockedDomainRuleAddExchangeBlockedDomainRuleData, ExchangeBlockedDomainRuleAddExchangeBlockedDomainRuleError, ExchangeBlockedDomainRuleAddExchangeBlockedDomainRuleResponse, ExchangeBlockedDomainRuleDeleteExchangeBlockedDomainRuleData, ExchangeBlockedDomainRuleDeleteExchangeBlockedDomainRuleError, ExchangeBlockedDomainRuleDeleteExchangeBlockedDomainRuleResponse, ExchangeBlockedDomainRuleGetExchangeBlockedDomainRulesData, ExchangeBlockedDomainRuleGetExchangeBlockedDomainRulesError, ExchangeBlockedDomainRuleGetExchangeBlockedDomainRulesResponse, ExchangeBlockedDomainRuleEnableDisableExchangeBlockedDomainRuleData, ExchangeBlockedDomainRuleEnableDisableExchangeBlockedDomainRuleError, ExchangeBlockedDomainRuleEnableDisableExchangeBlockedDomainRuleResponse, ExchangeMailDisclaimerGetAllExchangeMailDisclaimersData, ExchangeMailDisclaimerGetAllExchangeMailDisclaimersError, ExchangeMailDisclaimerGetAllExchangeMailDisclaimersResponse, ExchangeMailDisclaimerUpdateExchangeMailDisclaimerData, ExchangeMailDisclaimerUpdateExchangeMailDisclaimerError, ExchangeMailDisclaimerUpdateExchangeMailDisclaimerResponse, ExchangeMailDisclaimerAddExchangeMailDisclaimerData, ExchangeMailDisclaimerAddExchangeMailDisclaimerError, ExchangeMailDisclaimerAddExchangeMailDisclaimerResponse, ExchangeMailDisclaimerDeleteExchangeMailDisclaimerData, ExchangeMailDisclaimerDeleteExchangeMailDisclaimerError, ExchangeMailDisclaimerDeleteExchangeMailDisclaimerResponse, ExchangeMailDisclaimerEnableDisableExchangeMailDisclaimerData, ExchangeMailDisclaimerEnableDisableExchangeMailDisclaimerError, ExchangeMailDisclaimerEnableDisableExchangeMailDisclaimerResponse, ExgConfsGetAllExgMailBoxesDbData, ExgConfsGetAllExgMailBoxesDbError, ExgConfsGetAllExgMailBoxesDbResponse, ExgConfsGetAllExgMailBoxesDbByUserIdData, ExgConfsGetAllExgMailBoxesDbByUserIdError, ExgConfsGetAllExgMailBoxesDbByUserIdResponse, ExgConfsGetAllExgPfMailBoxesData, ExgConfsGetAllExgPfMailBoxesError, ExgConfsGetAllExgPfMailBoxesResponse, ExgConfsGetAllExgPfMailBoxesByUserIdData, ExgConfsGetAllExgPfMailBoxesByUserIdError, ExgConfsGetAllExgPfMailBoxesByUserIdResponse, ExgConfsActiveSyncPoliciesData, ExgConfsActiveSyncPoliciesError, ExgConfsActiveSyncPoliciesResponse, ExchangeGetExchangeListsByAdministratorData, ExchangeGetExchangeListsByAdministratorError, ExchangeGetExchangeListsByAdministratorResponse, ExchangeIsUserDistributionListMemberData, ExchangeIsUserDistributionListMemberError, ExchangeIsUserDistributionListMemberResponse, SharePointSiteGetAllSharePointSitesData, SharePointSiteGetAllSharePointSitesError, SharePointSiteGetAllSharePointSitesResponse, SharePointSiteAddSharePointSiteData, SharePointSiteAddSharePointSiteError, SharePointSiteAddSharePointSiteResponse, SharePointSiteGetSharePointSiteDetailsData, SharePointSiteGetSharePointSiteDetailsError, SharePointSiteGetSharePointSiteDetailsResponse, SharePointSiteDeleteSharePointSiteData, SharePointSiteDeleteSharePointSiteError, SharePointSiteDeleteSharePointSiteResponse, SharePointSiteGetAllSharePointSubSitesData, SharePointSiteGetAllSharePointSubSitesError, SharePointSiteGetAllSharePointSubSitesResponse, SharePointSiteAddSharePointSubSiteData, SharePointSiteAddSharePointSubSiteError, SharePointSiteAddSharePointSubSiteResponse, SharePointSiteGetAllSharePointSiteRolesData, SharePointSiteGetAllSharePointSiteRolesError, SharePointSiteGetAllSharePointSiteRolesResponse, SharePointSiteDeleteSharePointSubSiteData, SharePointSiteDeleteSharePointSubSiteError, SharePointSiteDeleteSharePointSubSiteResponse, SharePointSiteGetSharePointSiteStatsData, SharePointSiteGetSharePointSiteStatsError, SharePointSiteGetSharePointSiteStatsResponse, SharePointUserGetSharePointUsersData, SharePointUserGetSharePointUsersError, SharePointUserGetSharePointUsersResponse, SharePointUserAddSharePointUserData, SharePointUserAddSharePointUserError, SharePointUserAddSharePointUserResponse, SharePointUserGetSharePointUserDetailsData, SharePointUserGetSharePointUserDetailsError, SharePointUserGetSharePointUserDetailsResponse, SharePointUserDeleteSharePointSiteUserData, SharePointUserDeleteSharePointSiteUserError, SharePointUserDeleteSharePointSiteUserResponse, SharePointUserGetSharePointUserRolesData, SharePointUserGetSharePointUserRolesError, SharePointUserGetSharePointUserRolesResponse, SharePointUserUpdateSharePointUserRolesData, SharePointUserUpdateSharePointUserRolesError, SharePointUserUpdateSharePointUserRolesResponse, SharePointUserChangeSharePointUserPasswordData, SharePointUserChangeSharePointUserPasswordError, SharePointUserChangeSharePointUserPasswordResponse, SharePointUserGetSharePointUserPropertiesData, SharePointUserGetSharePointUserPropertiesError, SharePointUserGetSharePointUserPropertiesResponse, SharePointUserUpdateSharePointUserPropertiesData, SharePointUserUpdateSharePointUserPropertiesError, SharePointUserUpdateSharePointUserPropertiesResponse, SharePointUserGetExistingSharePointUsersData, SharePointUserGetExistingSharePointUsersError, SharePointUserGetExistingSharePointUsersResponse, SharePointGroupGetSharePointGroupsData, SharePointGroupGetSharePointGroupsError, SharePointGroupGetSharePointGroupsResponse, SharePointGroupAddSharePointGroupData, SharePointGroupAddSharePointGroupError, SharePointGroupAddSharePointGroupResponse, SharePointGroupDeleteSharePointGroupsData, SharePointGroupDeleteSharePointGroupsError, SharePointGroupDeleteSharePointGroupsResponse, SharePointGroupGetSharePointGroupRolesData, SharePointGroupGetSharePointGroupRolesError, SharePointGroupGetSharePointGroupRolesResponse, SharePointGroupUpdateSharePointGroupRolesData, SharePointGroupUpdateSharePointGroupRolesError, SharePointGroupUpdateSharePointGroupRolesResponse, SharePointGroupGetSharePointGroupUsersData, SharePointGroupGetSharePointGroupUsersError, SharePointGroupGetSharePointGroupUsersResponse, SharePointGroupAddSharePointGroupUsersData, SharePointGroupAddSharePointGroupUsersError, SharePointGroupAddSharePointGroupUsersResponse, SharePointGroupRemoveSharePointGroupUsersData, SharePointGroupRemoveSharePointGroupUsersError, SharePointGroupRemoveSharePointGroupUsersResponse, SharePointConfGetUserSpWebApplicationsData, SharePointConfGetUserSpWebApplicationsError, SharePointConfGetUserSpWebApplicationsResponse, SharePointServerGetSharePointServerWebApplicationsData, SharePointServerGetSharePointServerWebApplicationsError, SharePointServerGetSharePointServerWebApplicationsResponse, SharePointServerGetSharePointServerLocalesData, SharePointServerGetSharePointServerLocalesError, SharePointServerGetSharePointServerLocalesResponse, SharePointServerGetSharePointServerWebTemplatesData, SharePointServerGetSharePointServerWebTemplatesError, SharePointServerGetSharePointServerWebTemplatesResponse, SkypeUserListSkypeUsersData, SkypeUserListSkypeUsersError, SkypeUserListSkypeUsersResponse, SkypeUserAddSkypeUserData, SkypeUserAddSkypeUserError, SkypeUserAddSkypeUserResponse, SkypeUserGetSkypeUserDetailsData, SkypeUserGetSkypeUserDetailsError, SkypeUserGetSkypeUserDetailsResponse, SkypeUserDeleteSkypeUserData, SkypeUserDeleteSkypeUserError, SkypeUserDeleteSkypeUserResponse, SkypeUserChangeSkypeUserPasswordData, SkypeUserChangeSkypeUserPasswordError, SkypeUserChangeSkypeUserPasswordResponse, SkypeUserGetSkypeUserPropertiesData, SkypeUserGetSkypeUserPropertiesError, SkypeUserGetSkypeUserPropertiesResponse, SkypeUserUpdateSkypeUserPropertiesData, SkypeUserUpdateSkypeUserPropertiesError, SkypeUserUpdateSkypeUserPropertiesResponse, SkypeUserGetSkypeUserAdvancedSettingsData, SkypeUserGetSkypeUserAdvancedSettingsError, SkypeUserGetSkypeUserAdvancedSettingsResponse, SkypeUserUpdateSkypeUserAdvancedPropertiesData, SkypeUserUpdateSkypeUserAdvancedPropertiesError, SkypeUserUpdateSkypeUserAdvancedPropertiesResponse, SkypeUserUpdateSkypeUserStatusData, SkypeUserUpdateSkypeUserStatusError, SkypeUserUpdateSkypeUserStatusResponse, SkypeUserGetSkypeUserForwardingSettingsData, SkypeUserGetSkypeUserForwardingSettingsError, SkypeUserGetSkypeUserForwardingSettingsResponse, SkypeUserUpdateSkypeUserForwardingSettingsData, SkypeUserUpdateSkypeUserForwardingSettingsError, SkypeUserUpdateSkypeUserForwardingSettingsResponse, SkypeUserCheckBulkSkypeUsersFeasibilityData, SkypeUserCheckBulkSkypeUsersFeasibilityError, SkypeUserCheckBulkSkypeUsersFeasibilityResponse, SkypeUserAddBulkSkypeUsersData, SkypeUserAddBulkSkypeUsersError, SkypeUserAddBulkSkypeUsersResponse, SkypeUserUpdateSkypeUserTelephonySettingsData, SkypeUserUpdateSkypeUserTelephonySettingsError, SkypeUserUpdateSkypeUserTelephonySettingsResponse, SkypeUserUpdateSkypeUserPolicySettingsData, SkypeUserUpdateSkypeUserPolicySettingsError, SkypeUserUpdateSkypeUserPolicySettingsResponse, SkypeSipDomainListSipDomainsData, SkypeSipDomainListSipDomainsError, SkypeSipDomainListSipDomainsResponse, SkypeSipDomainAddSkypeSipDomainData, SkypeSipDomainAddSkypeSipDomainError, SkypeSipDomainAddSkypeSipDomainResponse, SkypeSipDomainGetSipDomainDetailsData, SkypeSipDomainGetSipDomainDetailsError, SkypeSipDomainGetSipDomainDetailsResponse, SkypeSipDomainDeleteSipDomainData, SkypeSipDomainDeleteSipDomainError, SkypeSipDomainDeleteSipDomainResponse, SkypeGroupListSkypeGroupsData, SkypeGroupListSkypeGroupsError, SkypeGroupListSkypeGroupsResponse, SkypeGroupAddSkypeResponseGroupData, SkypeGroupAddSkypeResponseGroupError, SkypeGroupAddSkypeResponseGroupResponse, SkypeGroupGetSkypeGroupDetailsData, SkypeGroupGetSkypeGroupDetailsError, SkypeGroupGetSkypeGroupDetailsResponse, SkypeGroupDeleteSkypeGroupData, SkypeGroupDeleteSkypeGroupError, SkypeGroupDeleteSkypeGroupResponse, SkypeGroupGetSkypeGroupPropertiesData, SkypeGroupGetSkypeGroupPropertiesError, SkypeGroupGetSkypeGroupPropertiesResponse, SkypeGroupUpdateSkypeGroupPropertiesData, SkypeGroupUpdateSkypeGroupPropertiesError, SkypeGroupUpdateSkypeGroupPropertiesResponse, SkypeQueueListSkypeQueuesData, SkypeQueueListSkypeQueuesError, SkypeQueueListSkypeQueuesResponse, SkypeQueueAddSkypeResponseQueueData, SkypeQueueAddSkypeResponseQueueError, SkypeQueueAddSkypeResponseQueueResponse, SkypeQueueGetSkypeQueueDetailsData, SkypeQueueGetSkypeQueueDetailsError, SkypeQueueGetSkypeQueueDetailsResponse, SkypeQueueDeleteSkypeQueueData, SkypeQueueDeleteSkypeQueueError, SkypeQueueDeleteSkypeQueueResponse, SkypeQueueGetSkypeQueuePropertiesData, SkypeQueueGetSkypeQueuePropertiesError, SkypeQueueGetSkypeQueuePropertiesResponse, SkypeQueueUpdateSkypeQueuePropertiesData, SkypeQueueUpdateSkypeQueuePropertiesError, SkypeQueueUpdateSkypeQueuePropertiesResponse, SkypeWorkflowListSkypeWorkflowsData, SkypeWorkflowListSkypeWorkflowsError, SkypeWorkflowListSkypeWorkflowsResponse, SkypeWorkflowAddSkypeWorkflowData, SkypeWorkflowAddSkypeWorkflowError, SkypeWorkflowAddSkypeWorkflowResponse, SkypeWorkflowGetSkypeWorkflowDetailsData, SkypeWorkflowGetSkypeWorkflowDetailsError, SkypeWorkflowGetSkypeWorkflowDetailsResponse, SkypeWorkflowDeleteSkypeWorkflowData, SkypeWorkflowDeleteSkypeWorkflowError, SkypeWorkflowDeleteSkypeWorkflowResponse, SkypeWorkflowGetSkypeWorkflowSettingsData, SkypeWorkflowGetSkypeWorkflowSettingsError, SkypeWorkflowGetSkypeWorkflowSettingsResponse, SkypeWorkflowUpdateSkypeWorkflowSettingsData, SkypeWorkflowUpdateSkypeWorkflowSettingsError, SkypeWorkflowUpdateSkypeWorkflowSettingsResponse, SkypeWorkflowUpdateWorkflowActivationStatusData, SkypeWorkflowUpdateWorkflowActivationStatusError, SkypeWorkflowUpdateWorkflowActivationStatusResponse, SkypeWorkflowUpdateWorkflowFederationStatusData, SkypeWorkflowUpdateWorkflowFederationStatusError, SkypeWorkflowUpdateWorkflowFederationStatusResponse, SkypeWorkflowUpdateWorkflowAnonymityStatusData, SkypeWorkflowUpdateWorkflowAnonymityStatusError, SkypeWorkflowUpdateWorkflowAnonymityStatusResponse, SkypeWorkflowUpdateWorkflowIvrSettingsData, SkypeWorkflowUpdateWorkflowIvrSettingsError, SkypeWorkflowUpdateWorkflowIvrSettingsResponse, SkypeServerGetServerRegistrarPoolsData, SkypeServerGetServerRegistrarPoolsError, SkypeServerGetServerRegistrarPoolsResponse, SkypeServerGetUserAssignedServerPoolsData, SkypeServerGetUserAssignedServerPoolsError, SkypeServerGetUserAssignedServerPoolsResponse, SkypeServerGetServerTimeZonesData, SkypeServerGetServerTimeZonesError, SkypeServerGetServerTimeZonesResponse, SkypeServerListUserLineUrisData, SkypeServerListUserLineUrisError, SkypeServerListUserLineUrisResponse, SkypeServerGetLineUriDetailsData, SkypeServerGetLineUriDetailsError, SkypeServerGetLineUriDetailsResponse, SkypeServerGetFederatedDomainsData, SkypeServerGetFederatedDomainsError, SkypeServerGetFederatedDomainsResponse, SkypeServerGetSkypeUserPoliciesData, SkypeServerGetSkypeUserPoliciesError, SkypeServerGetSkypeUserPoliciesResponse, SkypeServerGetServerApplicationServicesData, SkypeServerGetServerApplicationServicesError, SkypeServerGetServerApplicationServicesResponse, SkypeServerGetUserAssignedApplicationServicesData, SkypeServerGetUserAssignedApplicationServicesError, SkypeServerGetUserAssignedApplicationServicesResponse, VirtualMachineListVirtualMachinesData, VirtualMachineListVirtualMachinesError, VirtualMachineListVirtualMachinesResponse, VirtualMachineAddVirtualMachineData, VirtualMachineAddVirtualMachineError, VirtualMachineAddVirtualMachineResponse, VirtualMachineGetVirtualMachineDetailsData, VirtualMachineGetVirtualMachineDetailsError, VirtualMachineGetVirtualMachineDetailsResponse, VirtualMachineUpdateVirtualMachineData, VirtualMachineUpdateVirtualMachineError, VirtualMachineUpdateVirtualMachineResponse, VirtualMachineDeleteVirtualMachineData, VirtualMachineDeleteVirtualMachineError, VirtualMachineDeleteVirtualMachineResponse, VirtualMachineUpdateVlanData, VirtualMachineUpdateVlanError, VirtualMachineUpdateVlanResponse, VirtualMachineSystemVirtualMachinesListData, VirtualMachineSystemVirtualMachinesListError, VirtualMachineSystemVirtualMachinesListResponse, VirtualMachineGetSystemVirtualMachineSettingsData, VirtualMachineGetSystemVirtualMachineSettingsError, VirtualMachineGetSystemVirtualMachineSettingsResponse, VirtualMachineGetVirtualMachineIpAddressesData, VirtualMachineGetVirtualMachineIpAddressesError, VirtualMachineGetVirtualMachineIpAddressesResponse, VirtualMachineAssignVmIpAddressesData, VirtualMachineAssignVmIpAddressesError, VirtualMachineAssignVmIpAddressesResponse, VirtualMachineDeleteVmAssignedIpAddressData, VirtualMachineDeleteVmAssignedIpAddressError, VirtualMachineDeleteVmAssignedIpAddressResponse, VirtualMachineGetAllSnapShotsData, VirtualMachineGetAllSnapShotsError, VirtualMachineGetAllSnapShotsResponse, VirtualMachineTakeSnapShotData, VirtualMachineTakeSnapShotError, VirtualMachineTakeSnapShotResponse, VirtualMachineApplySnapShotData, VirtualMachineApplySnapShotError, VirtualMachineApplySnapShotResponse, VirtualMachineGetSnapShotDetailData, VirtualMachineGetSnapShotDetailError, VirtualMachineGetSnapShotDetailResponse, VirtualMachineDeleteSnapShotData, VirtualMachineDeleteSnapShotError, VirtualMachineDeleteSnapShotResponse, VirtualMachineChangePasswordData, VirtualMachineChangePasswordError, VirtualMachineChangePasswordResponse, VirtualMachineStartVirtualMachineData, VirtualMachineStartVirtualMachineError, VirtualMachineStartVirtualMachineResponse, VirtualMachinePauseVirtualMachineData, VirtualMachinePauseVirtualMachineError, VirtualMachinePauseVirtualMachineResponse, VirtualMachineResumeVirtualMachineData, VirtualMachineResumeVirtualMachineError, VirtualMachineResumeVirtualMachineResponse, VirtualMachineRebootVirtualMachineData, VirtualMachineRebootVirtualMachineError, VirtualMachineRebootVirtualMachineResponse, VirtualMachineShutdownVirtualMachineData, VirtualMachineShutdownVirtualMachineError, VirtualMachineShutdownVirtualMachineResponse, VirtualMachineImportVirtualMachineData, VirtualMachineImportVirtualMachineError, VirtualMachineImportVirtualMachineResponse, VirtualMachineTransferVirtualMachineData, VirtualMachineTransferVirtualMachineError, VirtualMachineTransferVirtualMachineResponse, VirtualMachineGetVirtualMachineCurrentStateData, VirtualMachineGetVirtualMachineCurrentStateError, VirtualMachineGetVirtualMachineCurrentStateResponse, VirtualMachineFetchMachinePasswordData, VirtualMachineFetchMachinePasswordError, VirtualMachineFetchMachinePasswordResponse, ResourceGetAllBaseOsTypesError, ResourceGetAllBaseOsTypesResponse, VlaNsGetAllVlaNsData, VlaNsGetAllVlaNsError, VlaNsGetAllVlaNsResponse, OsTemplatesGetAllOsTemplatesData, OsTemplatesGetAllOsTemplatesError, OsTemplatesGetAllOsTemplatesResponse } from './types.gen';

export const client = createClient(createConfig());

/**
 * Add New User
 * The method will add new active directory user and will return new user details.
 */
export const activeDirectoryObjectAddActiveDirectoryUser = <ThrowOnError extends boolean = false>(options: Options<ActiveDirectoryObjectAddActiveDirectoryUserData, ThrowOnError>) => { return (options?.client ?? client).post<ActiveDirectoryObjectAddActiveDirectoryUserResponse, ActiveDirectoryObjectAddActiveDirectoryUserError, ThrowOnError>({
    ...options,
    url: 'active-directory/organizations/{organizationId}/users'
}); };

/**
 * Change User Password
 * The method will update the password settings of active directory user.
 */
export const activeDirectoryObjectChangeAdUserPassword = <ThrowOnError extends boolean = false>(options: Options<ActiveDirectoryObjectChangeAdUserPasswordData, ThrowOnError>) => { return (options?.client ?? client).put<ActiveDirectoryObjectChangeAdUserPasswordResponse, ActiveDirectoryObjectChangeAdUserPasswordError, ThrowOnError>({
    ...options,
    url: '/active-directory/organizations/{organizationId}/users/password'
}); };

/**
 * Enable/Disable User
 * The method will toggle the state of active directory user.
 */
export const activeDirectoryObjectToggleAdUserState = <ThrowOnError extends boolean = false>(options: Options<ActiveDirectoryObjectToggleAdUserStateData, ThrowOnError>) => { return (options?.client ?? client).put<ActiveDirectoryObjectToggleAdUserStateResponse, ActiveDirectoryObjectToggleAdUserStateError, ThrowOnError>({
    ...options,
    url: '/active-directory/organizations/{organizationId}/users/enable-disable'
}); };

/**
 * Get Organization Objects
 * The method will retrieve the list of organization objects.
 */
export const activeDirectoryGetOrganizationObjects = <ThrowOnError extends boolean = false>(options: Options<ActiveDirectoryGetOrganizationObjectsData, ThrowOnError>) => { return (options?.client ?? client).get<ActiveDirectoryGetOrganizationObjectsResponse, ActiveDirectoryGetOrganizationObjectsError, ThrowOnError>({
    ...options,
    url: '/active-directory/organizations/{organizationId}/objects'
}); };

/**
 * Delete Organization Objects
 * The method will delete organization objects provided in list.
 */
export const activeDirectoryDeleteMultipleObjects = <ThrowOnError extends boolean = false>(options: Options<ActiveDirectoryDeleteMultipleObjectsData, ThrowOnError>) => { return (options?.client ?? client).put<ActiveDirectoryDeleteMultipleObjectsResponse, ActiveDirectoryDeleteMultipleObjectsError, ThrowOnError>({
    ...options,
    url: '/active-directory/organizations/{organizationId}/objects'
}); };

/**
 * Get Object Account Settings
 * The method will retrieve the account expiry details.
 */
export const activeDirectoryObjectGetObjectAccountSettings = <ThrowOnError extends boolean = false>(options: Options<ActiveDirectoryObjectGetObjectAccountSettingsData, ThrowOnError>) => { return (options?.client ?? client).get<ActiveDirectoryObjectGetObjectAccountSettingsResponse, ActiveDirectoryObjectGetObjectAccountSettingsError, ThrowOnError>({
    ...options,
    url: '/active-directory/organizations/{organizationId}/objects/account'
}); };

/**
 * Update Object Account Settings
 * The method will update the account expiry settings of user.
 */
export const activeDirectoryObjectSetObjectAccountSettings = <ThrowOnError extends boolean = false>(options: Options<ActiveDirectoryObjectSetObjectAccountSettingsData, ThrowOnError>) => { return (options?.client ?? client).put<ActiveDirectoryObjectSetObjectAccountSettingsResponse, ActiveDirectoryObjectSetObjectAccountSettingsError, ThrowOnError>({
    ...options,
    url: '/active-directory/organizations/{organizationId}/objects/account'
}); };

/**
 * Update Object Details
 * The method will update the object protection from accidental delete.
 */
export const activeDirectoryObjectSetObjectDetails = <ThrowOnError extends boolean = false>(options: Options<ActiveDirectoryObjectSetObjectDetailsData, ThrowOnError>) => { return (options?.client ?? client).put<ActiveDirectoryObjectSetObjectDetailsResponse, ActiveDirectoryObjectSetObjectDetailsError, ThrowOnError>({
    ...options,
    url: '/active-directory/organizations/{organizationId}/objects/details'
}); };

/**
 * Get Object General Properties
 * The method will retrieve the general properties of active directory object.
 */
export const activeDirectoryObjectGetAdObjectGeneralProperties = <ThrowOnError extends boolean = false>(options: Options<ActiveDirectoryObjectGetAdObjectGeneralPropertiesData, ThrowOnError>) => { return (options?.client ?? client).get<ActiveDirectoryObjectGetAdObjectGeneralPropertiesResponse, ActiveDirectoryObjectGetAdObjectGeneralPropertiesError, ThrowOnError>({
    ...options,
    url: '/active-directory/organizations/{organizationId}/objects/general-profile'
}); };

/**
 * Update Object General Properties
 * The method will update the general properties of active directory object.
 */
export const activeDirectoryObjectUpdateAdObjectGeneralProperties = <ThrowOnError extends boolean = false>(options: Options<ActiveDirectoryObjectUpdateAdObjectGeneralPropertiesData, ThrowOnError>) => { return (options?.client ?? client).put<ActiveDirectoryObjectUpdateAdObjectGeneralPropertiesResponse, ActiveDirectoryObjectUpdateAdObjectGeneralPropertiesError, ThrowOnError>({
    ...options,
    url: '/active-directory/organizations/{organizationId}/objects/general-profile'
}); };

/**
 * Get Object Membership Detail
 * The method will retrieve the list of groups for which object has membership.
 */
export const activeDirectoryObjectGetObjectMemberOfDetails = <ThrowOnError extends boolean = false>(options: Options<ActiveDirectoryObjectGetObjectMemberOfDetailsData, ThrowOnError>) => { return (options?.client ?? client).get<ActiveDirectoryObjectGetObjectMemberOfDetailsResponse, ActiveDirectoryObjectGetObjectMemberOfDetailsError, ThrowOnError>({
    ...options,
    url: '/active-directory/organizations/{organizationId}/objects/memberof'
}); };

/**
 * Update Object Membership
 * The method will add object in those groups which are provided in list.
 */
export const activeDirectoryObjectUpdateObjectMemberOfDetails = <ThrowOnError extends boolean = false>(options: Options<ActiveDirectoryObjectUpdateObjectMemberOfDetailsData, ThrowOnError>) => { return (options?.client ?? client).put<ActiveDirectoryObjectUpdateObjectMemberOfDetailsResponse, ActiveDirectoryObjectUpdateObjectMemberOfDetailsError, ThrowOnError>({
    ...options,
    url: '/active-directory/organizations/{organizationId}/objects/memberof'
}); };

/**
 * Move Active Directory Object.
 * The method will move the objects from one organizational unit to other.
 */
export const activeDirectoryObjectMoveObjectToOu = <ThrowOnError extends boolean = false>(options: Options<ActiveDirectoryObjectMoveObjectToOuData, ThrowOnError>) => { return (options?.client ?? client).put<ActiveDirectoryObjectMoveObjectToOuResponse, ActiveDirectoryObjectMoveObjectToOuError, ThrowOnError>({
    ...options,
    url: '/active-directory/organizations/{organizationId}/objects/move'
}); };

/**
 * Get Group Members
 * The method will retrieve the list of memebers of group.
 */
export const activeDirectoryObjectGetGroupMembers = <ThrowOnError extends boolean = false>(options: Options<ActiveDirectoryObjectGetGroupMembersData, ThrowOnError>) => { return (options?.client ?? client).get<ActiveDirectoryObjectGetGroupMembersResponse, ActiveDirectoryObjectGetGroupMembersError, ThrowOnError>({
    ...options,
    url: '/active-directory/organizations/{organizationId}/groups/members'
}); };

/**
 * Update Group Members
 * The method will update the members of group.
 */
export const activeDirectoryObjectUpdateGroupMembers = <ThrowOnError extends boolean = false>(options: Options<ActiveDirectoryObjectUpdateGroupMembersData, ThrowOnError>) => { return (options?.client ?? client).put<ActiveDirectoryObjectUpdateGroupMembersResponse, ActiveDirectoryObjectUpdateGroupMembersError, ThrowOnError>({
    ...options,
    url: '/active-directory/organizations/{organizationId}/groups/members'
}); };

/**
 * Get Group Admin
 * The method will retrieve the admin of group.
 */
export const activeDirectoryObjectGetGroupAdmin = <ThrowOnError extends boolean = false>(options: Options<ActiveDirectoryObjectGetGroupAdminData, ThrowOnError>) => { return (options?.client ?? client).get<ActiveDirectoryObjectGetGroupAdminResponse, ActiveDirectoryObjectGetGroupAdminError, ThrowOnError>({
    ...options,
    url: '/active-directory/organizations/{organizationId}/groups/admin'
}); };

/**
 * Update Group Admin
 * The method will update the admin of group.
 */
export const activeDirectoryObjectUpdateGroupAdmin = <ThrowOnError extends boolean = false>(options: Options<ActiveDirectoryObjectUpdateGroupAdminData, ThrowOnError>) => { return (options?.client ?? client).put<ActiveDirectoryObjectUpdateGroupAdminResponse, ActiveDirectoryObjectUpdateGroupAdminError, ThrowOnError>({
    ...options,
    url: '/active-directory/organizations/{organizationId}/groups/admin'
}); };

/**
 * Get Token Details
 * Get Token Details, operation will return you complete token details. Tokens are used for authentication.
 */
export const tokenGetTokenDetails = <ThrowOnError extends boolean = false>(options: Options<TokenGetTokenDetailsData, ThrowOnError>) => { return (options?.client ?? client).get<TokenGetTokenDetailsResponse, TokenGetTokenDetailsError, ThrowOnError>({
    ...options,
    url: '/auth-tokens'
}); };

/**
 * Generate Token
 * Generate token, method generates token by taking user credentials.
 */
export const tokenGenerateToken = <ThrowOnError extends boolean = false>(options: Options<TokenGenerateTokenData, ThrowOnError>) => { return (options?.client ?? client).post<TokenGenerateTokenResponse, TokenGenerateTokenError, ThrowOnError>({
    ...options,
    url: '/auth-tokens'
}); };

/**
 * Revoke Token
 * Delete Token, it will return you the status of the operation.
 */
export const tokenRevokeToken = <ThrowOnError extends boolean = false>(options: Options<TokenRevokeTokenData, ThrowOnError>) => { return (options?.client ?? client).delete<TokenRevokeTokenResponse, TokenRevokeTokenError, ThrowOnError>({
    ...options,
    url: '/auth-tokens'
}); };

/**
 * Get all Users
 * The method fetches a list of all users.
 */
export const usersGetAllUsers = <ThrowOnError extends boolean = false>(options?: Options<UsersGetAllUsersData, ThrowOnError>) => { return (options?.client ?? client).get<UsersGetAllUsersResponse, UsersGetAllUsersError, ThrowOnError>({
    ...options,
    url: '/panel-users'
}); };

/**
 * Add a new User
 * Add new user, method will return you new user id.
 */
export const usersAddUser = <ThrowOnError extends boolean = false>(options: Options<UsersAddUserData, ThrowOnError>) => { return (options?.client ?? client).post<UsersAddUserResponse, UsersAddUserError, ThrowOnError>({
    ...options,
    url: '/panel-users'
}); };

/**
 * Get User Details
 * Get complete user details, method will return you complete details of a user.
 */
export const usersGetUserDetails = <ThrowOnError extends boolean = false>(options: Options<UsersGetUserDetailsData, ThrowOnError>) => { return (options?.client ?? client).get<UsersGetUserDetailsResponse, UsersGetUserDetailsError, ThrowOnError>({
    ...options,
    url: '/panel-users/{userId}'
}); };

/**
 * Update User Details
 * Update user details, method will return you user's updated details.
 */
export const usersUpdateUser = <ThrowOnError extends boolean = false>(options: Options<UsersUpdateUserData, ThrowOnError>) => { return (options?.client ?? client).put<UsersUpdateUserResponse, UsersUpdateUserError, ThrowOnError>({
    ...options,
    url: '/panel-users/{userId}'
}); };

/**
 * Delete User
 * Delete user, method will return you the operation status.
 */
export const usersDeleteUser = <ThrowOnError extends boolean = false>(options: Options<UsersDeleteUserData, ThrowOnError>) => { return (options?.client ?? client).delete<UsersDeleteUserResponse, UsersDeleteUserError, ThrowOnError>({
    ...options,
    url: '/panel-users/{userId}'
}); };

/**
 * Disable User
 * Disable user, method will return you the operation status.
 */
export const usersDisableUser = <ThrowOnError extends boolean = false>(options: Options<UsersDisableUserData, ThrowOnError>) => { return (options?.client ?? client).put<UsersDisableUserResponse, UsersDisableUserError, ThrowOnError>({
    ...options,
    url: '/panel-users/{userId}/disable'
}); };

/**
 * Enable User
 * Enable user, method will return you the operation status.
 */
export const usersEnableUser = <ThrowOnError extends boolean = false>(options: Options<UsersEnableUserData, ThrowOnError>) => { return (options?.client ?? client).put<UsersEnableUserResponse, UsersEnableUserError, ThrowOnError>({
    ...options,
    url: '/panel-users/{userId}/enable'
}); };

/**
 * Change Password
 * Change user pasword, method will return you the operation status.
 */
export const usersChangePassword = <ThrowOnError extends boolean = false>(options: Options<UsersChangePasswordData, ThrowOnError>) => { return (options?.client ?? client).put<UsersChangePasswordResponse, UsersChangePasswordError, ThrowOnError>({
    ...options,
    url: '/panel-users/{userId}/change-password'
}); };

/**
 * Check Username Availability
 * Check username availablity, method verifies if the username is available for use.
 */
export const usersIsLoginNameAvailable = <ThrowOnError extends boolean = false>(options: Options<UsersIsLoginNameAvailableData, ThrowOnError>) => { return (options?.client ?? client).get<UsersIsLoginNameAvailableResponse, UsersIsLoginNameAvailableError, ThrowOnError>({
    ...options,
    url: '/panel-users/user-names/{userName}'
}); };

/**
 * Get User Profile Details
 * Get user profile details, method will return you the user profile details.
 */
export const usersGetUserProfileDetails = <ThrowOnError extends boolean = false>(options: Options<UsersGetUserProfileDetailsData, ThrowOnError>) => { return (options?.client ?? client).get<UsersGetUserProfileDetailsResponse, UsersGetUserProfileDetailsError, ThrowOnError>({
    ...options,
    url: '/panel-users/{userId}/general-profile'
}); };

/**
 * Update User Profile
 * Update user profile details, method will return you the operation status.
 */
export const usersUpdateUserProfile = <ThrowOnError extends boolean = false>(options: Options<UsersUpdateUserProfileData, ThrowOnError>) => { return (options?.client ?? client).put<UsersUpdateUserProfileResponse, UsersUpdateUserProfileError, ThrowOnError>({
    ...options,
    url: '/panel-users/{userId}/general-profile'
}); };

/**
 * Get User Quota Report
 * Get user quota report, method will return users quota and all its resources.
 */
export const reportGetUserQuotaReport = <ThrowOnError extends boolean = false>(options?: Options<ReportGetUserQuotaReportData, ThrowOnError>) => { return (options?.client ?? client).get<ReportGetUserQuotaReportResponse, ReportGetUserQuotaReportError, ThrowOnError>({
    ...options,
    url: '/reports/quota'
}); };

/**
 * Get Consumed Resources
 * Get consumed resources report, method will return you resources consumption report.
 */
export const reportGetConsumedResources = <ThrowOnError extends boolean = false>(options?: Options<unknown, ThrowOnError>) => { return (options?.client ?? client).get<ReportGetConsumedResourcesResponse, ReportGetConsumedResourcesError, ThrowOnError>({
    ...options,
    url: '/reports/quota/consumed'
}); };

/**
 * Get Daily Resource Usage
 * Get daily consumed report, method will return you consumption report for last 15 days.
 */
export const reportGetDailyResourcesUsage = <ThrowOnError extends boolean = false>(options?: Options<unknown, ThrowOnError>) => { return (options?.client ?? client).get<ReportGetDailyResourcesUsageResponse, ReportGetDailyResourcesUsageError, ThrowOnError>({
    ...options,
    url: '/reports/quota/daily-consumed'
}); };

/**
 * Get Monthly Resource Usage
 * Get monthly consumed report, method will return you consumption report for last 12 months.
 */
export const reportGetMonthlyResourcesUsage = <ThrowOnError extends boolean = false>(options?: Options<unknown, ThrowOnError>) => { return (options?.client ?? client).get<ReportGetMonthlyResourcesUsageResponse, ReportGetMonthlyResourcesUsageError, ThrowOnError>({
    ...options,
    url: '/reports/quota/monthly-consumed'
}); };

/**
 * Get Panel Summary
 * Get panel summary, method will return you panel summary.
 */
export const reportGetPanelStats = <ThrowOnError extends boolean = false>(options?: Options<unknown, ThrowOnError>) => { return (options?.client ?? client).get<ReportGetPanelStatsResponse, ReportGetPanelStatsError, ThrowOnError>({
    ...options,
    url: '/reports/panel-summary'
}); };

/**
 * Disk Usage Users List
 * Get disk usage users list, method will return you list of users consuming disk space.
 */
export const reportDiskUsageUsersList = <ThrowOnError extends boolean = false>(options?: Options<ReportDiskUsageUsersListData, ThrowOnError>) => { return (options?.client ?? client).get<ReportDiskUsageUsersListResponse, ReportDiskUsageUsersListError, ThrowOnError>({
    ...options,
    url: '/reports/disk-usage-report'
}); };

/**
 * Get Monthly Disk Usage
 * Get monthly disk usage report, method will return you monthly disk usage report.
 */
export const reportDiskUsageReportMonthly = <ThrowOnError extends boolean = false>(options?: Options<ReportDiskUsageReportMonthlyData, ThrowOnError>) => { return (options?.client ?? client).get<ReportDiskUsageReportMonthlyResponse, ReportDiskUsageReportMonthlyError, ThrowOnError>({
    ...options,
    url: '/reports/disk-usage-report/monthly'
}); };

/**
 * Get Total Disk Usage
 * Get overall disk usage report, method will return you overall disk usage report.
 */
export const reportDiskUsageReportTotal = <ThrowOnError extends boolean = false>(options?: Options<ReportDiskUsageReportTotalData, ThrowOnError>) => { return (options?.client ?? client).get<ReportDiskUsageReportTotalResponse, ReportDiskUsageReportTotalError, ThrowOnError>({
    ...options,
    url: '/reports/disk-usage-report/total'
}); };

/**
 * Get Monthly Bandwidth Usage
 * Get monthly bandwidth usage report, method will return you monthly bandwidth usage report.
 */
export const reportBandwidthUsageReportMonthly = <ThrowOnError extends boolean = false>(options?: Options<ReportBandwidthUsageReportMonthlyData, ThrowOnError>) => { return (options?.client ?? client).get<ReportBandwidthUsageReportMonthlyResponse, ReportBandwidthUsageReportMonthlyError, ThrowOnError>({
    ...options,
    url: '/reports/bandwidth-usage-report/monthly'
}); };

/**
 * Get Total Bandwidth Usage
 * Get overall bandwidth usage report, method will return you overall bandwidth usage report.
 */
export const reportBandwidthUsageReportTotal = <ThrowOnError extends boolean = false>(options?: Options<ReportBandwidthUsageReportTotalData, ThrowOnError>) => { return (options?.client ?? client).get<ReportBandwidthUsageReportTotalResponse, ReportBandwidthUsageReportTotalError, ThrowOnError>({
    ...options,
    url: '/reports/bandwidth-usage-report/total'
}); };

/**
 * Bandwidth Usage Users List
 * Get bandwidth usage users list, method will return you list of users consuming bandwidth.
 */
export const configurationsBandwidthUsageUsersList = <ThrowOnError extends boolean = false>(options?: Options<ConfigurationsBandwidthUsageUsersListData, ThrowOnError>) => { return (options?.client ?? client).get<ConfigurationsBandwidthUsageUsersListResponse, ConfigurationsBandwidthUsageUsersListError, ThrowOnError>({
    ...options,
    url: '/reports/bandwidth-usage-report'
}); };

/**
 * Get all States
 * Get all states, method will return you all states of a country.
 */
export const settingsGetAllStates = <ThrowOnError extends boolean = false>(options: Options<SettingsGetAllStatesData, ThrowOnError>) => { return (options?.client ?? client).get<SettingsGetAllStatesResponse, SettingsGetAllStatesError, ThrowOnError>({
    ...options,
    url: '/system-entities/states/{countryId}'
}); };

/**
 * Get all Countries
 * Get all countries, method will return you all countries.
 */
export const settingsGetAllCountries = <ThrowOnError extends boolean = false>(options?: Options<SettingsGetAllCountriesData, ThrowOnError>) => { return (options?.client ?? client).get<SettingsGetAllCountriesResponse, SettingsGetAllCountriesError, ThrowOnError>({
    ...options,
    url: '/system-entities/countries'
}); };

/**
 * Get all Languages
 * Get all languages, method will return you all languages.
 */
export const settingsGetAllLanguages = <ThrowOnError extends boolean = false>(options?: Options<unknown, ThrowOnError>) => { return (options?.client ?? client).get<SettingsGetAllLanguagesResponse, SettingsGetAllLanguagesError, ThrowOnError>({
    ...options,
    url: '/system-entities/languages'
}); };

/**
 * Get Language Details
 * Get language details, method will return you language details.
 */
export const settingsGetAllLanguagesByLangName = <ThrowOnError extends boolean = false>(options: Options<SettingsGetAllLanguagesByLangNameData, ThrowOnError>) => { return (options?.client ?? client).get<SettingsGetAllLanguagesByLangNameResponse, SettingsGetAllLanguagesByLangNameError, ThrowOnError>({
    ...options,
    url: '/system-entities/languages/{langName}'
}); };

/**
 * Get Quota Types
 * Get resource quota types, method will return you resource quota types.
 */
export const settingsGetAllResourceQuotaTypes = <ThrowOnError extends boolean = false>(options?: Options<unknown, ThrowOnError>) => { return (options?.client ?? client).get<SettingsGetAllResourceQuotaTypesResponse, SettingsGetAllResourceQuotaTypesError, ThrowOnError>({
    ...options,
    url: '/system-entities/resource-quota-types'
}); };

/**
 * Get Resource Provisioning Types
 * Get resource provisioning types, method will return you resource provisioning types.
 */
export const settingsGetAllResourceProvisioningTypes = <ThrowOnError extends boolean = false>(options?: Options<unknown, ThrowOnError>) => { return (options?.client ?? client).get<SettingsGetAllResourceProvisioningTypesResponse, SettingsGetAllResourceProvisioningTypesError, ThrowOnError>({
    ...options,
    url: '/system-entities/resource-provisioning-types'
}); };

/**
 * Get Virtual Machine Status Types
 * Get virtual machine types, method will return you virtual machine types.
 */
export const settingsGetVmStatusTypes = <ThrowOnError extends boolean = false>(options?: Options<unknown, ThrowOnError>) => { return (options?.client ?? client).get<SettingsGetVmStatusTypesResponse, SettingsGetVmStatusTypesError, ThrowOnError>({
    ...options,
    url: '/system-entities/vm-status-types'
}); };

/**
 * Get Ticket Status
 * Get trouble ticket status types, method will return you list of trouble ticket status types.
 */
export const settingsGetTicketStatus = <ThrowOnError extends boolean = false>(options?: Options<unknown, ThrowOnError>) => { return (options?.client ?? client).get<SettingsGetTicketStatusResponse, SettingsGetTicketStatusError, ThrowOnError>({
    ...options,
    url: '/system-entities/ticket-statuses'
}); };

/**
 * Get Exchange Mailbox Types
 * Get exchange mailbox types, method will return you list of exchange mailbox types.
 */
export const settingsGetExchangeMailboxTypes = <ThrowOnError extends boolean = false>(options?: Options<unknown, ThrowOnError>) => { return (options?.client ?? client).get<SettingsGetExchangeMailboxTypesResponse, SettingsGetExchangeMailboxTypesError, ThrowOnError>({
    ...options,
    url: '/system-entities/exchange/mailbox-types'
}); };

/**
 * Get Resource Mailbox Types
 * Get exchange resource mailbox types, method will return you list of exchange resource mailbox types.
 */
export const settingsGetResourceMailboxTypes = <ThrowOnError extends boolean = false>(options?: Options<unknown, ThrowOnError>) => { return (options?.client ?? client).get<SettingsGetResourceMailboxTypesResponse, SettingsGetResourceMailboxTypesError, ThrowOnError>({
    ...options,
    url: '/system-entities/exchange/resource-mailbox-types'
}); };

/**
 * Get Exchange Mail Domain Types
 * Get exchange mail domain types, method will return you list of exchange mail domain types.
 */
export const settingsGetExchangeMailDomainTypes = <ThrowOnError extends boolean = false>(options?: Options<unknown, ThrowOnError>) => { return (options?.client ?? client).get<SettingsGetExchangeMailDomainTypesResponse, SettingsGetExchangeMailDomainTypesError, ThrowOnError>({
    ...options,
    url: '/system-entities/exchange/mail-domain-types'
}); };

/**
 * Get Exchange Recpients Types
 * Get exchange recipients types, method will return you list of exchange recipients types.
 */
export const settingsGetExchangeRecpientsTypes = <ThrowOnError extends boolean = false>(options?: Options<unknown, ThrowOnError>) => { return (options?.client ?? client).get<SettingsGetExchangeRecpientsTypesResponse, SettingsGetExchangeRecpientsTypesError, ThrowOnError>({
    ...options,
    url: '/system-entities/exchange/recipient-types'
}); };

/**
 * Get Exchange Blocked Domain Rule Recipient Location
 * Get exchange blocked domain rule recipient location, method will return you list of exchange blocked domain rule recipient locations.
 */
export const settingsGetExchangeBlockedDomainRuleRecipientLocation = <ThrowOnError extends boolean = false>(options?: Options<unknown, ThrowOnError>) => { return (options?.client ?? client).get<SettingsGetExchangeBlockedDomainRuleRecipientLocationResponse, SettingsGetExchangeBlockedDomainRuleRecipientLocationError, ThrowOnError>({
    ...options,
    url: '/system-entities/exchange/recipient-locations'
}); };

/**
 * Get Public Folder Types
 * Get public folder types, method will return you list of public folder types.
 */
export const settingsGetPublicFolderTypes = <ThrowOnError extends boolean = false>(options?: Options<unknown, ThrowOnError>) => { return (options?.client ?? client).get<SettingsGetPublicFolderTypesResponse, SettingsGetPublicFolderTypesError, ThrowOnError>({
    ...options,
    url: '/system-entities/exchange/public-folder-types'
}); };

/**
 * Get Telephony Option Types
 * Get telephony options, method will return you list of telephony option types.
 */
export const settingsGetTelephonyOptions = <ThrowOnError extends boolean = false>(options?: Options<unknown, ThrowOnError>) => { return (options?.client ?? client).get<SettingsGetTelephonyOptionsResponse, SettingsGetTelephonyOptionsError, ThrowOnError>({
    ...options,
    url: '/system-entities/skype/telephony-options'
}); };

/**
 * Get Routing Method Types
 * Get routing methods, method will return you list of routing method types.
 */
export const settingsGetRoutingMethods = <ThrowOnError extends boolean = false>(options?: Options<unknown, ThrowOnError>) => { return (options?.client ?? client).get<SettingsGetRoutingMethodsResponse, SettingsGetRoutingMethodsError, ThrowOnError>({
    ...options,
    url: '/system-entities/skype/routing-methods'
}); };

/**
 * Get Participation Policy Types
 * Get participation policy, method will return you list of participation policy types.
 */
export const settingsGetParticipationPolicy = <ThrowOnError extends boolean = false>(options?: Options<unknown, ThrowOnError>) => { return (options?.client ?? client).get<SettingsGetParticipationPolicyResponse, SettingsGetParticipationPolicyError, ThrowOnError>({
    ...options,
    url: '/system-entities/skype/participation-policy-types'
}); };

/**
 * Get Response Group Call Actions
 * Get response group call actions, method will return you list of response group call actions.
 */
export const settingsGetResponseGroupCallActions = <ThrowOnError extends boolean = false>(options?: Options<unknown, ThrowOnError>) => { return (options?.client ?? client).get<SettingsGetResponseGroupCallActionsResponse, SettingsGetResponseGroupCallActionsError, ThrowOnError>({
    ...options,
    url: '/system-entities/skype/response-group-call-actions'
}); };

/**
 * Get Workflow Call Action Types
 * Get workflow call actions, method will return you list of workflow call action types.
 */
export const settingsGetWorkflowCallActions = <ThrowOnError extends boolean = false>(options?: Options<unknown, ThrowOnError>) => { return (options?.client ?? client).get<SettingsGetWorkflowCallActionsResponse, SettingsGetWorkflowCallActionsError, ThrowOnError>({
    ...options,
    url: '/system-entities/skype/workflow-call-actions'
}); };

/**
 * Get Workflow Languages
 * Get workflow languages, method will return you list of workflow languages.
 */
export const settingsGetWorkflowLanguages = <ThrowOnError extends boolean = false>(options?: Options<unknown, ThrowOnError>) => { return (options?.client ?? client).get<SettingsGetWorkflowLanguagesResponse, SettingsGetWorkflowLanguagesError, ThrowOnError>({
    ...options,
    url: '/system-entities/skype/workflow-languages'
}); };

/**
 * Create a new Message
 * Add new message, method will return you recently added message details.
 */
export const messageCenterAddNewMessage = <ThrowOnError extends boolean = false>(options: Options<MessageCenterAddNewMessageData, ThrowOnError>) => { return (options?.client ?? client).post<MessageCenterAddNewMessageResponse, MessageCenterAddNewMessageError, ThrowOnError>({
    ...options,
    url: '/message-center'
}); };

/**
 * Get Message Details
 * Get message details, method will return you complete message details.
 */
export const messageCenterGetMessageDetails = <ThrowOnError extends boolean = false>(options: Options<MessageCenterGetMessageDetailsData, ThrowOnError>) => { return (options?.client ?? client).get<MessageCenterGetMessageDetailsResponse, MessageCenterGetMessageDetailsError, ThrowOnError>({
    ...options,
    url: '/message-center/{messageId}'
}); };

/**
 * Update Message Status
 * Update message status, method will return you updated message details.
 */
export const messageCenterUpdateMessageStatus = <ThrowOnError extends boolean = false>(options: Options<MessageCenterUpdateMessageStatusData, ThrowOnError>) => { return (options?.client ?? client).put<MessageCenterUpdateMessageStatusResponse, MessageCenterUpdateMessageStatusError, ThrowOnError>({
    ...options,
    url: '/message-center/{messageId}'
}); };

/**
 * Delete Message
 * Delete message, method will return you operation status.
 */
export const messageCenterDeleteMessage = <ThrowOnError extends boolean = false>(options: Options<MessageCenterDeleteMessageData, ThrowOnError>) => { return (options?.client ?? client).delete<MessageCenterDeleteMessageResponse, MessageCenterDeleteMessageError, ThrowOnError>({
    ...options,
    url: '/message-center/{messageId}'
}); };

/**
 * Get Sent Messages
 * Get sent message, method will return you list of sent messages.
 */
export const messageCenterGetSentMessages = <ThrowOnError extends boolean = false>(options?: Options<unknown, ThrowOnError>) => { return (options?.client ?? client).get<MessageCenterGetSentMessagesResponse, MessageCenterGetSentMessagesError, ThrowOnError>({
    ...options,
    url: '/message-center/sent-messages'
}); };

/**
 * Get Received Messages
 * Get received message, method will return you list of received messages.
 */
export const messageCenterGetReceivedMessages = <ThrowOnError extends boolean = false>(options?: Options<unknown, ThrowOnError>) => { return (options?.client ?? client).get<MessageCenterGetReceivedMessagesResponse, MessageCenterGetReceivedMessagesError, ThrowOnError>({
    ...options,
    url: '/message-center/received-messages'
}); };

/**
 * Get Message Replies
 * Get message replies, method will return you list of message replies.
 */
export const messageCenterMessageReplies = <ThrowOnError extends boolean = false>(options: Options<MessageCenterMessageRepliesData, ThrowOnError>) => { return (options?.client ?? client).get<MessageCenterMessageRepliesResponse, MessageCenterMessageRepliesError, ThrowOnError>({
    ...options,
    url: '/message-center/{messageId}/message-replies'
}); };

/**
 * Add Message Reply
 * Add message reply, method will return you complete messages details with replies.
 */
export const messageCenterAddMessageReply = <ThrowOnError extends boolean = false>(options: Options<MessageCenterAddMessageReplyData, ThrowOnError>) => { return (options?.client ?? client).post<MessageCenterAddMessageReplyResponse, MessageCenterAddMessageReplyError, ThrowOnError>({
    ...options,
    url: '/message-center/{messageId}/message-replies'
}); };

/**
 * Get Tickets Summary
 * Get all summary, method will return you complete ticket summary.
 */
export const ticketsGetAllStats = <ThrowOnError extends boolean = false>(options?: Options<unknown, ThrowOnError>) => { return (options?.client ?? client).get<TicketsGetAllStatsResponse, TicketsGetAllStatsError, ThrowOnError>({
    ...options,
    url: '/tickets/summary'
}); };

/**
 * Get all Tickets
 * Get all tickets, method will return you list of tickets.
 */
export const ticketsGetAllTickets = <ThrowOnError extends boolean = false>(options?: Options<TicketsGetAllTicketsData, ThrowOnError>) => { return (options?.client ?? client).get<TicketsGetAllTicketsResponse, TicketsGetAllTicketsError, ThrowOnError>({
    ...options,
    url: '/tickets'
}); };

/**
 * Create a new Ticket
 * Add new ticket, method will return you complete details of newly added ticket.
 */
export const ticketsAddTicket = <ThrowOnError extends boolean = false>(options: Options<TicketsAddTicketData, ThrowOnError>) => { return (options?.client ?? client).post<TicketsAddTicketResponse, TicketsAddTicketError, ThrowOnError>({
    ...options,
    url: '/tickets'
}); };

/**
 * Get Ticket Details
 * Get ticket details, method will return you ticket details.
 */
export const ticketsGetTicketDetail = <ThrowOnError extends boolean = false>(options: Options<TicketsGetTicketDetailData, ThrowOnError>) => { return (options?.client ?? client).get<TicketsGetTicketDetailResponse, TicketsGetTicketDetailError, ThrowOnError>({
    ...options,
    url: '/tickets/{ticketId}'
}); };

/**
 * Update Ticket Details
 * Update ticket details, method will return you updated ticket details.
 */
export const ticketsUpdateTicket = <ThrowOnError extends boolean = false>(options: Options<TicketsUpdateTicketData, ThrowOnError>) => { return (options?.client ?? client).put<TicketsUpdateTicketResponse, TicketsUpdateTicketError, ThrowOnError>({
    ...options,
    url: '/tickets/{ticketId}'
}); };

/**
 * Delete Ticket
 * Delete ticket, method will return you operation status.
 */
export const ticketsDeleteTicket = <ThrowOnError extends boolean = false>(options: Options<TicketsDeleteTicketData, ThrowOnError>) => { return (options?.client ?? client).delete<TicketsDeleteTicketResponse, TicketsDeleteTicketError, ThrowOnError>({
    ...options,
    url: '/tickets/{ticketId}'
}); };

/**
 * Get Ticket Replies
 * Get ticket replies, method will return you list of ticket replies.
 */
export const ticketsGetTicketReply = <ThrowOnError extends boolean = false>(options: Options<TicketsGetTicketReplyData, ThrowOnError>) => { return (options?.client ?? client).get<TicketsGetTicketReplyResponse, TicketsGetTicketReplyError, ThrowOnError>({
    ...options,
    url: '/tickets/{ticketId}/replies'
}); };

/**
 * Add Ticket Reply
 * Reply ticket, method will return you complete details of a ticket with all its replies.
 */
export const ticketsReplyTicket = <ThrowOnError extends boolean = false>(options: Options<TicketsReplyTicketData, ThrowOnError>) => { return (options?.client ?? client).post<TicketsReplyTicketResponse, TicketsReplyTicketError, ThrowOnError>({
    ...options,
    url: '/tickets/{ticketId}/replies'
}); };

/**
 * Add Ticket Attachment
 * Add ticket attachment, method will return complete list of attachments.
 */
export const ticketsAddTicketAttachment = <ThrowOnError extends boolean = false>(options: Options<TicketsAddTicketAttachmentData, ThrowOnError>) => { return (options?.client ?? client).post<TicketsAddTicketAttachmentResponse, TicketsAddTicketAttachmentError, ThrowOnError>({
    ...options,
    url: '/tickets/{TicketId}/attachments'
}); };

/**
 * Get all Attachments
 * Get all ticket attachments, method will return complete list of attachment files.
 */
export const ticketsGetAllAttachments = <ThrowOnError extends boolean = false>(options: Options<TicketsGetAllAttachmentsData, ThrowOnError>) => { return (options?.client ?? client).get<TicketsGetAllAttachmentsResponse, TicketsGetAllAttachmentsError, ThrowOnError>({
    ...options,
    url: '/tickets/{ticketId}/attachments'
}); };

/**
 * Get Attachment Details
 * Get ticket attachment details, method will return complete attachment file details.
 */
export const ticketsGetAttachmentDetail = <ThrowOnError extends boolean = false>(options: Options<TicketsGetAttachmentDetailData, ThrowOnError>) => { return (options?.client ?? client).get<TicketsGetAttachmentDetailResponse, TicketsGetAttachmentDetailError, ThrowOnError>({
    ...options,
    url: '/tickets/{ticketId}/attachments/{attachmentId}'
}); };

/**
 * Get all Add-ons
 * Get all addons, method will return you list of addons.
 */
export const addOnsGetAllResources = <ThrowOnError extends boolean = false>(options?: Options<AddOnsGetAllResourcesData, ThrowOnError>) => { return (options?.client ?? client).get<AddOnsGetAllResourcesResponse, AddOnsGetAllResourcesError, ThrowOnError>({
    ...options,
    url: '/addons'
}); };

/**
 * Add a new Add-on
 * Add addons, method will return you complete detials of recently added addon.
 */
export const addOnsAddResource = <ThrowOnError extends boolean = false>(options: Options<AddOnsAddResourceData, ThrowOnError>) => { return (options?.client ?? client).post<AddOnsAddResourceResponse, AddOnsAddResourceError, ThrowOnError>({
    ...options,
    url: '/addons'
}); };

/**
 * Get Add-on Details
 * Get addon details, method will return you complete details of addon.
 */
export const addOnsGetResourceDetails = <ThrowOnError extends boolean = false>(options: Options<AddOnsGetResourceDetailsData, ThrowOnError>) => { return (options?.client ?? client).get<AddOnsGetResourceDetailsResponse, AddOnsGetResourceDetailsError, ThrowOnError>({
    ...options,
    url: '/addons/{addonId}'
}); };

/**
 * Update Add-on Details
 * Update addon, method will return you operation status.
 */
export const addOnsUpdateResource = <ThrowOnError extends boolean = false>(options: Options<AddOnsUpdateResourceData, ThrowOnError>) => { return (options?.client ?? client).put<AddOnsUpdateResourceResponse, AddOnsUpdateResourceError, ThrowOnError>({
    ...options,
    url: '/addons/{addonId}'
}); };

/**
 * Delete Add-on
 * Delete addon, method will return you operation status.
 */
export const addOnsDeleteResource = <ThrowOnError extends boolean = false>(options: Options<AddOnsDeleteResourceData, ThrowOnError>) => { return (options?.client ?? client).delete<AddOnsDeleteResourceResponse, AddOnsDeleteResourceError, ThrowOnError>({
    ...options,
    url: '/addons/{addonId}'
}); };

/**
 * Get Base OS Types
 * Get base operating system types, method will return you list of base operating system types.
 */
export const addOnsGetBaseOsTypes = <ThrowOnError extends boolean = false>(options: Options<AddOnsGetBaseOsTypesData, ThrowOnError>) => { return (options?.client ?? client).get<AddOnsGetBaseOsTypesResponse, AddOnsGetBaseOsTypesError, ThrowOnError>({
    ...options,
    url: '/addons/components/{componentName}/properties'
}); };

/**
 * Get all Sold Add-ons
 * Get all sold addons, method will return you list of sold addons.
 */
export const soldAddOnsGetAllSoldAddOns = <ThrowOnError extends boolean = false>(options?: Options<SoldAddOnsGetAllSoldAddOnsData, ThrowOnError>) => { return (options?.client ?? client).get<SoldAddOnsGetAllSoldAddOnsResponse, SoldAddOnsGetAllSoldAddOnsError, ThrowOnError>({
    ...options,
    url: '/sold-addons'
}); };

/**
 * Sell Add-on
 * Sell addon, method will return you operation status with recently sold addon details.
 */
export const soldAddOnsSellAddOn = <ThrowOnError extends boolean = false>(options: Options<SoldAddOnsSellAddOnData, ThrowOnError>) => { return (options?.client ?? client).post<SoldAddOnsSellAddOnResponse, SoldAddOnsSellAddOnError, ThrowOnError>({
    ...options,
    url: '/sold-addons'
}); };

/**
 * Get Sold Add-on Details
 * Get sold addon details, method will return you sold addon details.
 */
export const soldAddOnsGetSoldAddonDetails = <ThrowOnError extends boolean = false>(options: Options<SoldAddOnsGetSoldAddonDetailsData, ThrowOnError>) => { return (options?.client ?? client).get<SoldAddOnsGetSoldAddonDetailsResponse, SoldAddOnsGetSoldAddonDetailsError, ThrowOnError>({
    ...options,
    url: '/sold-addons/{soldAddOnId}'
}); };

/**
 * Delete Sold Add-on
 * Delete sold addon, method will return you operation status.
 */
export const soldAddOnsDeleteSoldAddon = <ThrowOnError extends boolean = false>(options: Options<SoldAddOnsDeleteSoldAddonData, ThrowOnError>) => { return (options?.client ?? client).delete<SoldAddOnsDeleteSoldAddonResponse, SoldAddOnsDeleteSoldAddonError, ThrowOnError>({
    ...options,
    url: '/sold-addons/{soldAddOnId}'
}); };

/**
 * Get all Composite Resources
 * Get all composite resources, method will return you list of all composite resources.
 */
export const compositeResourceGetAllCresources = <ThrowOnError extends boolean = false>(options?: Options<CompositeResourceGetAllCresourcesData, ThrowOnError>) => { return (options?.client ?? client).get<CompositeResourceGetAllCresourcesResponse, CompositeResourceGetAllCresourcesError, ThrowOnError>({
    ...options,
    url: '/composite-resources'
}); };

/**
 * Add a new Composite Resource
 * Add composite resource, method will return you complete details of recently added composite resource.
 */
export const compositeResourceAddCresource = <ThrowOnError extends boolean = false>(options: Options<CompositeResourceAddCresourceData, ThrowOnError>) => { return (options?.client ?? client).post<CompositeResourceAddCresourceResponse, CompositeResourceAddCresourceError, ThrowOnError>({
    ...options,
    url: '/composite-resources'
}); };

/**
 * Get Composite Resource Details
 * Get composite resource details, method will return you complete details of composite resource.
 */
export const compositeResourceGetCresourceDetails = <ThrowOnError extends boolean = false>(options: Options<CompositeResourceGetCresourceDetailsData, ThrowOnError>) => { return (options?.client ?? client).get<CompositeResourceGetCresourceDetailsResponse, CompositeResourceGetCresourceDetailsError, ThrowOnError>({
    ...options,
    url: '/composite-resources/{cResourceId}'
}); };

/**
 * Update Composite Resource Details
 * Update composite resource, method will return you updated details of composite resource.
 */
export const compositeResourceUpdateCresource = <ThrowOnError extends boolean = false>(options: Options<CompositeResourceUpdateCresourceData, ThrowOnError>) => { return (options?.client ?? client).put<CompositeResourceUpdateCresourceResponse, CompositeResourceUpdateCresourceError, ThrowOnError>({
    ...options,
    url: '/composite-resources/{cResourceId}'
}); };

/**
 * Delete Composite Resource
 * Delete composite resource, method will return you operation status.
 */
export const compositeResourceDeleteCresource = <ThrowOnError extends boolean = false>(options: Options<CompositeResourceDeleteCresourceData, ThrowOnError>) => { return (options?.client ?? client).delete<CompositeResourceDeleteCresourceResponse, CompositeResourceDeleteCresourceError, ThrowOnError>({
    ...options,
    url: '/composite-resources/{cResourceId}'
}); };

/**
 * Get all Hosting Services
 * Get all hosting services, method will return you list of hosting services.
 */
export const hostingServicesGetAllHostingServices = <ThrowOnError extends boolean = false>(options?: Options<unknown, ThrowOnError>) => { return (options?.client ?? client).get<HostingServicesGetAllHostingServicesResponse, HostingServicesGetAllHostingServicesError, ThrowOnError>({
    ...options,
    url: '/composite-resources/categories'
}); };

/**
 * Get Provider Types
 * Get provider types, method will return you list of provider types.
 */
export const providersGetProviderTypes = <ThrowOnError extends boolean = false>(options?: Options<ProvidersGetProviderTypesData, ThrowOnError>) => { return (options?.client ?? client).get<ProvidersGetProviderTypesResponse, ProvidersGetProviderTypesError, ThrowOnError>({
    ...options,
    url: '/providers'
}); };

/**
 * Get all Sold Plans
 * Get all sold plans, method will return you list of sold plans.
 */
export const soldPlanGetAllSoldPlans = <ThrowOnError extends boolean = false>(options?: Options<SoldPlanGetAllSoldPlansData, ThrowOnError>) => { return (options?.client ?? client).get<SoldPlanGetAllSoldPlansResponse, SoldPlanGetAllSoldPlansError, ThrowOnError>({
    ...options,
    url: '/sold-plans'
}); };

/**
 * Sell Plan
 * Add sold plan, method will return you complete details of recently sold plan.
 */
export const soldPlanAddSoldPlan = <ThrowOnError extends boolean = false>(options: Options<SoldPlanAddSoldPlanData, ThrowOnError>) => { return (options?.client ?? client).post<SoldPlanAddSoldPlanResponse, SoldPlanAddSoldPlanError, ThrowOnError>({
    ...options,
    url: '/sold-plans'
}); };

/**
 * Get Sold Plan Details
 * Get sold plan details, method will return you complete details of a sold plan.
 */
export const soldPlanGetSoldPlanDetails = <ThrowOnError extends boolean = false>(options: Options<SoldPlanGetSoldPlanDetailsData, ThrowOnError>) => { return (options?.client ?? client).get<SoldPlanGetSoldPlanDetailsResponse, SoldPlanGetSoldPlanDetailsError, ThrowOnError>({
    ...options,
    url: '/sold-plans/{soldPlanId}'
}); };

/**
 * Update Sold Plan Details
 * Update sold plan, method will return you operation status.
 */
export const soldPlanUpDateSoldPlans = <ThrowOnError extends boolean = false>(options: Options<SoldPlanUpDateSoldPlansData, ThrowOnError>) => { return (options?.client ?? client).put<SoldPlanUpDateSoldPlansResponse, SoldPlanUpDateSoldPlansError, ThrowOnError>({
    ...options,
    url: '/sold-plans/{soldPlanId}'
}); };

/**
 * Delete Sold Plan
 * Delete sold plan, method will return you operation status.
 */
export const soldPlanDeleteSoldPlan = <ThrowOnError extends boolean = false>(options: Options<SoldPlanDeleteSoldPlanData, ThrowOnError>) => { return (options?.client ?? client).delete<SoldPlanDeleteSoldPlanResponse, SoldPlanDeleteSoldPlanError, ThrowOnError>({
    ...options,
    url: '/sold-plans/{soldPlanId}'
}); };

/**
 * Get Subscription Details
 * Get subscription details, method will return you subscription details.
 */
export const subscriptionsGetPurchasedPlanDetails = <ThrowOnError extends boolean = false>(options: Options<SubscriptionsGetPurchasedPlanDetailsData, ThrowOnError>) => { return (options?.client ?? client).get<SubscriptionsGetPurchasedPlanDetailsResponse, SubscriptionsGetPurchasedPlanDetailsError, ThrowOnError>({
    ...options,
    url: '/purchased-plans/{soldPlanId}'
}); };

/**
 * Get all Subscriptions
 * Get all subscriptions, method will return you list of subscription.
 */
export const subscriptionsGetAllPurchasedPlans = <ThrowOnError extends boolean = false>(options?: Options<SubscriptionsGetAllPurchasedPlansData, ThrowOnError>) => { return (options?.client ?? client).get<SubscriptionsGetAllPurchasedPlansResponse, SubscriptionsGetAllPurchasedPlansError, ThrowOnError>({
    ...options,
    url: '/purchased-plans'
}); };

/**
 * Get all Custom Fields
 * List all custom fields, method will return you list of custom fields.
 */
export const customFieldsListAllCustomFields = <ThrowOnError extends boolean = false>(options?: Options<CustomFieldsListAllCustomFieldsData, ThrowOnError>) => { return (options?.client ?? client).get<CustomFieldsListAllCustomFieldsResponse, CustomFieldsListAllCustomFieldsError, ThrowOnError>({
    ...options,
    url: '/panel-conf/custom-fields'
}); };

/**
 * Get all Ticket Categories
 * Get all categories, method will return you list of ticket categories.
 */
export const ticketsGetAllCategory = <ThrowOnError extends boolean = false>(options?: Options<unknown, ThrowOnError>) => { return (options?.client ?? client).get<TicketsGetAllCategoryResponse, TicketsGetAllCategoryError, ThrowOnError>({
    ...options,
    url: '/panel-conf/tickets/categories'
}); };

/**
 * Get all DNS Zones
 * List all dns zones, method will return you list of dns zones.
 */
export const dnsListAllDnsZones = <ThrowOnError extends boolean = false>(options?: Options<DnsListAllDnsZonesData, ThrowOnError>) => { return (options?.client ?? client).get<DnsListAllDnsZonesResponse, DnsListAllDnsZonesError, ThrowOnError>({
    ...options,
    url: '/dns-zones'
}); };

/**
 * Add a new DNS Zone
 * Add dns zone, method will return you complete details of recently added dns zone.
 */
export const dnsAddDnsZone = <ThrowOnError extends boolean = false>(options: Options<DnsAddDnsZoneData, ThrowOnError>) => { return (options?.client ?? client).post<DnsAddDnsZoneResponse, DnsAddDnsZoneError, ThrowOnError>({
    ...options,
    url: '/dns-zones'
}); };

/**
 * Get DNS Zone Details
 * Get dns zone details, method will return you complete details of dns zone.
 */
export const dnsGetDnsZoneDetail = <ThrowOnError extends boolean = false>(options: Options<DnsGetDnsZoneDetailData, ThrowOnError>) => { return (options?.client ?? client).get<DnsGetDnsZoneDetailResponse, DnsGetDnsZoneDetailError, ThrowOnError>({
    ...options,
    url: '/dns-zones/{dnsZoneId}'
}); };

/**
 * Update DNS Zone Details
 * Update dns zone, method will return you updated details of dns zone.
 */
export const dnsUpdateDnsZone = <ThrowOnError extends boolean = false>(options: Options<DnsUpdateDnsZoneData, ThrowOnError>) => { return (options?.client ?? client).put<DnsUpdateDnsZoneResponse, DnsUpdateDnsZoneError, ThrowOnError>({
    ...options,
    url: '/dns-zones/{dnsZoneId}'
}); };

/**
 * Delete DNS Zone
 * Delete dns zone, method will return you operation status.
 */
export const dnsDeleteDnsZone = <ThrowOnError extends boolean = false>(options: Options<DnsDeleteDnsZoneData, ThrowOnError>) => { return (options?.client ?? client).delete<DnsDeleteDnsZoneResponse, DnsDeleteDnsZoneError, ThrowOnError>({
    ...options,
    url: '/dns-zones/{dnsZoneId}'
}); };

/**
 * Get all Databases
 * List all databases, method will return you list of databases.
 */
export const databasesListAllDatabases = <ThrowOnError extends boolean = false>(options?: Options<DatabasesListAllDatabasesData, ThrowOnError>) => { return (options?.client ?? client).get<DatabasesListAllDatabasesResponse, DatabasesListAllDatabasesError, ThrowOnError>({
    ...options,
    url: '/databases'
}); };

/**
 * Add a new Database
 * Add database, method will return you recently added database.
 */
export const databasesAddDatabase = <ThrowOnError extends boolean = false>(options: Options<DatabasesAddDatabaseData, ThrowOnError>) => { return (options?.client ?? client).post<DatabasesAddDatabaseResponse, DatabasesAddDatabaseError, ThrowOnError>({
    ...options,
    url: '/databases'
}); };

/**
 * Get all Database Actions History
 * List all database action history, method will return you list of database action history.
 */
export const databasesListAllDatabaseTasks = <ThrowOnError extends boolean = false>(options: Options<DatabasesListAllDatabaseTasksData, ThrowOnError>) => { return (options?.client ?? client).get<DatabasesListAllDatabaseTasksResponse, DatabasesListAllDatabaseTasksError, ThrowOnError>({
    ...options,
    url: '/databases/{databaseId}/action-history'
}); };

/**
 * Backup Database
 * Backup database, method will return you operation entry in queued operations.
 */
export const databasesBackupDatabase = <ThrowOnError extends boolean = false>(options: Options<DatabasesBackupDatabaseData, ThrowOnError>) => { return (options?.client ?? client).post<DatabasesBackupDatabaseResponse, DatabasesBackupDatabaseError, ThrowOnError>({
    ...options,
    url: '/databases/{databaseId}/backup'
}); };

/**
 * Shrink Database
 * Shrink database, method will return you operation status.
 */
export const databasesShrinkDatabase = <ThrowOnError extends boolean = false>(options: Options<DatabasesShrinkDatabaseData, ThrowOnError>) => { return (options?.client ?? client).post<DatabasesShrinkDatabaseResponse, DatabasesShrinkDatabaseError, ThrowOnError>({
    ...options,
    url: '/databases/{databaseId}/shrink'
}); };

/**
 * Restore Database
 * Restore database, method will return you operation entry in queued operations.
 */
export const databasesRestoreDatabase = <ThrowOnError extends boolean = false>(options: Options<DatabasesRestoreDatabaseData, ThrowOnError>) => { return (options?.client ?? client).post<DatabasesRestoreDatabaseResponse, DatabasesRestoreDatabaseError, ThrowOnError>({
    ...options,
    url: '/databases/{databaseId}/restore'
}); };

/**
 * Get Database Details
 * Get database details, method will return you complete details of a database.
 */
export const databasesGetDatabaseDetail = <ThrowOnError extends boolean = false>(options: Options<DatabasesGetDatabaseDetailData, ThrowOnError>) => { return (options?.client ?? client).get<DatabasesGetDatabaseDetailResponse, DatabasesGetDatabaseDetailError, ThrowOnError>({
    ...options,
    url: '/databases/{databaseId}'
}); };

/**
 * Update Database Details
 * Update database details, method will return you updated details of a database.
 */
export const databasesUpdateDatabase = <ThrowOnError extends boolean = false>(options: Options<DatabasesUpdateDatabaseData, ThrowOnError>) => { return (options?.client ?? client).put<DatabasesUpdateDatabaseResponse, DatabasesUpdateDatabaseError, ThrowOnError>({
    ...options,
    url: '/databases/{databaseId}'
}); };

/**
 * Delete Database
 * Delete database, method will return you operation status.
 */
export const databasesDeleteDatabase = <ThrowOnError extends boolean = false>(options: Options<DatabasesDeleteDatabaseData, ThrowOnError>) => { return (options?.client ?? client).delete<DatabasesDeleteDatabaseResponse, DatabasesDeleteDatabaseError, ThrowOnError>({
    ...options,
    url: '/databases/{databaseId}'
}); };

/**
 * Assign Users to Database
 * Assign users to database, method will return you recently assigned users to a database.
 */
export const databasesAssignUserstoDatabase = <ThrowOnError extends boolean = false>(options: Options<DatabasesAssignUserstoDatabaseData, ThrowOnError>) => { return (options?.client ?? client).put<DatabasesAssignUserstoDatabaseResponse, DatabasesAssignUserstoDatabaseError, ThrowOnError>({
    ...options,
    url: '/databases/{databaseId}/assign'
}); };

/**
 * Test Database Connectivity
 * Test database connectivity, method will return you operation status.
 */
export const databasesTestDatabaseConnectivity = <ThrowOnError extends boolean = false>(options: Options<DatabasesTestDatabaseConnectivityData, ThrowOnError>) => { return (options?.client ?? client).post<DatabasesTestDatabaseConnectivityResponse, DatabasesTestDatabaseConnectivityError, ThrowOnError>({
    ...options,
    url: '/databases/{databaseId}/connectivity'
}); };

/**
 * Get all Database Users
 * List all database users, method will return you list of database users.
 */
export const databasesListAllDatabaseUsers = <ThrowOnError extends boolean = false>(options?: Options<DatabasesListAllDatabaseUsersData, ThrowOnError>) => { return (options?.client ?? client).get<DatabasesListAllDatabaseUsersResponse, DatabasesListAllDatabaseUsersError, ThrowOnError>({
    ...options,
    url: '/databases/users'
}); };

/**
 * Add a new Database User
 * Add database users, method will return you operation status.
 */
export const databasesAddDatabaseUser = <ThrowOnError extends boolean = false>(options: Options<DatabasesAddDatabaseUserData, ThrowOnError>) => { return (options?.client ?? client).post<DatabasesAddDatabaseUserResponse, DatabasesAddDatabaseUserError, ThrowOnError>({
    ...options,
    url: '/databases/users'
}); };

/**
 * Get Database Assigned Users
 * Get database assigned users, method will return you list of assigned database users.
 */
export const databasesGetDatabasesAssignedUser = <ThrowOnError extends boolean = false>(options: Options<DatabasesGetDatabasesAssignedUserData, ThrowOnError>) => { return (options?.client ?? client).get<DatabasesGetDatabasesAssignedUserResponse, DatabasesGetDatabasesAssignedUserError, ThrowOnError>({
    ...options,
    url: '/databases/{databaseId}/users/assigned-users'
}); };

/**
 * Get User Assigned Databases
 * Get user assigned databases, method will return you list of databases.
 */
export const databasesGetUsersAssignedDatabase = <ThrowOnError extends boolean = false>(options: Options<DatabasesGetUsersAssignedDatabaseData, ThrowOnError>) => { return (options?.client ?? client).get<DatabasesGetUsersAssignedDatabaseResponse, DatabasesGetUsersAssignedDatabaseError, ThrowOnError>({
    ...options,
    url: '/databases/users/{databaseUserId}/assigned-databases'
}); };

/**
 * Get Database User Details
 * Get database user details, method will return you database user details.
 */
export const databasesGetDatabaseUserDetail = <ThrowOnError extends boolean = false>(options: Options<DatabasesGetDatabaseUserDetailData, ThrowOnError>) => { return (options?.client ?? client).get<DatabasesGetDatabaseUserDetailResponse, DatabasesGetDatabaseUserDetailError, ThrowOnError>({
    ...options,
    url: '/databases/users/{databaseUserId}'
}); };

/**
 * Delete Database User
 * Delete database user, method will return you operation status.
 */
export const databasesDeleteDatabaseUser = <ThrowOnError extends boolean = false>(options: Options<DatabasesDeleteDatabaseUserData, ThrowOnError>) => { return (options?.client ?? client).delete<DatabasesDeleteDatabaseUserResponse, DatabasesDeleteDatabaseUserError, ThrowOnError>({
    ...options,
    url: '/databases/users/{databaseUserId}'
}); };

/**
 * Change Password
 * Change password, method will return you operation status.
 */
export const databasesChangePassword = <ThrowOnError extends boolean = false>(options: Options<DatabasesChangePasswordData, ThrowOnError>) => { return (options?.client ?? client).put<DatabasesChangePasswordResponse, DatabasesChangePasswordError, ThrowOnError>({
    ...options,
    url: '/databases/users/{databaseUserId}/change-password'
}); };

/**
 * Assign Databases to User
 * Assign databases to user, method will return you operation status.
 */
export const databasesAssignDatabasestoUser = <ThrowOnError extends boolean = false>(options: Options<DatabasesAssignDatabasestoUserData, ThrowOnError>) => { return (options?.client ?? client).put<DatabasesAssignDatabasestoUserResponse, DatabasesAssignDatabasestoUserError, ThrowOnError>({
    ...options,
    url: '/databases/users/{databaseUserId}/assign'
}); };

/**
 * Get all Mail Domains
 * List all mail domains, method will return you list of mail domains.
 */
export const mailDomainsListAllMailDomains = <ThrowOnError extends boolean = false>(options?: Options<MailDomainsListAllMailDomainsData, ThrowOnError>) => { return (options?.client ?? client).get<MailDomainsListAllMailDomainsResponse, MailDomainsListAllMailDomainsError, ThrowOnError>({
    ...options,
    url: '/mail-domains'
}); };

/**
 * Add a new Mail Domain
 * Add mail domain, method will return you recently added mail domain.
 */
export const mailDomainsAddMailDomain = <ThrowOnError extends boolean = false>(options: Options<MailDomainsAddMailDomainData, ThrowOnError>) => { return (options?.client ?? client).post<MailDomainsAddMailDomainResponse, MailDomainsAddMailDomainError, ThrowOnError>({
    ...options,
    url: '/mail-domains'
}); };

/**
 * Get Mail Domain Details
 * Get mail domain details, method will return you complete details of a mail domain.
 */
export const mailDomainsGetMailDomainDetail = <ThrowOnError extends boolean = false>(options: Options<MailDomainsGetMailDomainDetailData, ThrowOnError>) => { return (options?.client ?? client).get<MailDomainsGetMailDomainDetailResponse, MailDomainsGetMailDomainDetailError, ThrowOnError>({
    ...options,
    url: '/mail-domains/{mailDomainId}'
}); };

/**
 * Delete Mail Domain
 * Delete mail domain, method will return you operation status.
 */
export const mailDomainsDeleteMailDomain = <ThrowOnError extends boolean = false>(options: Options<MailDomainsDeleteMailDomainData, ThrowOnError>) => { return (options?.client ?? client).delete<MailDomainsDeleteMailDomainResponse, MailDomainsDeleteMailDomainError, ThrowOnError>({
    ...options,
    url: '/mail-domains/{mailDomainId}'
}); };

/**
 * Get all Mailboxes
 * List all mailboxes, method will return you list of mailboxes.
 */
export const mailDomainsListAllMailBoxes = <ThrowOnError extends boolean = false>(options: Options<MailDomainsListAllMailBoxesData, ThrowOnError>) => { return (options?.client ?? client).get<MailDomainsListAllMailBoxesResponse, MailDomainsListAllMailBoxesError, ThrowOnError>({
    ...options,
    url: '/mail-domains/{mailDomainId}/mailboxes'
}); };

/**
 * Add a new Mailbox
 * Add mailboxes, method will return you recently added mailbox.
 */
export const mailDomainsAddMailBox = <ThrowOnError extends boolean = false>(options: Options<MailDomainsAddMailBoxData, ThrowOnError>) => { return (options?.client ?? client).post<MailDomainsAddMailBoxResponse, MailDomainsAddMailBoxError, ThrowOnError>({
    ...options,
    url: '/mail-domains/{mailDomainId}/mailboxes'
}); };

/**
 * Get Mailbox Details
 * Get mailbox details, method will return you complete mailbox details.
 */
export const mailDomainsGetMailBoxDetail = <ThrowOnError extends boolean = false>(options: Options<MailDomainsGetMailBoxDetailData, ThrowOnError>) => { return (options?.client ?? client).get<MailDomainsGetMailBoxDetailResponse, MailDomainsGetMailBoxDetailError, ThrowOnError>({
    ...options,
    url: '/mail-domains/{mailDomainId}/mailboxes/{mailBoxId}'
}); };

/**
 * Update Mailbox Details
 * Update mailbox, method will return you complete updated mailbox details.
 */
export const mailDomainsUpdateMailBox = <ThrowOnError extends boolean = false>(options: Options<MailDomainsUpdateMailBoxData, ThrowOnError>) => { return (options?.client ?? client).put<MailDomainsUpdateMailBoxResponse, MailDomainsUpdateMailBoxError, ThrowOnError>({
    ...options,
    url: '/mail-domains/{mailDomainId}/mailboxes/{mailBoxId}'
}); };

/**
 * Delete Mailbox
 * Delete mailbox, method will return you operation status.
 */
export const mailDomainsDeleteMailBox = <ThrowOnError extends boolean = false>(options: Options<MailDomainsDeleteMailBoxData, ThrowOnError>) => { return (options?.client ?? client).delete<MailDomainsDeleteMailBoxResponse, MailDomainsDeleteMailBoxError, ThrowOnError>({
    ...options,
    url: '/mail-domains/{mailDomainId}/mailboxes/{mailBoxId}'
}); };

/**
 * Get all Email Aliases
 * List all email aliases, method will return you list of email aliases.
 */
export const mailDomainsListAllEmailAddresses = <ThrowOnError extends boolean = false>(options: Options<MailDomainsListAllEmailAddressesData, ThrowOnError>) => { return (options?.client ?? client).get<MailDomainsListAllEmailAddressesResponse, MailDomainsListAllEmailAddressesError, ThrowOnError>({
    ...options,
    url: '/mail-domains/{mailDomainId}/mailboxes/{mailBoxId}/email-aliases'
}); };

/**
 * Add a new Email Alias
 * Add email alias, method will return you operation status.
 */
export const mailDomainsAddEmailAddress = <ThrowOnError extends boolean = false>(options: Options<MailDomainsAddEmailAddressData, ThrowOnError>) => { return (options?.client ?? client).post<MailDomainsAddEmailAddressResponse, MailDomainsAddEmailAddressError, ThrowOnError>({
    ...options,
    url: '/mail-domains/{mailDomainId}/mailboxes/{mailBoxId}/email-aliases'
}); };

/**
 * Delete Email Alias
 * Delete email alias, method will return you operation status.
 */
export const mailDomainsDeleteEmailAddress = <ThrowOnError extends boolean = false>(options: Options<MailDomainsDeleteEmailAddressData, ThrowOnError>) => { return (options?.client ?? client).delete<MailDomainsDeleteEmailAddressResponse, MailDomainsDeleteEmailAddressError, ThrowOnError>({
    ...options,
    url: '/mail-domains/{mailDomainId}/mailboxes/{mailBoxId}/email-aliases/{emailAddress}'
}); };

/**
 * Get all Distribution Lists
 * Get all distribution list, method will return you all distribution list.
 */
export const mailDomainsListAllDistributionList = <ThrowOnError extends boolean = false>(options: Options<MailDomainsListAllDistributionListData, ThrowOnError>) => { return (options?.client ?? client).get<MailDomainsListAllDistributionListResponse, MailDomainsListAllDistributionListError, ThrowOnError>({
    ...options,
    url: '/mail-domains/{mailDomainId}/distribution-lists'
}); };

/**
 * Add a new Distribution List
 * Add distribution list, method will return you recently added distribution list.
 */
export const mailDomainsAddDistributionList = <ThrowOnError extends boolean = false>(options: Options<MailDomainsAddDistributionListData, ThrowOnError>) => { return (options?.client ?? client).post<MailDomainsAddDistributionListResponse, MailDomainsAddDistributionListError, ThrowOnError>({
    ...options,
    url: '/mail-domains/{mailDomainId}/distribution-lists'
}); };

/**
 * Get Distribution List Details
 * Get distribution list details, method will return you complete details of a distribution list.
 */
export const mailDomainsGetDistributionListDetail = <ThrowOnError extends boolean = false>(options: Options<MailDomainsGetDistributionListDetailData, ThrowOnError>) => { return (options?.client ?? client).get<MailDomainsGetDistributionListDetailResponse, MailDomainsGetDistributionListDetailError, ThrowOnError>({
    ...options,
    url: '/mail-domains/{mailDomainId}/distribution-lists/{listName}'
}); };

/**
 * Update Distribution List Details
 * Update distribution list, method will return you operation status.
 */
export const mailDomainsUpdateDistributionList = <ThrowOnError extends boolean = false>(options: Options<MailDomainsUpdateDistributionListData, ThrowOnError>) => { return (options?.client ?? client).put<MailDomainsUpdateDistributionListResponse, MailDomainsUpdateDistributionListError, ThrowOnError>({
    ...options,
    url: '/mail-domains/{mailDomainId}/distribution-lists/{listName}'
}); };

/**
 * Delete Distribution List
 * Delete distribution list, method will return you operation status.
 */
export const mailDomainsDeleteDistributionList = <ThrowOnError extends boolean = false>(options: Options<MailDomainsDeleteDistributionListData, ThrowOnError>) => { return (options?.client ?? client).delete<MailDomainsDeleteDistributionListResponse, MailDomainsDeleteDistributionListError, ThrowOnError>({
    ...options,
    url: '/mail-domains/{mailDomainId}/distribution-lists/{listName}'
}); };

/**
 * Get all Files and Folders
 * Get all files and folders, method will return you list of files and folders.
 */
export const websiteIoGetAllFilesAndFolders = <ThrowOnError extends boolean = false>(options: Options<WebsiteIoGetAllFilesAndFoldersData, ThrowOnError>) => { return (options?.client ?? client).get<WebsiteIoGetAllFilesAndFoldersResponse, WebsiteIoGetAllFilesAndFoldersError, ThrowOnError>({
    ...options,
    url: '/websites/{websiteId}/io'
}); };

/**
 * Upload
 * Upload, method will return you operation status.
 */
export const websiteIoUpload = <ThrowOnError extends boolean = false>(options: Options<WebsiteIoUploadData, ThrowOnError>) => { return (options?.client ?? client).post<WebsiteIoUploadResponse, WebsiteIoUploadError, ThrowOnError>({
    ...options,
    url: '/websites/{websiteId}/io'
}); };

/**
 * Delete
 * Delete, method will return you operation status.
 */
export const websiteIoDelete = <ThrowOnError extends boolean = false>(options: Options<WebsiteIoDeleteData, ThrowOnError>) => { return (options?.client ?? client).delete<WebsiteIoDeleteResponse, WebsiteIoDeleteError, ThrowOnError>({
    ...options,
    url: '/websites/{websiteId}/io'
}); };

/**
 * Create
 * Create, method will return you operation status.
 */
export const websiteIoCreate = <ThrowOnError extends boolean = false>(options: Options<WebsiteIoCreateData, ThrowOnError>) => { return (options?.client ?? client).post<WebsiteIoCreateResponse, WebsiteIoCreateError, ThrowOnError>({
    ...options,
    url: '/websites/{websiteId}/io/new'
}); };

/**
 * Download
 * Download, method will return you file content.
 */
export const websiteIoDownload = <ThrowOnError extends boolean = false>(options: Options<WebsiteIoDownloadData, ThrowOnError>) => { return (options?.client ?? client).get<WebsiteIoDownloadResponse, WebsiteIoDownloadError, ThrowOnError>({
    ...options,
    url: '/websites/{websiteId}/io/content'
}); };

/**
 * Update
 * Update, method will return you operation status.
 */
export const websiteIoUpdate = <ThrowOnError extends boolean = false>(options: Options<WebsiteIoUpdateData, ThrowOnError>) => { return (options?.client ?? client).put<WebsiteIoUpdateResponse, WebsiteIoUpdateError, ThrowOnError>({
    ...options,
    url: '/websites/{websiteId}/io/content'
}); };

/**
 * Rename
 * Rename, method will return you operation status.
 */
export const websiteIoRename = <ThrowOnError extends boolean = false>(options: Options<WebsiteIoRenameData, ThrowOnError>) => { return (options?.client ?? client).put<WebsiteIoRenameResponse, WebsiteIoRenameError, ThrowOnError>({
    ...options,
    url: '/websites/{websiteId}/io/rename'
}); };

/**
 * Zip
 * Zip, method will return you operation status.
 */
export const websiteIoZip = <ThrowOnError extends boolean = false>(options: Options<WebsiteIoZipData, ThrowOnError>) => { return (options?.client ?? client).put<WebsiteIoZipResponse, WebsiteIoZipError, ThrowOnError>({
    ...options,
    url: '/websites/{websiteId}/io/zip'
}); };

/**
 * Unzip
 * Unzip, method will return you operation status.
 */
export const websiteIoUnzip = <ThrowOnError extends boolean = false>(options: Options<WebsiteIoUnzipData, ThrowOnError>) => { return (options?.client ?? client).put<WebsiteIoUnzipResponse, WebsiteIoUnzipError, ThrowOnError>({
    ...options,
    url: '/websites/{websiteId}/io/unzip'
}); };

/**
 * Get ACL Permissions
 * Get acl permission, method will return you list of permissions.
 */
export const websiteIoGetAclPermission = <ThrowOnError extends boolean = false>(options: Options<WebsiteIoGetAclPermissionData, ThrowOnError>) => { return (options?.client ?? client).get<WebsiteIoGetAclPermissionResponse, WebsiteIoGetAclPermissionError, ThrowOnError>({
    ...options,
    url: '/websites/{websiteId}/io/permissions'
}); };

/**
 * Set ACL Permissions
 * Set acl permission, method will return you operation status.
 */
export const websiteIoSetAclPermission = <ThrowOnError extends boolean = false>(options: Options<WebsiteIoSetAclPermissionData, ThrowOnError>) => { return (options?.client ?? client).put<WebsiteIoSetAclPermissionResponse, WebsiteIoSetAclPermissionError, ThrowOnError>({
    ...options,
    url: '/websites/{websiteId}/io/permissions'
}); };

/**
 * Get all Websites
 * Get all websites, method will return you list of websites.
 */
export const websitesGetAllWebsites = <ThrowOnError extends boolean = false>(options?: Options<WebsitesGetAllWebsitesData, ThrowOnError>) => { return (options?.client ?? client).get<WebsitesGetAllWebsitesResponse, WebsitesGetAllWebsitesError, ThrowOnError>({
    ...options,
    url: '/websites'
}); };

/**
 * Add a new Website
 * Add website, method will return you complete details of recently added website.
 */
export const websitesAddWebsite = <ThrowOnError extends boolean = false>(options: Options<WebsitesAddWebsiteData, ThrowOnError>) => { return (options?.client ?? client).post<WebsitesAddWebsiteResponse, WebsitesAddWebsiteError, ThrowOnError>({
    ...options,
    url: '/websites'
}); };

/**
 * Get Website Details
 * Get website details, method will return you complete details of a website.
 */
export const websitesGetWebsiteDetails = <ThrowOnError extends boolean = false>(options: Options<WebsitesGetWebsiteDetailsData, ThrowOnError>) => { return (options?.client ?? client).get<WebsitesGetWebsiteDetailsResponse, WebsitesGetWebsiteDetailsError, ThrowOnError>({
    ...options,
    url: '/websites/{websiteId}'
}); };

/**
 * Update Website Details
 * Update website details, method will return you updated details of a website.
 */
export const websitesEditWebsite = <ThrowOnError extends boolean = false>(options: Options<WebsitesEditWebsiteData, ThrowOnError>) => { return (options?.client ?? client).put<WebsitesEditWebsiteResponse, WebsitesEditWebsiteError, ThrowOnError>({
    ...options,
    url: '/websites/{websiteId}'
}); };

/**
 * Delete Website
 * Delete website, method will return you operation status.
 */
export const websitesDeleteWebsite = <ThrowOnError extends boolean = false>(options: Options<WebsitesDeleteWebsiteData, ThrowOnError>) => { return (options?.client ?? client).delete<WebsitesDeleteWebsiteResponse, WebsitesDeleteWebsiteError, ThrowOnError>({
    ...options,
    url: '/websites/{websiteId}'
}); };

/**
 * Start Website
 * Start site, method will return you operation status.
 */
export const websitesStartSite = <ThrowOnError extends boolean = false>(options: Options<WebsitesStartSiteData, ThrowOnError>) => { return (options?.client ?? client).put<WebsitesStartSiteResponse, WebsitesStartSiteError, ThrowOnError>({
    ...options,
    url: '/websites/{websiteId}/start'
}); };

/**
 * Stop Website
 * Stop site, method will return you operation status.
 */
export const websitesStopSite = <ThrowOnError extends boolean = false>(options: Options<WebsitesStopSiteData, ThrowOnError>) => { return (options?.client ?? client).put<WebsitesStopSiteResponse, WebsitesStopSiteError, ThrowOnError>({
    ...options,
    url: '/websites/{websiteId}/stop'
}); };

/**
 * Enable Web Stats
 * Enable stats, method will return you operation status.
 */
export const websitesEnableStats = <ThrowOnError extends boolean = false>(options: Options<WebsitesEnableStatsData, ThrowOnError>) => { return (options?.client ?? client).put<WebsitesEnableStatsResponse, WebsitesEnableStatsError, ThrowOnError>({
    ...options,
    url: '/websites/{websiteId}/stats/enable'
}); };

/**
 * Disable Web Stats
 * Disable stats, method will return you operation status.
 */
export const websitesDisableStats = <ThrowOnError extends boolean = false>(options: Options<WebsitesDisableStatsData, ThrowOnError>) => { return (options?.client ?? client).put<WebsitesDisableStatsResponse, WebsitesDisableStatsError, ThrowOnError>({
    ...options,
    url: '/websites/{websiteId}/stats/disable'
}); };

/**
 * View Web Stats
 * View summary, method will return you website summary.
 */
export const websitesViewStats = <ThrowOnError extends boolean = false>(options: Options<WebsitesViewStatsData, ThrowOnError>) => { return (options?.client ?? client).get<WebsitesViewStatsResponse, WebsitesViewStatsError, ThrowOnError>({
    ...options,
    url: '/websites/{websiteId}/stats/view'
}); };

/**
 * Get all Shared SSLs
 * Get all shared ssls, method will return you list of shared ssl.
 */
export const websitesGetAllSharedSsls = <ThrowOnError extends boolean = false>(options: Options<WebsitesGetAllSharedSslsData, ThrowOnError>) => { return (options?.client ?? client).get<WebsitesGetAllSharedSslsResponse, WebsitesGetAllSharedSslsError, ThrowOnError>({
    ...options,
    url: '/websites/{websiteId}/shared-ssl'
}); };

/**
 * Add a new Shared SSL
 * Add shared ssl, method will return you operation status.
 */
export const websitesAddSharedSsl = <ThrowOnError extends boolean = false>(options: Options<WebsitesAddSharedSslData, ThrowOnError>) => { return (options?.client ?? client).post<WebsitesAddSharedSslResponse, WebsitesAddSharedSslError, ThrowOnError>({
    ...options,
    url: '/websites/{websiteId}/shared-ssl'
}); };

/**
 * Delete Shared SSL
 * Delete shared ssl, method will return you operation status.
 */
export const websitesDeleteSharedSsl = <ThrowOnError extends boolean = false>(options: Options<WebsitesDeleteSharedSslData, ThrowOnError>) => { return (options?.client ?? client).delete<WebsitesDeleteSharedSslResponse, WebsitesDeleteSharedSslError, ThrowOnError>({
    ...options,
    url: '/websites/{websiteId}/shared-ssl/{sslId}'
}); };

/**
 * Update IP Address Details
 * Update IP address, method will return you operation status.
 */
export const websitesUpdateIpAddress = <ThrowOnError extends boolean = false>(options: Options<WebsitesUpdateIpAddressData, ThrowOnError>) => { return (options?.client ?? client).put<WebsitesUpdateIpAddressResponse, WebsitesUpdateIpAddressError, ThrowOnError>({
    ...options,
    url: '/websites/{websiteId}/ipaddress'
}); };

/**
 * Get all Parked Domains
 * Get all parked daomains, method will return you list of parked domains.
 */
export const websitesGetAllParkedDomains = <ThrowOnError extends boolean = false>(options: Options<WebsitesGetAllParkedDomainsData, ThrowOnError>) => { return (options?.client ?? client).get<WebsitesGetAllParkedDomainsResponse, WebsitesGetAllParkedDomainsError, ThrowOnError>({
    ...options,
    url: '/websites/{websiteId}/parked-domains'
}); };

/**
 * Add a new Parked Domain
 * Add parked domain, method will return you details of recently added parked domain.
 */
export const websitesAddParkedDomain = <ThrowOnError extends boolean = false>(options: Options<WebsitesAddParkedDomainData, ThrowOnError>) => { return (options?.client ?? client).post<WebsitesAddParkedDomainResponse, WebsitesAddParkedDomainError, ThrowOnError>({
    ...options,
    url: '/websites/{websiteId}/parked-domains'
}); };

/**
 * Delete Parked Domain
 * Delete parked domain, method will return you operation status.
 */
export const websitesDeleteParkedDomain = <ThrowOnError extends boolean = false>(options: Options<WebsitesDeleteParkedDomainData, ThrowOnError>) => { return (options?.client ?? client).delete<WebsitesDeleteParkedDomainResponse, WebsitesDeleteParkedDomainError, ThrowOnError>({
    ...options,
    url: '/websites/{websiteId}/parked-domains/{parkedDomainId}'
}); };

/**
 * Get all Host Headers
 * Get all host headers, method will return you list of host headers.
 */
export const websitesGetAllHostHeaders = <ThrowOnError extends boolean = false>(options: Options<WebsitesGetAllHostHeadersData, ThrowOnError>) => { return (options?.client ?? client).get<WebsitesGetAllHostHeadersResponse, WebsitesGetAllHostHeadersError, ThrowOnError>({
    ...options,
    url: '/websites/{websiteId}/host-headers'
}); };

/**
 * Add a new Host Header
 * Add host header, method will return you operation status.
 */
export const websitesAddHostHeader = <ThrowOnError extends boolean = false>(options: Options<WebsitesAddHostHeaderData, ThrowOnError>) => { return (options?.client ?? client).post<WebsitesAddHostHeaderResponse, WebsitesAddHostHeaderError, ThrowOnError>({
    ...options,
    url: '/websites/{websiteId}/host-headers'
}); };

/**
 * Delete Host Header
 * Delete host header, method will return you operation status.
 */
export const websitesDeleteHostHeader = <ThrowOnError extends boolean = false>(options: Options<WebsitesDeleteHostHeaderData, ThrowOnError>) => { return (options?.client ?? client).delete<WebsitesDeleteHostHeaderResponse, WebsitesDeleteHostHeaderError, ThrowOnError>({
    ...options,
    url: '/websites/{websiteId}/host-headers/{hostHeaderName}'
}); };

/**
 * Get all Virtual Directories
 * Get all virtual directories, method will return you list of virtual directories.
 */
export const websitesGetAllVirtualDirectories = <ThrowOnError extends boolean = false>(options: Options<WebsitesGetAllVirtualDirectoriesData, ThrowOnError>) => { return (options?.client ?? client).get<WebsitesGetAllVirtualDirectoriesResponse, WebsitesGetAllVirtualDirectoriesError, ThrowOnError>({
    ...options,
    url: '/websites/{websiteId}/virtual-directories'
}); };

/**
 * Update Virtual Directory Details
 * Update virtual directory, method will return you operation status.
 */
export const websitesUpdateVirtualDirectory = <ThrowOnError extends boolean = false>(options: Options<WebsitesUpdateVirtualDirectoryData, ThrowOnError>) => { return (options?.client ?? client).put<WebsitesUpdateVirtualDirectoryResponse, WebsitesUpdateVirtualDirectoryError, ThrowOnError>({
    ...options,
    url: '/websites/{websiteId}/virtual-directories'
}); };

/**
 * Add a new Virtual Directory
 * Add virtual directory, method will return you operation status.
 */
export const websitesAddVirtualDirectory = <ThrowOnError extends boolean = false>(options: Options<WebsitesAddVirtualDirectoryData, ThrowOnError>) => { return (options?.client ?? client).post<WebsitesAddVirtualDirectoryResponse, WebsitesAddVirtualDirectoryError, ThrowOnError>({
    ...options,
    url: '/websites/{websiteId}/virtual-directories'
}); };

/**
 * Get Virtual Directory Details
 * Get virtual directory details, method will return you virtual directory details.
 */
export const websitesGetVirtualDirectoryDetails = <ThrowOnError extends boolean = false>(options: Options<WebsitesGetVirtualDirectoryDetailsData, ThrowOnError>) => { return (options?.client ?? client).get<WebsitesGetVirtualDirectoryDetailsResponse, WebsitesGetVirtualDirectoryDetailsError, ThrowOnError>({
    ...options,
    url: '/websites/{websiteId}/virtual-directories/vdName/{virtualDirectoryName}'
}); };

/**
 * Delete Virtual Directory
 * Delete virtual directory, method will return you operation status.
 */
export const websitesDeleteVirtualDirectory = <ThrowOnError extends boolean = false>(options: Options<WebsitesDeleteVirtualDirectoryData, ThrowOnError>) => { return (options?.client ?? client).delete<WebsitesDeleteVirtualDirectoryResponse, WebsitesDeleteVirtualDirectoryError, ThrowOnError>({
    ...options,
    url: '/websites/{websiteId}/virtual-directories/vdName/{virtualDirectoryName}'
}); };

/**
 * Change System User Password
 * Change system user password, method will return you operation status.
 */
export const websitesChangeSysUserPassword = <ThrowOnError extends boolean = false>(options: Options<WebsitesChangeSysUserPasswordData, ThrowOnError>) => { return (options?.client ?? client).put<WebsitesChangeSysUserPasswordResponse, WebsitesChangeSysUserPasswordError, ThrowOnError>({
    ...options,
    url: '/websites/{websiteId}/virtual-directories/change-password'
}); };

/**
 * Get Application Pool Process Information
 * Get application pool process information, method will return you application pool process informaion.
 */
export const websitesGetApplicationPoolProcessInfo = <ThrowOnError extends boolean = false>(options: Options<WebsitesGetApplicationPoolProcessInfoData, ThrowOnError>) => { return (options?.client ?? client).get<WebsitesGetApplicationPoolProcessInfoResponse, WebsitesGetApplicationPoolProcessInfoError, ThrowOnError>({
    ...options,
    url: '/websites/{websiteId}/app-pools/{appPoolName}/process-info'
}); };

/**
 * Get URL Redirection Settings
 * Get url redirection settings, method will return you complete url redirection settings.
 */
export const websitesGetUrlRedirectionSettings = <ThrowOnError extends boolean = false>(options: Options<WebsitesGetUrlRedirectionSettingsData, ThrowOnError>) => { return (options?.client ?? client).get<WebsitesGetUrlRedirectionSettingsResponse, WebsitesGetUrlRedirectionSettingsError, ThrowOnError>({
    ...options,
    url: '/websites/{websiteId}/url-redirection'
}); };

/**
 * Save URL Redirection Settings
 * Save url redirection settings, method will return you operation status.
 */
export const websitesSaveUrlRedirectionSettings = <ThrowOnError extends boolean = false>(options: Options<WebsitesSaveUrlRedirectionSettingsData, ThrowOnError>) => { return (options?.client ?? client).post<WebsitesSaveUrlRedirectionSettingsResponse, WebsitesSaveUrlRedirectionSettingsError, ThrowOnError>({
    ...options,
    url: '/websites/{websiteId}/url-redirection'
}); };

/**
 * Get Access Permissions Settings
 * Get access permissions settings, method will return you complete access permission settings.
 */
export const websitesGetAccessPermissionsSettings = <ThrowOnError extends boolean = false>(options: Options<WebsitesGetAccessPermissionsSettingsData, ThrowOnError>) => { return (options?.client ?? client).get<WebsitesGetAccessPermissionsSettingsResponse, WebsitesGetAccessPermissionsSettingsError, ThrowOnError>({
    ...options,
    url: '/websites/{websiteId}/access-permissions'
}); };

/**
 * Save Access Permissions Settings
 * Save access permissions settings, method will return you operation status.
 */
export const websitesSaveAccessPermissionsSettings = <ThrowOnError extends boolean = false>(options: Options<WebsitesSaveAccessPermissionsSettingsData, ThrowOnError>) => { return (options?.client ?? client).post<WebsitesSaveAccessPermissionsSettingsResponse, WebsitesSaveAccessPermissionsSettingsError, ThrowOnError>({
    ...options,
    url: '/websites/{websiteId}/access-permissions'
}); };

/**
 * Get Custom Errors List
 * Get custom errors list, method will return you list of custom errors.
 */
export const websitesGetCustomErrorsList = <ThrowOnError extends boolean = false>(options: Options<WebsitesGetCustomErrorsListData, ThrowOnError>) => { return (options?.client ?? client).get<WebsitesGetCustomErrorsListResponse, WebsitesGetCustomErrorsListError, ThrowOnError>({
    ...options,
    url: '/websites/{websiteId}/custom-errors'
}); };

/**
 * Update Custom Error Details
 * Update custom errors, method will return you operation status.
 */
export const websitesUpdateCustomErrors = <ThrowOnError extends boolean = false>(options: Options<WebsitesUpdateCustomErrorsData, ThrowOnError>) => { return (options?.client ?? client).post<WebsitesUpdateCustomErrorsResponse, WebsitesUpdateCustomErrorsError, ThrowOnError>({
    ...options,
    url: '/websites/{websiteId}/custom-errors'
}); };

/**
 * Get all FTP Users
 * List all FTP users, method will return you list of FTP users.
 */
export const websitesListAllFtpUsers = <ThrowOnError extends boolean = false>(options: Options<WebsitesListAllFtpUsersData, ThrowOnError>) => { return (options?.client ?? client).get<WebsitesListAllFtpUsersResponse, WebsitesListAllFtpUsersError, ThrowOnError>({
    ...options,
    url: '/websites/{websiteId}/ftp-users'
}); };

/**
 * Add a new FTP User
 * Add FTP user, method will return you complete details of recently added FTP user.
 */
export const websitesAddFtpUser = <ThrowOnError extends boolean = false>(options: Options<WebsitesAddFtpUserData, ThrowOnError>) => { return (options?.client ?? client).post<WebsitesAddFtpUserResponse, WebsitesAddFtpUserError, ThrowOnError>({
    ...options,
    url: '/websites/{websiteId}/ftp-users'
}); };

/**
 * Get FTP User Details
 * Get FTP user details, method will return you complete details of FTP user.
 */
export const websitesGetFtpUserDetail = <ThrowOnError extends boolean = false>(options: Options<WebsitesGetFtpUserDetailData, ThrowOnError>) => { return (options?.client ?? client).get<WebsitesGetFtpUserDetailResponse, WebsitesGetFtpUserDetailError, ThrowOnError>({
    ...options,
    url: '/websites/{websiteId}/ftp-users/{ftpUserId}'
}); };

/**
 * Update FTP User Password
 * Update FTP user password, method will return you operation status.
 */
export const websitesUpdateFtpUserPassword = <ThrowOnError extends boolean = false>(options: Options<WebsitesUpdateFtpUserPasswordData, ThrowOnError>) => { return (options?.client ?? client).put<WebsitesUpdateFtpUserPasswordResponse, WebsitesUpdateFtpUserPasswordError, ThrowOnError>({
    ...options,
    url: '/websites/{websiteId}/ftp-users/{ftpUserId}'
}); };

/**
 * Delete FTP User
 * Delete FTP user, method will return you operation status.
 */
export const websitesDeleteFtpUser = <ThrowOnError extends boolean = false>(options: Options<WebsitesDeleteFtpUserData, ThrowOnError>) => { return (options?.client ?? client).delete<WebsitesDeleteFtpUserResponse, WebsitesDeleteFtpUserError, ThrowOnError>({
    ...options,
    url: '/websites/{websiteId}/ftp-users/{ftpUserId}'
}); };

/**
 * Update FTP User Status
 * Update FTP user status, method will return you operation status.
 */
export const websitesUpdateFtpUserStatus = <ThrowOnError extends boolean = false>(options: Options<WebsitesUpdateFtpUserStatusData, ThrowOnError>) => { return (options?.client ?? client).put<WebsitesUpdateFtpUserStatusResponse, WebsitesUpdateFtpUserStatusError, ThrowOnError>({
    ...options,
    url: '/websites/{websiteId}/ftp-users/{ftpUserId}/status'
}); };

/**
 * Update FTP User Permissions
 * Update FTP user permission, method will return you operation status.
 */
export const websitesUpdateFtpUserPermission = <ThrowOnError extends boolean = false>(options: Options<WebsitesUpdateFtpUserPermissionData, ThrowOnError>) => { return (options?.client ?? client).put<WebsitesUpdateFtpUserPermissionResponse, WebsitesUpdateFtpUserPermissionError, ThrowOnError>({
    ...options,
    url: '/websites/{websiteId}/ftp-users/{ftpUserId}/permissions'
}); };

/**
 * Get Dot Net Installed Version
 * Get dot net installed version, method will return you operation status.
 */
export const websitesGetDotNetInstalledVersions = <ThrowOnError extends boolean = false>(options: Options<WebsitesGetDotNetInstalledVersionsData, ThrowOnError>) => { return (options?.client ?? client).get<WebsitesGetDotNetInstalledVersionsResponse, WebsitesGetDotNetInstalledVersionsError, ThrowOnError>({
    ...options,
    url: '/websites/{websiteId}/dotnetversions'
}); };

/**
 * Scripting
 * Update script, method will return you operation status.
 */
export const websitesScripting = <ThrowOnError extends boolean = false>(options: Options<WebsitesScriptingData, ThrowOnError>) => { return (options?.client ?? client).put<WebsitesScriptingResponse, WebsitesScriptingError, ThrowOnError>({
    ...options,
    url: '/websites/{websiteId}/scripting/{scriptingType}'
}); };

/**
 * Recycle Website Application Pool
 * Recycle website application pool, method will return you operation status.
 */
export const websitesRecycleWebsiteApplicationPool = <ThrowOnError extends boolean = false>(options: Options<WebsitesRecycleWebsiteApplicationPoolData, ThrowOnError>) => { return (options?.client ?? client).put<WebsitesRecycleWebsiteApplicationPoolResponse, WebsitesRecycleWebsiteApplicationPoolError, ThrowOnError>({
    ...options,
    url: '/websites/{websiteId}/app-pools-recycle'
}); };

/**
 * Restore Default
 * Restore default, method will return you operation status.
 */
export const websitesRestoreDefault = <ThrowOnError extends boolean = false>(options: Options<WebsitesRestoreDefaultData, ThrowOnError>) => { return (options?.client ?? client).put<WebsitesRestoreDefaultResponse, WebsitesRestoreDefaultError, ThrowOnError>({
    ...options,
    url: '/websites/{websiteId}/restore-default'
}); };

/**
 * Get System Users
 * Get system users, method will return you list of system users.
 */
export const websitesGetSystemUsers = <ThrowOnError extends boolean = false>(options: Options<WebsitesGetSystemUsersData, ThrowOnError>) => { return (options?.client ?? client).get<WebsitesGetSystemUsersResponse, WebsitesGetSystemUsersError, ThrowOnError>({
    ...options,
    url: '/websites/{websiteId}/system-users'
}); };

/**
 * Get Roles
 * Get roles, method will return you list of roles.
 */
export const rolesGetRoles = <ThrowOnError extends boolean = false>(options?: Options<RolesGetRolesData, ThrowOnError>) => { return (options?.client ?? client).get<RolesGetRolesResponse, RolesGetRolesError, ThrowOnError>({
    ...options,
    url: '/Server-Roles'
}); };

/**
 * Get Server Roles
 * Get server roles, method will return you list of server roles.
 */
export const rolesGetServerRoles = <ThrowOnError extends boolean = false>(options: Options<RolesGetServerRolesData, ThrowOnError>) => { return (options?.client ?? client).get<RolesGetServerRolesResponse, RolesGetServerRolesError, ThrowOnError>({
    ...options,
    url: '/servers/{serverId}/roles'
}); };

/**
 * Get all Servers
 * Get all servers, method will return you list of servers.
 */
export const rolesGetAllServers = <ThrowOnError extends boolean = false>(options?: Options<RolesGetAllServersData, ThrowOnError>) => { return (options?.client ?? client).get<RolesGetAllServersResponse, RolesGetAllServersError, ThrowOnError>({
    ...options,
    url: '/servers'
}); };

/**
 * Get all Service Plans
 * Get all service plans, method will return you a  list of service plans.
 */
export const planGetAllPlans = <ThrowOnError extends boolean = false>(options?: Options<PlanGetAllPlansData, ThrowOnError>) => { return (options?.client ?? client).get<PlanGetAllPlansResponse, PlanGetAllPlansError, ThrowOnError>({
    ...options,
    url: '/plans'
}); };

/**
 * Add a new Service Plan
 * Add service plan, method will return you details of recently added service plan.
 */
export const planAddPlan = <ThrowOnError extends boolean = false>(options: Options<PlanAddPlanData, ThrowOnError>) => { return (options?.client ?? client).post<PlanAddPlanResponse, PlanAddPlanError, ThrowOnError>({
    ...options,
    url: '/plans'
}); };

/**
 * Get Service Plan Details
 * Get service plan details, method will return you service plan details.
 */
export const planGetPlanDetails = <ThrowOnError extends boolean = false>(options: Options<PlanGetPlanDetailsData, ThrowOnError>) => { return (options?.client ?? client).get<PlanGetPlanDetailsResponse, PlanGetPlanDetailsError, ThrowOnError>({
    ...options,
    url: '/plans/{planId}'
}); };

/**
 * Update Service Plan Details
 * Update service plan, method will return you updated service plan details.
 */
export const planUpdatePlan = <ThrowOnError extends boolean = false>(options: Options<PlanUpdatePlanData, ThrowOnError>) => { return (options?.client ?? client).put<PlanUpdatePlanResponse, PlanUpdatePlanError, ThrowOnError>({
    ...options,
    url: '/plans/{planId}'
}); };

/**
 * Delete Service Plan
 * Delete service plan, method will return you operation status.
 */
export const planDeletePlan = <ThrowOnError extends boolean = false>(options: Options<PlanDeletePlanData, ThrowOnError>) => { return (options?.client ?? client).delete<PlanDeletePlanResponse, PlanDeletePlanError, ThrowOnError>({
    ...options,
    url: '/plans/{planId}'
}); };

/**
 * Get All Organizations
 * Get all organizations, method will return you list of organizations.
 */
export const organizationsGetAllOrganizations = <ThrowOnError extends boolean = false>(options?: Options<OrganizationsGetAllOrganizationsData, ThrowOnError>) => { return (options?.client ?? client).get<OrganizationsGetAllOrganizationsResponse, OrganizationsGetAllOrganizationsError, ThrowOnError>({
    ...options,
    url: '/organizations'
}); };

/**
 * Get Organization Details
 * Get organization details, method will return you complete organization details.
 */
export const organizationsGetOrganizationDetails = <ThrowOnError extends boolean = false>(options: Options<OrganizationsGetOrganizationDetailsData, ThrowOnError>) => { return (options?.client ?? client).get<OrganizationsGetOrganizationDetailsResponse, OrganizationsGetOrganizationDetailsError, ThrowOnError>({
    ...options,
    url: '/organizations/{organizationId}'
}); };

/**
 * Get All Exchange Organizations
 * Get all exchange organizations, method will return you list of exchange organizations.
 */
export const organizationsGetAllExchangeOrganizations = <ThrowOnError extends boolean = false>(options?: Options<OrganizationsGetAllExchangeOrganizationsData, ThrowOnError>) => { return (options?.client ?? client).get<OrganizationsGetAllExchangeOrganizationsResponse, OrganizationsGetAllExchangeOrganizationsError, ThrowOnError>({
    ...options,
    url: '/organizations/exchange'
}); };

/**
 * Add Exchange Organization
 * Add exchange organizations, method will return you complete details of recently added organization.
 */
export const organizationsAddExchangeOrganization = <ThrowOnError extends boolean = false>(options: Options<OrganizationsAddExchangeOrganizationData, ThrowOnError>) => { return (options?.client ?? client).post<OrganizationsAddExchangeOrganizationResponse, OrganizationsAddExchangeOrganizationError, ThrowOnError>({
    ...options,
    url: '/organizations/exchange'
}); };

/**
 * Delete Exchange Organization
 * Delete exchange organization, method will return you operation status.
 */
export const organizationsDeleteExchangeOrganization = <ThrowOnError extends boolean = false>(options: Options<OrganizationsDeleteExchangeOrganizationData, ThrowOnError>) => { return (options?.client ?? client).delete<OrganizationsDeleteExchangeOrganizationResponse, OrganizationsDeleteExchangeOrganizationError, ThrowOnError>({
    ...options,
    url: '/organizations/{organizationId}/exchange'
}); };

/**
 * Get All SharePoint Organizations
 * Get all sharePoint organizations, method will return you list of sharePoint organizations.
 */
export const organizationsGetAllSharePointOrganizations = <ThrowOnError extends boolean = false>(options?: Options<OrganizationsGetAllSharePointOrganizationsData, ThrowOnError>) => { return (options?.client ?? client).get<OrganizationsGetAllSharePointOrganizationsResponse, OrganizationsGetAllSharePointOrganizationsError, ThrowOnError>({
    ...options,
    url: '/organizations/sharepoint'
}); };

/**
 * Add SharePoint Organization
 * Add sharePoint organizations, method will return you recently added sharePoint organization details.
 */
export const organizationsAddSharePointOrganization = <ThrowOnError extends boolean = false>(options: Options<OrganizationsAddSharePointOrganizationData, ThrowOnError>) => { return (options?.client ?? client).post<OrganizationsAddSharePointOrganizationResponse, OrganizationsAddSharePointOrganizationError, ThrowOnError>({
    ...options,
    url: '/organizations/sharepoint'
}); };

/**
 * Delete SharePoint Organization
 * Delete sharePoint organizations, method will return you operation status.
 */
export const organizationsDeleteSharePointOrganization = <ThrowOnError extends boolean = false>(options: Options<OrganizationsDeleteSharePointOrganizationData, ThrowOnError>) => { return (options?.client ?? client).delete<OrganizationsDeleteSharePointOrganizationResponse, OrganizationsDeleteSharePointOrganizationError, ThrowOnError>({
    ...options,
    url: '/organizations/{organizationId}/sharepoint'
}); };

/**
 * Get All Skype Organizations
 * Get all skype organizations, method will return you list of skype organizations.
 */
export const organizationsGetAllSkypeOrganizations = <ThrowOnError extends boolean = false>(options?: Options<OrganizationsGetAllSkypeOrganizationsData, ThrowOnError>) => { return (options?.client ?? client).get<OrganizationsGetAllSkypeOrganizationsResponse, OrganizationsGetAllSkypeOrganizationsError, ThrowOnError>({
    ...options,
    url: '/organizations/skype'
}); };

/**
 * Add Skype Organization
 * Add skype organization, method will return you details of recently added skype organizations.
 */
export const organizationsAddSkypeOrganization = <ThrowOnError extends boolean = false>(options: Options<OrganizationsAddSkypeOrganizationData, ThrowOnError>) => { return (options?.client ?? client).post<OrganizationsAddSkypeOrganizationResponse, OrganizationsAddSkypeOrganizationError, ThrowOnError>({
    ...options,
    url: '/organizations/skype'
}); };

/**
 * Delete Skype Organization
 * Delete skype organizations, method will return you operation status.
 */
export const organizationsDeleteSkypeOrganization = <ThrowOnError extends boolean = false>(options: Options<OrganizationsDeleteSkypeOrganizationData, ThrowOnError>) => { return (options?.client ?? client).delete<OrganizationsDeleteSkypeOrganizationResponse, OrganizationsDeleteSkypeOrganizationError, ThrowOnError>({
    ...options,
    url: '/organizations/{organizationId}/skype'
}); };

/**
 * Get Active Directory Organizations
 * The method retrieves list of active directory organizations.
 */
export const organizationsGetAllActiveDirectoryOrganizations = <ThrowOnError extends boolean = false>(options?: Options<OrganizationsGetAllActiveDirectoryOrganizationsData, ThrowOnError>) => { return (options?.client ?? client).get<OrganizationsGetAllActiveDirectoryOrganizationsResponse, OrganizationsGetAllActiveDirectoryOrganizationsError, ThrowOnError>({
    ...options,
    url: '/organizations/active-directory'
}); };

/**
 * Add Active Directory Organization
 * The method creates new active directory organization.
 */
export const organizationsAddActiveDirectoryOrganization = <ThrowOnError extends boolean = false>(options: Options<OrganizationsAddActiveDirectoryOrganizationData, ThrowOnError>) => { return (options?.client ?? client).post<OrganizationsAddActiveDirectoryOrganizationResponse, OrganizationsAddActiveDirectoryOrganizationError, ThrowOnError>({
    ...options,
    url: '/organizations/active-directory'
}); };

/**
 * Add Active Directory Sub Organization
 * The method will add sub organization.
 */
export const organizationsAddActiveDirectorySubOrganization = <ThrowOnError extends boolean = false>(options: Options<OrganizationsAddActiveDirectorySubOrganizationData, ThrowOnError>) => { return (options?.client ?? client).post<OrganizationsAddActiveDirectorySubOrganizationResponse, OrganizationsAddActiveDirectorySubOrganizationError, ThrowOnError>({
    ...options,
    url: '/organizations/active-directory/sub-ou'
}); };

/**
 * Delete Active Directory Organization
 * THe method will delete the organization.
 */
export const organizationsDeleteActiveDirectoryOrganization = <ThrowOnError extends boolean = false>(options: Options<OrganizationsDeleteActiveDirectoryOrganizationData, ThrowOnError>) => { return (options?.client ?? client).delete<OrganizationsDeleteActiveDirectoryOrganizationResponse, OrganizationsDeleteActiveDirectoryOrganizationError, ThrowOnError>({
    ...options,
    url: '/organizations/{organizationId}/active-directory'
}); };

/**
 * Get all Exchange Mail Domains
 * Get all exchange mail domains, method will return you list of exchange mail domains.
 */
export const exchangeMailDomainsGetAllExchangeMailDomains = <ThrowOnError extends boolean = false>(options?: Options<ExchangeMailDomainsGetAllExchangeMailDomainsData, ThrowOnError>) => { return (options?.client ?? client).get<ExchangeMailDomainsGetAllExchangeMailDomainsResponse, ExchangeMailDomainsGetAllExchangeMailDomainsError, ThrowOnError>({
    ...options,
    url: '/exchange/mail-domains'
}); };

/**
 * Add a new Exchange Mail Domain
 * Add exchange mail domain, method will return you recently added exchange mail domain details.
 */
export const exchangeMailDomainsAddExchangeMailDomain = <ThrowOnError extends boolean = false>(options: Options<ExchangeMailDomainsAddExchangeMailDomainData, ThrowOnError>) => { return (options?.client ?? client).post<ExchangeMailDomainsAddExchangeMailDomainResponse, ExchangeMailDomainsAddExchangeMailDomainError, ThrowOnError>({
    ...options,
    url: '/exchange/mail-domains'
}); };

/**
 * Get Exchange Mail Domain Details
 * Get exchange mail domain details, method will return you exchange mail domain details.
 */
export const exchangeMailDomainsGetExchangemailDomainDetails = <ThrowOnError extends boolean = false>(options: Options<ExchangeMailDomainsGetExchangemailDomainDetailsData, ThrowOnError>) => { return (options?.client ?? client).get<ExchangeMailDomainsGetExchangemailDomainDetailsResponse, ExchangeMailDomainsGetExchangemailDomainDetailsError, ThrowOnError>({
    ...options,
    url: '/exchange/mail-domains/{exgMaildomainId}'
}); };

/**
 * Update Exchange Mail Domain
 * Update exchange mail domain details, method will return you operations status.
 */
export const exchangeMailDomainsEditExchangeMailDomain = <ThrowOnError extends boolean = false>(options: Options<ExchangeMailDomainsEditExchangeMailDomainData, ThrowOnError>) => { return (options?.client ?? client).put<ExchangeMailDomainsEditExchangeMailDomainResponse, ExchangeMailDomainsEditExchangeMailDomainError, ThrowOnError>({
    ...options,
    url: '/exchange/mail-domains/{exgMaildomainId}'
}); };

/**
 * Delete Exchange Mail Domain
 * Delete exchange mail domain, method will return you operations status.
 */
export const exchangeMailDomainsDeleteExchangeMailDomain = <ThrowOnError extends boolean = false>(options: Options<ExchangeMailDomainsDeleteExchangeMailDomainData, ThrowOnError>) => { return (options?.client ?? client).delete<ExchangeMailDomainsDeleteExchangeMailDomainResponse, ExchangeMailDomainsDeleteExchangeMailDomainError, ThrowOnError>({
    ...options,
    url: '/exchange/mail-domains/{exgMaildomainId}'
}); };

/**
 * Enable Disable Exchange Mail Domain
 * Enable disable exchange mail domain, method will return you operations status.
 */
export const exchangeMailDomainsEnableDisableExchangeMailDomain = <ThrowOnError extends boolean = false>(options: Options<ExchangeMailDomainsEnableDisableExchangeMailDomainData, ThrowOnError>) => { return (options?.client ?? client).put<ExchangeMailDomainsEnableDisableExchangeMailDomainResponse, ExchangeMailDomainsEnableDisableExchangeMailDomainError, ThrowOnError>({
    ...options,
    url: '/exchange/mail-domains/{exgMaildomainId}/enable-disable'
}); };

/**
 * Get all Mailboxes
 * Get all mailboxes, method will return you list of mailboxes.
 */
export const exgMailboxGetAllExgMailboxs = <ThrowOnError extends boolean = false>(options?: Options<ExgMailboxGetAllExgMailboxsData, ThrowOnError>) => { return (options?.client ?? client).get<ExgMailboxGetAllExgMailboxsResponse, ExgMailboxGetAllExgMailboxsError, ThrowOnError>({
    ...options,
    url: '/exchange/mailboxes'
}); };

/**
 * Add a new Mailbox
 * Add mailbox, method will return you details of recently added mailbox.
 */
export const exgMailboxAddExgMailbox = <ThrowOnError extends boolean = false>(options: Options<ExgMailboxAddExgMailboxData, ThrowOnError>) => { return (options?.client ?? client).post<ExgMailboxAddExgMailboxResponse, ExgMailboxAddExgMailboxError, ThrowOnError>({
    ...options,
    url: '/exchange/mailboxes'
}); };

/**
 * Update Mailbox Details
 * Update mailbox, method will return you updated details of mailbox.
 */
export const exgMailboxUpdateExgMailbox = <ThrowOnError extends boolean = false>(options: Options<ExgMailboxUpdateExgMailboxData, ThrowOnError>) => { return (options?.client ?? client).put<ExgMailboxUpdateExgMailboxResponse, ExgMailboxUpdateExgMailboxError, ThrowOnError>({
    ...options,
    url: '/exchange/mailboxes/{exgMailboxId}/enable-disable'
}); };

/**
 * Get Mailbox Details
 * Get mailbox details, method will return you mailbox details.
 */
export const exgMailboxGetExgMailboxDetails = <ThrowOnError extends boolean = false>(options: Options<ExgMailboxGetExgMailboxDetailsData, ThrowOnError>) => { return (options?.client ?? client).get<ExgMailboxGetExgMailboxDetailsResponse, ExgMailboxGetExgMailboxDetailsError, ThrowOnError>({
    ...options,
    url: '/exchange/mailboxes/{exgMailboxId}'
}); };

/**
 * Delete Mailbox
 * Delete mailbox, method will return you operation status.
 */
export const exgMailboxDeleteExgMailbox = <ThrowOnError extends boolean = false>(options: Options<ExgMailboxDeleteExgMailboxData, ThrowOnError>) => { return (options?.client ?? client).delete<ExgMailboxDeleteExgMailboxResponse, ExgMailboxDeleteExgMailboxError, ThrowOnError>({
    ...options,
    url: '/exchange/mailboxes/{exgMailboxId}'
}); };

/**
 * Get Mailbox ASync Policy
 * Get mailbox active sync policy, method will return you mailbox active sync policy settings.
 */
export const exgMailboxGetExgMailboxAsyncPolicy = <ThrowOnError extends boolean = false>(options: Options<ExgMailboxGetExgMailboxAsyncPolicyData, ThrowOnError>) => { return (options?.client ?? client).get<ExgMailboxGetExgMailboxAsyncPolicyResponse, ExgMailboxGetExgMailboxAsyncPolicyError, ThrowOnError>({
    ...options,
    url: '/exchange/mailboxes/{exgMailboxId}/async-policies'
}); };

/**
 * Update Mailbox ASync Policy
 * Update mailbox active sync policy, method will return you operation status.
 */
export const exgMailboxUpdateExgMailboxAsyncPolicy = <ThrowOnError extends boolean = false>(options: Options<ExgMailboxUpdateExgMailboxAsyncPolicyData, ThrowOnError>) => { return (options?.client ?? client).put<ExgMailboxUpdateExgMailboxAsyncPolicyResponse, ExgMailboxUpdateExgMailboxAsyncPolicyError, ThrowOnError>({
    ...options,
    url: '/exchange/mailboxes/{exgMailboxId}/async-policies'
}); };

/**
 * Get User Mailbox General Properties
 * Get user mailbox general properties, method will return you list of user mailbox general properties.
 */
export const exgMailboxGetUserMailboxGeneralProperties = <ThrowOnError extends boolean = false>(options: Options<ExgMailboxGetUserMailboxGeneralPropertiesData, ThrowOnError>) => { return (options?.client ?? client).get<ExgMailboxGetUserMailboxGeneralPropertiesResponse, ExgMailboxGetUserMailboxGeneralPropertiesError, ThrowOnError>({
    ...options,
    url: '/exchange/mailboxes/{mailboxId}/general-properties'
}); };

/**
 * Update Mailbox General Properties
 * Update mailbox general properties, method will return you operation status.
 */
export const exgMailboxUpdateExgMailboxGeneralProperties = <ThrowOnError extends boolean = false>(options: Options<ExgMailboxUpdateExgMailboxGeneralPropertiesData, ThrowOnError>) => { return (options?.client ?? client).put<ExgMailboxUpdateExgMailboxGeneralPropertiesResponse, ExgMailboxUpdateExgMailboxGeneralPropertiesError, ThrowOnError>({
    ...options,
    url: '/exchange/mailboxes/{mailboxId}/general-properties'
}); };

/**
 * Change Mailbox Password
 * Change mailbox password, method will return you operation status.
 */
export const exgMailboxChangeUserMailboxPassword = <ThrowOnError extends boolean = false>(options: Options<ExgMailboxChangeUserMailboxPasswordData, ThrowOnError>) => { return (options?.client ?? client).put<ExgMailboxChangeUserMailboxPasswordResponse, ExgMailboxChangeUserMailboxPasswordError, ThrowOnError>({
    ...options,
    url: '/exchange/mailboxes/{mailboxId}/change-password'
}); };

/**
 * Get User Mailbox Email Addresses
 * Get user mailbox email addresses, method will return you list of user mailbox email addresses.
 */
export const exgMailboxGetUserMailboxEmailAddresses = <ThrowOnError extends boolean = false>(options: Options<ExgMailboxGetUserMailboxEmailAddressesData, ThrowOnError>) => { return (options?.client ?? client).get<ExgMailboxGetUserMailboxEmailAddressesResponse, ExgMailboxGetUserMailboxEmailAddressesError, ThrowOnError>({
    ...options,
    url: '/exchange/mailboxes/{mailboxId}/email-addresses'
}); };

/**
 * Set Primary Email Addresses
 * Set primary email addresses, method will return you operation status.
 */
export const exgMailboxSetPrimaryEmailAddresses = <ThrowOnError extends boolean = false>(options: Options<ExgMailboxSetPrimaryEmailAddressesData, ThrowOnError>) => { return (options?.client ?? client).put<ExgMailboxSetPrimaryEmailAddressesResponse, ExgMailboxSetPrimaryEmailAddressesError, ThrowOnError>({
    ...options,
    url: '/exchange/mailboxes/{mailboxId}/email-addresses'
}); };

/**
 * Add Mailbox Email Addresses
 * Add mailbox email addresses, method will return you operation status.
 */
export const exgMailboxAddUserMailboxEmailAddresses = <ThrowOnError extends boolean = false>(options: Options<ExgMailboxAddUserMailboxEmailAddressesData, ThrowOnError>) => { return (options?.client ?? client).post<ExgMailboxAddUserMailboxEmailAddressesResponse, ExgMailboxAddUserMailboxEmailAddressesError, ThrowOnError>({
    ...options,
    url: '/exchange/mailboxes/{mailboxId}/email-addresses'
}); };

/**
 * Delete Mailbox Email Address
 * Delete mailbox email address, method will return you operation status.
 */
export const exgMailboxDeleteUserMailboxEmailAddresses = <ThrowOnError extends boolean = false>(options: Options<ExgMailboxDeleteUserMailboxEmailAddressesData, ThrowOnError>) => { return (options?.client ?? client).delete<ExgMailboxDeleteUserMailboxEmailAddressesResponse, ExgMailboxDeleteUserMailboxEmailAddressesError, ThrowOnError>({
    ...options,
    url: '/exchange/mailboxes/{mailboxId}/email-addresses'
}); };

/**
 * Get Mailbox Send On Behalf Users
 * Get mailbox send on behalf users, method will return you list of mailbox send on behalf users.
 */
export const exgMailboxGetUserSendOnBehalfUsers = <ThrowOnError extends boolean = false>(options: Options<ExgMailboxGetUserSendOnBehalfUsersData, ThrowOnError>) => { return (options?.client ?? client).get<ExgMailboxGetUserSendOnBehalfUsersResponse, ExgMailboxGetUserSendOnBehalfUsersError, ThrowOnError>({
    ...options,
    url: '/exchange/mailboxes/{mailboxId}/send-on-behalf'
}); };

/**
 * Add User Send On Behalf Users
 * Add mailbox send on behalf users, method will return you operation status.
 */
export const exgMailboxAddUserSendOnBehalfUsers = <ThrowOnError extends boolean = false>(options: Options<ExgMailboxAddUserSendOnBehalfUsersData, ThrowOnError>) => { return (options?.client ?? client).put<ExgMailboxAddUserSendOnBehalfUsersResponse, ExgMailboxAddUserSendOnBehalfUsersError, ThrowOnError>({
    ...options,
    url: '/exchange/mailboxes/{mailboxId}/send-on-behalf'
}); };

/**
 * Remove Mailbox Send On Behalf Users
 * Remove mailbox send on behalf users, method will return you operation status.
 */
export const exgMailboxRemoveUserSendOnBehalfUsers = <ThrowOnError extends boolean = false>(options: Options<ExgMailboxRemoveUserSendOnBehalfUsersData, ThrowOnError>) => { return (options?.client ?? client).delete<ExgMailboxRemoveUserSendOnBehalfUsersResponse, ExgMailboxRemoveUserSendOnBehalfUsersError, ThrowOnError>({
    ...options,
    url: '/exchange/mailboxes/{mailboxId}/send-on-behalf'
}); };

/**
 * Get Mailbox Advanced Properties
 * Get mailbox advanced properties, method will return you mailbox advanced properties.
 */
export const exgMailboxGetUserMailboxAdvancedProperties = <ThrowOnError extends boolean = false>(options: Options<ExgMailboxGetUserMailboxAdvancedPropertiesData, ThrowOnError>) => { return (options?.client ?? client).get<ExgMailboxGetUserMailboxAdvancedPropertiesResponse, ExgMailboxGetUserMailboxAdvancedPropertiesError, ThrowOnError>({
    ...options,
    url: '/exchange/mailboxes/{mailboxId}/advanced-properties'
}); };

/**
 * Update User Mailbox Advanced Properties
 * Update mailbox advanced properties, method will return you updated mailbox advanced properties.
 */
export const exgMailboxUpdateUserMailboxAdvancedProperties = <ThrowOnError extends boolean = false>(options: Options<ExgMailboxUpdateUserMailboxAdvancedPropertiesData, ThrowOnError>) => { return (options?.client ?? client).put<ExgMailboxUpdateUserMailboxAdvancedPropertiesResponse, ExgMailboxUpdateUserMailboxAdvancedPropertiesError, ThrowOnError>({
    ...options,
    url: '/exchange/mailboxes/{mailboxId}/advanced-properties'
}); };

/**
 * Get Mailbox Accepted Senders
 * Get mailbox accepted senders, method will return you list of mailbox accepted senders.
 */
export const exgMailboxGetUserAcceptedSenders = <ThrowOnError extends boolean = false>(options: Options<ExgMailboxGetUserAcceptedSendersData, ThrowOnError>) => { return (options?.client ?? client).get<ExgMailboxGetUserAcceptedSendersResponse, ExgMailboxGetUserAcceptedSendersError, ThrowOnError>({
    ...options,
    url: '/exchange/mailboxes/{mailboxId}/accepted-senders'
}); };

/**
 * Add Mailbox Accepted Senders
 * Add mailbox accepted senders, method will return you operation status.
 */
export const exgMailboxAddUserAcceptedSenders = <ThrowOnError extends boolean = false>(options: Options<ExgMailboxAddUserAcceptedSendersData, ThrowOnError>) => { return (options?.client ?? client).put<ExgMailboxAddUserAcceptedSendersResponse, ExgMailboxAddUserAcceptedSendersError, ThrowOnError>({
    ...options,
    url: '/exchange/mailboxes/{mailboxId}/accepted-senders'
}); };

/**
 * Remove Mailbox Accepted Senders
 * Remove mailbox accepted senders, method will return you operation status.
 */
export const exgMailboxRemoveUserAcceptedSenders = <ThrowOnError extends boolean = false>(options: Options<ExgMailboxRemoveUserAcceptedSendersData, ThrowOnError>) => { return (options?.client ?? client).delete<ExgMailboxRemoveUserAcceptedSendersResponse, ExgMailboxRemoveUserAcceptedSendersError, ThrowOnError>({
    ...options,
    url: '/exchange/mailboxes/{mailboxId}/accepted-senders'
}); };

/**
 * Get Mailbox Rejected Senders
 * Get mailbox rejected senders, method will return you list of mailbox rejected senders.
 */
export const exgMailboxGetUserRejectedSenders = <ThrowOnError extends boolean = false>(options: Options<ExgMailboxGetUserRejectedSendersData, ThrowOnError>) => { return (options?.client ?? client).get<ExgMailboxGetUserRejectedSendersResponse, ExgMailboxGetUserRejectedSendersError, ThrowOnError>({
    ...options,
    url: '/exchange/mailboxes/{mailboxId}/rejected-senders'
}); };

/**
 * Add Mailbox Rejected Senders
 * Add mailbox rejected senders, method will return you operation status.
 */
export const exgMailboxAddUserRejectedSenders = <ThrowOnError extends boolean = false>(options: Options<ExgMailboxAddUserRejectedSendersData, ThrowOnError>) => { return (options?.client ?? client).put<ExgMailboxAddUserRejectedSendersResponse, ExgMailboxAddUserRejectedSendersError, ThrowOnError>({
    ...options,
    url: '/exchange/mailboxes/{mailboxId}/rejected-senders'
}); };

/**
 * Remove Mailbox Rejected Senders
 * Remove mailbox rejected senders, method will return you operation status.
 */
export const exgMailboxRemoveUserRejectedSenders = <ThrowOnError extends boolean = false>(options: Options<ExgMailboxRemoveUserRejectedSendersData, ThrowOnError>) => { return (options?.client ?? client).delete<ExgMailboxRemoveUserRejectedSendersResponse, ExgMailboxRemoveUserRejectedSendersError, ThrowOnError>({
    ...options,
    url: '/exchange/mailboxes/{mailboxId}/rejected-senders'
}); };

/**
 * Get Mailbox Full Access Permission
 * Get mailbox full access permission, method will return you list of mailbox full access permissions.
 */
export const exgMailboxGetUserFullAccessPermission = <ThrowOnError extends boolean = false>(options: Options<ExgMailboxGetUserFullAccessPermissionData, ThrowOnError>) => { return (options?.client ?? client).get<ExgMailboxGetUserFullAccessPermissionResponse, ExgMailboxGetUserFullAccessPermissionError, ThrowOnError>({
    ...options,
    url: '/exchange/mailboxes/{mailboxId}/full-access-permissions'
}); };

/**
 * Add Mailbox Full Access Permission
 * Add mailbox full access permission, method will return you operation status.
 */
export const exgMailboxAddUserFullAccessPermission = <ThrowOnError extends boolean = false>(options: Options<ExgMailboxAddUserFullAccessPermissionData, ThrowOnError>) => { return (options?.client ?? client).put<ExgMailboxAddUserFullAccessPermissionResponse, ExgMailboxAddUserFullAccessPermissionError, ThrowOnError>({
    ...options,
    url: '/exchange/mailboxes/{mailboxId}/full-access-permissions'
}); };

/**
 * Remove Mailbox Full Access Permissions
 * Remove mailbox full access permissions, method will return you operation status.
 */
export const exgMailboxRemoveUserFullAccessPermission = <ThrowOnError extends boolean = false>(options: Options<ExgMailboxRemoveUserFullAccessPermissionData, ThrowOnError>) => { return (options?.client ?? client).delete<ExgMailboxRemoveUserFullAccessPermissionResponse, ExgMailboxRemoveUserFullAccessPermissionError, ThrowOnError>({
    ...options,
    url: '/exchange/mailboxes/{mailboxId}/full-access-permissions'
}); };

/**
 * Get Mailbox Send As Permission
 * Get mailbox send as permission, method will return you list of permissions.
 */
export const exgMailboxGetUserSendAsPermission = <ThrowOnError extends boolean = false>(options: Options<ExgMailboxGetUserSendAsPermissionData, ThrowOnError>) => { return (options?.client ?? client).get<ExgMailboxGetUserSendAsPermissionResponse, ExgMailboxGetUserSendAsPermissionError, ThrowOnError>({
    ...options,
    url: '/exchange/mailboxes/{mailboxId}/send-as-permissions'
}); };

/**
 * Add Mailbox Send As Permission
 * Add mailbox send as permission, method will return you operations status.
 */
export const exgMailboxAddUserSendAsPermission = <ThrowOnError extends boolean = false>(options: Options<ExgMailboxAddUserSendAsPermissionData, ThrowOnError>) => { return (options?.client ?? client).put<ExgMailboxAddUserSendAsPermissionResponse, ExgMailboxAddUserSendAsPermissionError, ThrowOnError>({
    ...options,
    url: '/exchange/mailboxes/{mailboxId}/send-as-permissions'
}); };

/**
 * Remove Mailbox Send As Permission
 * Remove mailbox send as permission, method will return you operations status.
 */
export const exgMailboxRemoveUserSendAsPermission = <ThrowOnError extends boolean = false>(options: Options<ExgMailboxRemoveUserSendAsPermissionData, ThrowOnError>) => { return (options?.client ?? client).delete<ExgMailboxRemoveUserSendAsPermissionResponse, ExgMailboxRemoveUserSendAsPermissionError, ThrowOnError>({
    ...options,
    url: '/exchange/mailboxes/{mailboxId}/send-as-permissions'
}); };

/**
 * Get Mailbox Forwarding Address
 * Get mailbox forwarding address, method will return you mailbox forwarding address.
 */
export const exgMailboxGetUserForwardingAddress = <ThrowOnError extends boolean = false>(options: Options<ExgMailboxGetUserForwardingAddressData, ThrowOnError>) => { return (options?.client ?? client).get<ExgMailboxGetUserForwardingAddressResponse, ExgMailboxGetUserForwardingAddressError, ThrowOnError>({
    ...options,
    url: '/exchange/mailboxes/{mailboxId}/forwarding-address'
}); };

/**
 * Update Mailbox Forwarding Address
 * Update mailbox forwarding address, method will return you mailbox forwarding address.
 */
export const exgMailboxUpdateUserForwardingAddress = <ThrowOnError extends boolean = false>(options: Options<ExgMailboxUpdateUserForwardingAddressData, ThrowOnError>) => { return (options?.client ?? client).put<ExgMailboxUpdateUserForwardingAddressResponse, ExgMailboxUpdateUserForwardingAddressError, ThrowOnError>({
    ...options,
    url: '/exchange/mailboxes/{mailboxId}/forwarding-address'
}); };

/**
 * Get Mailbox Stats
 * Get mailbox stats, method will return you mailbox stats.
 */
export const exgMailboxGetUserStatistics = <ThrowOnError extends boolean = false>(options: Options<ExgMailboxGetUserStatisticsData, ThrowOnError>) => { return (options?.client ?? client).get<ExgMailboxGetUserStatisticsResponse, ExgMailboxGetUserStatisticsError, ThrowOnError>({
    ...options,
    url: '/exchange/mailboxes/{mailboxId}/stats'
}); };

/**
 * Get Mailbox Litigation Hold Settings
 * Get mailbox litigation hold settings, method will return you mailbox litigation hold settings.
 */
export const exgMailboxGetMailboxLitigationHoldSettings = <ThrowOnError extends boolean = false>(options: Options<ExgMailboxGetMailboxLitigationHoldSettingsData, ThrowOnError>) => { return (options?.client ?? client).get<ExgMailboxGetMailboxLitigationHoldSettingsResponse, ExgMailboxGetMailboxLitigationHoldSettingsError, ThrowOnError>({
    ...options,
    url: '/exchange/mailboxes/{mailboxId}/litigation-hold'
}); };

/**
 * Update Mailbox Litigation Hold Settings
 * Update mailbox litigation hold settings, method will return you updated mailbox litigation hold settings.
 */
export const exgMailboxUpdateMailboxLitigationHoldSettings = <ThrowOnError extends boolean = false>(options: Options<ExgMailboxUpdateMailboxLitigationHoldSettingsData, ThrowOnError>) => { return (options?.client ?? client).put<ExgMailboxUpdateMailboxLitigationHoldSettingsResponse, ExgMailboxUpdateMailboxLitigationHoldSettingsError, ThrowOnError>({
    ...options,
    url: '/exchange/mailboxes/{mailboxId}/litigation-hold'
}); };

/**
 * Get All Distribution Lists Of User Mailbox
 * Get all distribution lists of user mailbox, method will return you distribution lists of user mailbox.
 */
export const exgMailboxGetAllListsOfUserMailbox = <ThrowOnError extends boolean = false>(options: Options<ExgMailboxGetAllListsOfUserMailboxData, ThrowOnError>) => { return (options?.client ?? client).get<ExgMailboxGetAllListsOfUserMailboxResponse, ExgMailboxGetAllListsOfUserMailboxError, ThrowOnError>({
    ...options,
    url: '/exchange/mailboxes/{mailboxId}/memberships'
}); };

/**
 * Add User Mailbox To Distrbution List
 * Add user mailbox to distrbution list, method will return you updated details of distribution list.
 */
export const exgMailboxAddUserMailboxToList = <ThrowOnError extends boolean = false>(options: Options<ExgMailboxAddUserMailboxToListData, ThrowOnError>) => { return (options?.client ?? client).put<ExgMailboxAddUserMailboxToListResponse, ExgMailboxAddUserMailboxToListError, ThrowOnError>({
    ...options,
    url: '/exchange/mailboxes/{mailboxId}/memberships'
}); };

/**
 * Remove User Mailbox From List
 * Remove user mailbox to distrbution list, method will return you updated details of distribution list.
 */
export const exgMailboxRemoveUserMailboxFromList = <ThrowOnError extends boolean = false>(options: Options<ExgMailboxRemoveUserMailboxFromListData, ThrowOnError>) => { return (options?.client ?? client).delete<ExgMailboxRemoveUserMailboxFromListResponse, ExgMailboxRemoveUserMailboxFromListError, ThrowOnError>({
    ...options,
    url: '/exchange/mailboxes/{mailboxId}/memberships'
}); };

/**
 * Get Archive Mailbox Settings
 * Get archive mailbox settings, method will return you list of archive mailbox settings.
 */
export const exgMailboxGetArchiveMailboxSettings = <ThrowOnError extends boolean = false>(options: Options<ExgMailboxGetArchiveMailboxSettingsData, ThrowOnError>) => { return (options?.client ?? client).get<ExgMailboxGetArchiveMailboxSettingsResponse, ExgMailboxGetArchiveMailboxSettingsError, ThrowOnError>({
    ...options,
    url: '/exchange/mailboxes/{mailboxId}/archive-mailbox'
}); };

/**
 * Update Archive Mailbox Details
 * Update archive mailbox, method will return you updated details of archive mailbox.
 */
export const exgMailboxUpdateArchiveMailbox = <ThrowOnError extends boolean = false>(options: Options<ExgMailboxUpdateArchiveMailboxData, ThrowOnError>) => { return (options?.client ?? client).put<ExgMailboxUpdateArchiveMailboxResponse, ExgMailboxUpdateArchiveMailboxError, ThrowOnError>({
    ...options,
    url: '/exchange/mailboxes/{mailboxId}/archive-mailbox'
}); };

/**
 * Add a new Archive Mailbox
 * Add archive mailbox, method will return you details of recently added archive mailbox.
 */
export const exgMailboxAddArchiveMailbox = <ThrowOnError extends boolean = false>(options: Options<ExgMailboxAddArchiveMailboxData, ThrowOnError>) => { return (options?.client ?? client).post<ExgMailboxAddArchiveMailboxResponse, ExgMailboxAddArchiveMailboxError, ThrowOnError>({
    ...options,
    url: '/exchange/mailboxes/{mailboxId}/archive-mailbox'
}); };

/**
 * Update Archive Mailbox Status
 * Update archive mailbox status, method will return you operation status.
 */
export const exgMailboxUpdateArchiveMailboxStatus = <ThrowOnError extends boolean = false>(options: Options<ExgMailboxUpdateArchiveMailboxStatusData, ThrowOnError>) => { return (options?.client ?? client).put<ExgMailboxUpdateArchiveMailboxStatusResponse, ExgMailboxUpdateArchiveMailboxStatusError, ThrowOnError>({
    ...options,
    url: '/exchange/mailboxes/{mailboxId}/archive-mailbox/enable-disable'
}); };

/**
 * Check Bulk Mailbox Feasibility
 * Check bulk mailbox feasibility, method will return you bulk mailbox list.
 */
export const exgMailboxCheckBulkMailboxFeasibility = <ThrowOnError extends boolean = false>(options: Options<ExgMailboxCheckBulkMailboxFeasibilityData, ThrowOnError>) => { return (options?.client ?? client).put<ExgMailboxCheckBulkMailboxFeasibilityResponse, ExgMailboxCheckBulkMailboxFeasibilityError, ThrowOnError>({
    ...options,
    url: '/exchange/mailboxes/{organizationId}/bulk/feasibility'
}); };

/**
 * Add Bulk Mailbox
 * Add bulk mailbox, method will return you details of recently added bulk mailbox.
 */
export const exgMailboxAddExgBulkMailbox = <ThrowOnError extends boolean = false>(options: Options<ExgMailboxAddExgBulkMailboxData, ThrowOnError>) => { return (options?.client ?? client).post<ExgMailboxAddExgBulkMailboxResponse, ExgMailboxAddExgBulkMailboxError, ThrowOnError>({
    ...options,
    url: '/exchange/mailboxes/bulk'
}); };

/**
 * Update Bulk Mailbox
 * Update bulk mailbox, method will return you updated details of bulk mailbox.
 */
export const exgMailboxUpdateExgBulkMailbox = <ThrowOnError extends boolean = false>(options: Options<ExgMailboxUpdateExgBulkMailboxData, ThrowOnError>) => { return (options?.client ?? client).put<ExgMailboxUpdateExgBulkMailboxResponse, ExgMailboxUpdateExgBulkMailboxError, ThrowOnError>({
    ...options,
    url: '/exchange/mailboxes/{organizationId}/bulk'
}); };

/**
 * Get Mailbox Auto Reply Configuration
 * Get mailbox auto reply configuration, method will return you updated details of bulk mailbox.
 */
export const exgMailboxGetMailboxAutoReplyConfiguration = <ThrowOnError extends boolean = false>(options: Options<ExgMailboxGetMailboxAutoReplyConfigurationData, ThrowOnError>) => { return (options?.client ?? client).get<ExgMailboxGetMailboxAutoReplyConfigurationResponse, ExgMailboxGetMailboxAutoReplyConfigurationError, ThrowOnError>({
    ...options,
    url: '/exchange/mailboxes/{mailboxId}/auto-reply'
}); };

/**
 * Set User Auto Reply Configuration
 * Set mailbox auto reply configuration, method will return you operation status.
 */
export const exgMailboxSetUserAutoReplyConfiguration = <ThrowOnError extends boolean = false>(options: Options<ExgMailboxSetUserAutoReplyConfigurationData, ThrowOnError>) => { return (options?.client ?? client).put<ExgMailboxSetUserAutoReplyConfigurationResponse, ExgMailboxSetUserAutoReplyConfigurationError, ThrowOnError>({
    ...options,
    url: '/exchange/mailboxes/{mailboxId}/auto-reply'
}); };

/**
 * Get All Exchange Distribution Lists
 * Get all exchange distribution lists, method will return you list of distribution list.
 */
export const exchangeDistributionListGetAllExchangeDistributionLists = <ThrowOnError extends boolean = false>(options?: Options<ExchangeDistributionListGetAllExchangeDistributionListsData, ThrowOnError>) => { return (options?.client ?? client).get<ExchangeDistributionListGetAllExchangeDistributionListsResponse, ExchangeDistributionListGetAllExchangeDistributionListsError, ThrowOnError>({
    ...options,
    url: '/exchange/distribution-lists'
}); };

/**
 * Add Exchange Distribution List
 * Add exchange distribution list, method will return you recently added distribution list details.
 */
export const exchangeDistributionListAddExchangeDistributionList = <ThrowOnError extends boolean = false>(options: Options<ExchangeDistributionListAddExchangeDistributionListData, ThrowOnError>) => { return (options?.client ?? client).post<ExchangeDistributionListAddExchangeDistributionListResponse, ExchangeDistributionListAddExchangeDistributionListError, ThrowOnError>({
    ...options,
    url: '/exchange/distribution-lists'
}); };

/**
 * Update Exchange Distribution List Administrator
 * Update exchange distribution list, method will return you operation status.
 */
export const exchangeDistributionListUpdateExchangeDlAdministrator = <ThrowOnError extends boolean = false>(options: Options<ExchangeDistributionListUpdateExchangeDlAdministratorData, ThrowOnError>) => { return (options?.client ?? client).put<ExchangeDistributionListUpdateExchangeDlAdministratorResponse, ExchangeDistributionListUpdateExchangeDlAdministratorError, ThrowOnError>({
    ...options,
    url: '/exchange/distribution-lists/{distributionlistsId}/administrator'
}); };

/**
 * Get Exchange Distribution List Details
 * Get exchange distribution list details, method will return you exchange distribution list details.
 */
export const exchangeDistributionListGetExchangeDlDetails = <ThrowOnError extends boolean = false>(options: Options<ExchangeDistributionListGetExchangeDlDetailsData, ThrowOnError>) => { return (options?.client ?? client).get<ExchangeDistributionListGetExchangeDlDetailsResponse, ExchangeDistributionListGetExchangeDlDetailsError, ThrowOnError>({
    ...options,
    url: '/exchange/distribution-lists/{distributionlistId}'
}); };

/**
 * Delete Exchange Distribution List
 * Delete exchange distribution list, method will return you operation status.
 */
export const exchangeDistributionListDeleteExchangeDistributionList = <ThrowOnError extends boolean = false>(options: Options<ExchangeDistributionListDeleteExchangeDistributionListData, ThrowOnError>) => { return (options?.client ?? client).delete<ExchangeDistributionListDeleteExchangeDistributionListResponse, ExchangeDistributionListDeleteExchangeDistributionListError, ThrowOnError>({
    ...options,
    url: '/exchange/distribution-lists/{distributionlistId}'
}); };

/**
 * Get Exchange Distribution List Members
 * Get exchange distribution list members, method will return you list of exchange distribution list members.
 */
export const exchangeDistributionListGetExchangeListMembers = <ThrowOnError extends boolean = false>(options: Options<ExchangeDistributionListGetExchangeListMembersData, ThrowOnError>) => { return (options?.client ?? client).get<ExchangeDistributionListGetExchangeListMembersResponse, ExchangeDistributionListGetExchangeListMembersError, ThrowOnError>({
    ...options,
    url: '/exchange/distribution-lists/{distributionlistsId}/members'
}); };

/**
 * Update Exchange Distribution List  Members
 * Update exchange distribution list members, method will return you operation status.
 */
export const exchangeDistributionListUpdateExchangeListMembers = <ThrowOnError extends boolean = false>(options: Options<ExchangeDistributionListUpdateExchangeListMembersData, ThrowOnError>) => { return (options?.client ?? client).put<ExchangeDistributionListUpdateExchangeListMembersResponse, ExchangeDistributionListUpdateExchangeListMembersError, ThrowOnError>({
    ...options,
    url: '/exchange/distribution-lists/{distributionlistsId}/members'
}); };

/**
 * Remove Exchange Distribution List Members
 * Remove exchange distribution list members, method will return you operation status.
 */
export const exchangeDistributionListRemoveListExchangeListMembers = <ThrowOnError extends boolean = false>(options: Options<ExchangeDistributionListRemoveListExchangeListMembersData, ThrowOnError>) => { return (options?.client ?? client).delete<ExchangeDistributionListRemoveListExchangeListMembersResponse, ExchangeDistributionListRemoveListExchangeListMembersError, ThrowOnError>({
    ...options,
    url: '/exchange/distribution-lists/{distributionlistsId}/members'
}); };

/**
 * Get Distribution List Accepted Senders
 * Get exchange distribution list accepted senders, method will return you list of exchange distribution list accepted senders.
 */
export const exchangeDistributionListGetListAcceptedSenders = <ThrowOnError extends boolean = false>(options: Options<ExchangeDistributionListGetListAcceptedSendersData, ThrowOnError>) => { return (options?.client ?? client).get<ExchangeDistributionListGetListAcceptedSendersResponse, ExchangeDistributionListGetListAcceptedSendersError, ThrowOnError>({
    ...options,
    url: '/exchange/distribution-lists/{distributionlistsId}/accepted-senders'
}); };

/**
 * Add Distribution List Accepted Senders
 * Add exchange distribution list accepted sender, method will return you operation status.
 */
export const exchangeDistributionListAddListAcceptedSenders = <ThrowOnError extends boolean = false>(options: Options<ExchangeDistributionListAddListAcceptedSendersData, ThrowOnError>) => { return (options?.client ?? client).put<ExchangeDistributionListAddListAcceptedSendersResponse, ExchangeDistributionListAddListAcceptedSendersError, ThrowOnError>({
    ...options,
    url: '/exchange/distribution-lists/{distributionlistsId}/accepted-senders'
}); };

/**
 * Remove Distribution List Accepted Senders
 * Remove exchange distribution list accepted sender, method will return you operation status.
 */
export const exchangeDistributionListRemoveListAcceptedSenders = <ThrowOnError extends boolean = false>(options: Options<ExchangeDistributionListRemoveListAcceptedSendersData, ThrowOnError>) => { return (options?.client ?? client).delete<ExchangeDistributionListRemoveListAcceptedSendersResponse, ExchangeDistributionListRemoveListAcceptedSendersError, ThrowOnError>({
    ...options,
    url: '/exchange/distribution-lists/{distributionlistsId}/accepted-senders'
}); };

/**
 * Get Distribution List Rejected Senders
 * Get exchange distribution list rejected senders, method will return you list of exchange distribution list rejected senders.
 */
export const exchangeDistributionListGetListRejectedSenders = <ThrowOnError extends boolean = false>(options: Options<ExchangeDistributionListGetListRejectedSendersData, ThrowOnError>) => { return (options?.client ?? client).get<ExchangeDistributionListGetListRejectedSendersResponse, ExchangeDistributionListGetListRejectedSendersError, ThrowOnError>({
    ...options,
    url: '/exchange/distribution-lists/{distributionlistsId}/rejected-senders'
}); };

/**
 * Add Distribution List Rejected Senders
 * Add exchange distribution list rejected senders, method will return you operation status.
 */
export const exchangeDistributionListAddListRejectedSenders = <ThrowOnError extends boolean = false>(options: Options<ExchangeDistributionListAddListRejectedSendersData, ThrowOnError>) => { return (options?.client ?? client).put<ExchangeDistributionListAddListRejectedSendersResponse, ExchangeDistributionListAddListRejectedSendersError, ThrowOnError>({
    ...options,
    url: '/exchange/distribution-lists/{distributionlistsId}/rejected-senders'
}); };

/**
 * Remove Distribution List Rejected Senders
 * Remove exchange distribution list rejected senders, method will return you operation status.
 */
export const exchangeDistributionListRemoveListRejectedSenders = <ThrowOnError extends boolean = false>(options: Options<ExchangeDistributionListRemoveListRejectedSendersData, ThrowOnError>) => { return (options?.client ?? client).delete<ExchangeDistributionListRemoveListRejectedSendersResponse, ExchangeDistributionListRemoveListRejectedSendersError, ThrowOnError>({
    ...options,
    url: '/exchange/distribution-lists/{distributionlistsId}/rejected-senders'
}); };

/**
 * Get Distribution List Send On Behalf Users
 * Get exchange distribution list send on behalf users, method will return you list of exchange distribution list send on behalf users.
 */
export const exchangeDistributionListGetListSendOnBehalfUsers = <ThrowOnError extends boolean = false>(options: Options<ExchangeDistributionListGetListSendOnBehalfUsersData, ThrowOnError>) => { return (options?.client ?? client).get<ExchangeDistributionListGetListSendOnBehalfUsersResponse, ExchangeDistributionListGetListSendOnBehalfUsersError, ThrowOnError>({
    ...options,
    url: '/exchange/distribution-lists/{distributionlistsId}/send-on-behalf'
}); };

/**
 * Add Distribution List Send On Behalf Users
 * Add exchange distribution list send on behalf user, method will return you operation status.
 */
export const exchangeDistributionListAddListSendOnBehalfUsers = <ThrowOnError extends boolean = false>(options: Options<ExchangeDistributionListAddListSendOnBehalfUsersData, ThrowOnError>) => { return (options?.client ?? client).put<ExchangeDistributionListAddListSendOnBehalfUsersResponse, ExchangeDistributionListAddListSendOnBehalfUsersError, ThrowOnError>({
    ...options,
    url: '/exchange/distribution-lists/{distributionlistsId}/send-on-behalf'
}); };

/**
 * Remove Distribution List Send On Behalf Users
 * Remove exchange distribution list send on behalf user, method will return you operation status.
 */
export const exchangeDistributionListRemoveListSendOnBehalfUsers = <ThrowOnError extends boolean = false>(options: Options<ExchangeDistributionListRemoveListSendOnBehalfUsersData, ThrowOnError>) => { return (options?.client ?? client).delete<ExchangeDistributionListRemoveListSendOnBehalfUsersResponse, ExchangeDistributionListRemoveListSendOnBehalfUsersError, ThrowOnError>({
    ...options,
    url: '/exchange/distribution-lists/{distributionlistsId}/send-on-behalf'
}); };

/**
 * Get Distribution List Email Addresses
 * Get exchange distribution list email addresses, method will return you list of exchange distribution list email addresses.
 */
export const exchangeDistributionListGetListEmailAddresses = <ThrowOnError extends boolean = false>(options: Options<ExchangeDistributionListGetListEmailAddressesData, ThrowOnError>) => { return (options?.client ?? client).get<ExchangeDistributionListGetListEmailAddressesResponse, ExchangeDistributionListGetListEmailAddressesError, ThrowOnError>({
    ...options,
    url: '/exchange/distribution-lists/{distributionlistsId}/email-addresses'
}); };

/**
 * Set Distribution List Primary Email Address
 * Set exchange distribution list email address, method will return you operation status.
 */
export const exchangeDistributionListSetListPrimaryEmailAddress = <ThrowOnError extends boolean = false>(options: Options<ExchangeDistributionListSetListPrimaryEmailAddressData, ThrowOnError>) => { return (options?.client ?? client).put<ExchangeDistributionListSetListPrimaryEmailAddressResponse, ExchangeDistributionListSetListPrimaryEmailAddressError, ThrowOnError>({
    ...options,
    url: '/exchange/distribution-lists/{distributionlistsId}/email-addresses'
}); };

/**
 * Add Distribution List Email Address
 * Add exchange distribution list email address, method will return you operation status.
 */
export const exchangeDistributionListAddListEmailAddress = <ThrowOnError extends boolean = false>(options: Options<ExchangeDistributionListAddListEmailAddressData, ThrowOnError>) => { return (options?.client ?? client).post<ExchangeDistributionListAddListEmailAddressResponse, ExchangeDistributionListAddListEmailAddressError, ThrowOnError>({
    ...options,
    url: '/exchange/distribution-lists/{distributionlistsId}/email-addresses'
}); };

/**
 * Delete Distribution List Email Address
 * Delete exchange distribution list email address, method will return you operation status.
 */
export const exchangeDistributionListDeleteListEmailAddress = <ThrowOnError extends boolean = false>(options: Options<ExchangeDistributionListDeleteListEmailAddressData, ThrowOnError>) => { return (options?.client ?? client).delete<ExchangeDistributionListDeleteListEmailAddressResponse, ExchangeDistributionListDeleteListEmailAddressError, ThrowOnError>({
    ...options,
    url: '/exchange/distribution-lists/{distributionlistsId}/email-addresses'
}); };

/**
 * Get Distribution List Properties
 * Get exchange distribution list properties, method will return you exchange distribution list properties.
 */
export const exchangeDistributionListGetListProperties = <ThrowOnError extends boolean = false>(options: Options<ExchangeDistributionListGetListPropertiesData, ThrowOnError>) => { return (options?.client ?? client).get<ExchangeDistributionListGetListPropertiesResponse, ExchangeDistributionListGetListPropertiesError, ThrowOnError>({
    ...options,
    url: '/exchange/distribution-lists/{distributionlistsId}/properties'
}); };

/**
 * Update Distribution List Settings
 * Update exchange distribution list settings, method will return you updated exchange distribution list settings.
 */
export const exchangeDistributionListUpdateListSettings = <ThrowOnError extends boolean = false>(options: Options<ExchangeDistributionListUpdateListSettingsData, ThrowOnError>) => { return (options?.client ?? client).put<ExchangeDistributionListUpdateListSettingsResponse, ExchangeDistributionListUpdateListSettingsError, ThrowOnError>({
    ...options,
    url: '/exchange/distribution-lists/{distributionlistsId}/properties'
}); };

/**
 * Get all Exchange Mail Contacts
 * Get all exchange mail contacts, method will return you list of mail contacts.
 */
export const exchangeMailContactGetAllExchangeMailContacts = <ThrowOnError extends boolean = false>(options?: Options<ExchangeMailContactGetAllExchangeMailContactsData, ThrowOnError>) => { return (options?.client ?? client).get<ExchangeMailContactGetAllExchangeMailContactsResponse, ExchangeMailContactGetAllExchangeMailContactsError, ThrowOnError>({
    ...options,
    url: '/exchange/mail-contacts'
}); };

/**
 * Add Exchange Mail Contact
 * Add exchange mail contact, method will return you recently added mail contact details.
 */
export const exchangeMailContactAddExchangeMailContact = <ThrowOnError extends boolean = false>(options: Options<ExchangeMailContactAddExchangeMailContactData, ThrowOnError>) => { return (options?.client ?? client).post<ExchangeMailContactAddExchangeMailContactResponse, ExchangeMailContactAddExchangeMailContactError, ThrowOnError>({
    ...options,
    url: '/exchange/mail-contacts'
}); };

/**
 * Get Exchange Mail Contact Details
 * Get exchange mail contact details, method will return you complete details of mail contact.
 */
export const exchangeMailContactGetExchangeMailContactDetails = <ThrowOnError extends boolean = false>(options: Options<ExchangeMailContactGetExchangeMailContactDetailsData, ThrowOnError>) => { return (options?.client ?? client).get<ExchangeMailContactGetExchangeMailContactDetailsResponse, ExchangeMailContactGetExchangeMailContactDetailsError, ThrowOnError>({
    ...options,
    url: '/exchange/mail-contacts/{mailContactId}'
}); };

/**
 * Delete Mail Contact
 * Delete exchange mail contact, method will return you operation status.
 */
export const exchangeMailContactDeleteMailContact = <ThrowOnError extends boolean = false>(options: Options<ExchangeMailContactDeleteMailContactData, ThrowOnError>) => { return (options?.client ?? client).delete<ExchangeMailContactDeleteMailContactResponse, ExchangeMailContactDeleteMailContactError, ThrowOnError>({
    ...options,
    url: '/exchange/mail-contacts/{mailContactId}'
}); };

/**
 * Get Mail Contact Accepted Senders
 * Get exchange mail contact accepted senders, method will return you list of mail contact accepted senders.
 */
export const exchangeMailContactGetMailContactAcceptedSenders = <ThrowOnError extends boolean = false>(options: Options<ExchangeMailContactGetMailContactAcceptedSendersData, ThrowOnError>) => { return (options?.client ?? client).get<ExchangeMailContactGetMailContactAcceptedSendersResponse, ExchangeMailContactGetMailContactAcceptedSendersError, ThrowOnError>({
    ...options,
    url: '/exchange/mail-contacts/{mailContactId}/accepted-senders'
}); };

/**
 * Add Mail Contact Accepted Senders
 * Add exchange mail contact accepted senders, method will return you operation status.
 */
export const exchangeMailContactAddMailContactAcceptedSenders = <ThrowOnError extends boolean = false>(options: Options<ExchangeMailContactAddMailContactAcceptedSendersData, ThrowOnError>) => { return (options?.client ?? client).put<ExchangeMailContactAddMailContactAcceptedSendersResponse, ExchangeMailContactAddMailContactAcceptedSendersError, ThrowOnError>({
    ...options,
    url: '/exchange/mail-contacts/{mailContactId}/accepted-senders'
}); };

/**
 * Remove Mail Contact Accepted Senders
 * Remove exchange mail contact accepted senders, method will return you operation status.
 */
export const exchangeMailContactRemoveMailContactAcceptedSenders = <ThrowOnError extends boolean = false>(options: Options<ExchangeMailContactRemoveMailContactAcceptedSendersData, ThrowOnError>) => { return (options?.client ?? client).delete<ExchangeMailContactRemoveMailContactAcceptedSendersResponse, ExchangeMailContactRemoveMailContactAcceptedSendersError, ThrowOnError>({
    ...options,
    url: '/exchange/mail-contacts/{mailContactId}/accepted-senders'
}); };

/**
 * Get Mail Contact Rejected Senders
 * Get exchange mail contact rejected senders, method will return you list of exchange mail contact rejected senders.
 */
export const exchangeMailContactGetMailContactRejectedSenders = <ThrowOnError extends boolean = false>(options: Options<ExchangeMailContactGetMailContactRejectedSendersData, ThrowOnError>) => { return (options?.client ?? client).get<ExchangeMailContactGetMailContactRejectedSendersResponse, ExchangeMailContactGetMailContactRejectedSendersError, ThrowOnError>({
    ...options,
    url: '/exchange/mail-contacts/{mailContactId}/rejected-senders'
}); };

/**
 * Add Mail Contact Rejected Senders
 * Add exchange mail contact rejected senders, method will return you operation status.
 */
export const exchangeMailContactAddMailContactRejectedSenders = <ThrowOnError extends boolean = false>(options: Options<ExchangeMailContactAddMailContactRejectedSendersData, ThrowOnError>) => { return (options?.client ?? client).put<ExchangeMailContactAddMailContactRejectedSendersResponse, ExchangeMailContactAddMailContactRejectedSendersError, ThrowOnError>({
    ...options,
    url: '/exchange/mail-contacts/{mailContactId}/rejected-senders'
}); };

/**
 * Remove Mail Contact Rejected Senders
 * Remove exchange mail contact rejected senders, method will return you operation status.
 */
export const exchangeMailContactRemoveMailContactRejectedSenders = <ThrowOnError extends boolean = false>(options: Options<ExchangeMailContactRemoveMailContactRejectedSendersData, ThrowOnError>) => { return (options?.client ?? client).delete<ExchangeMailContactRemoveMailContactRejectedSendersResponse, ExchangeMailContactRemoveMailContactRejectedSendersError, ThrowOnError>({
    ...options,
    url: '/exchange/mail-contacts/{mailContactId}/rejected-senders'
}); };

/**
 * Get Mail Contact Email Addresses
 * Get exchange mail contact email addresses, method will return you list of mail contact email addresses.
 */
export const exchangeMailContactGetMailContactEmailAddresses = <ThrowOnError extends boolean = false>(options: Options<ExchangeMailContactGetMailContactEmailAddressesData, ThrowOnError>) => { return (options?.client ?? client).get<ExchangeMailContactGetMailContactEmailAddressesResponse, ExchangeMailContactGetMailContactEmailAddressesError, ThrowOnError>({
    ...options,
    url: '/exchange/mail-contacts/{mailContactId}/email-addresses'
}); };

/**
 * Add Mail Contact Email Address
 * Add exchange mail contact email address, method will return you operation status.
 */
export const exchangeMailContactAddMailContactEmailAddress = <ThrowOnError extends boolean = false>(options: Options<ExchangeMailContactAddMailContactEmailAddressData, ThrowOnError>) => { return (options?.client ?? client).post<ExchangeMailContactAddMailContactEmailAddressResponse, ExchangeMailContactAddMailContactEmailAddressError, ThrowOnError>({
    ...options,
    url: '/exchange/mail-contacts/{mailContactId}/email-addresses'
}); };

/**
 * Delete Mail Contact Email Address
 * Delete exchange mail contact email address, method will return you operation status.
 */
export const exchangeMailContactDeleteMailContactEmailAddress = <ThrowOnError extends boolean = false>(options: Options<ExchangeMailContactDeleteMailContactEmailAddressData, ThrowOnError>) => { return (options?.client ?? client).delete<ExchangeMailContactDeleteMailContactEmailAddressResponse, ExchangeMailContactDeleteMailContactEmailAddressError, ThrowOnError>({
    ...options,
    url: '/exchange/mail-contacts/{mailContactId}/email-addresses'
}); };

/**
 * Set Mail Contact Primary Email Address
 * Set exchange mail contact primary email address, method will return you operation status.
 */
export const exchangeMailContactSetMailContactPrimaryEmailAddress = <ThrowOnError extends boolean = false>(options: Options<ExchangeMailContactSetMailContactPrimaryEmailAddressData, ThrowOnError>) => { return (options?.client ?? client).put<ExchangeMailContactSetMailContactPrimaryEmailAddressResponse, ExchangeMailContactSetMailContactPrimaryEmailAddressError, ThrowOnError>({
    ...options,
    url: '/exchange/mail-contacts/{mailContactId}/email-addresses/primary'
}); };

/**
 * Set Mail Contact External Email Address
 * Set exchange mail contact external email address, method will return you operation status.
 */
export const exchangeMailContactSetMailContactExternalEmailAddress = <ThrowOnError extends boolean = false>(options: Options<ExchangeMailContactSetMailContactExternalEmailAddressData, ThrowOnError>) => { return (options?.client ?? client).put<ExchangeMailContactSetMailContactExternalEmailAddressResponse, ExchangeMailContactSetMailContactExternalEmailAddressError, ThrowOnError>({
    ...options,
    url: '/exchange/mail-contacts/{mailContactId}/email-addresses/external'
}); };

/**
 * Get Mail Contact General Settings
 * Get exchange mail contact general settings, method will return you complete exchange mail contact general settings.
 */
export const exchangeMailContactGetMailContactGeneralSettings = <ThrowOnError extends boolean = false>(options: Options<ExchangeMailContactGetMailContactGeneralSettingsData, ThrowOnError>) => { return (options?.client ?? client).get<ExchangeMailContactGetMailContactGeneralSettingsResponse, ExchangeMailContactGetMailContactGeneralSettingsError, ThrowOnError>({
    ...options,
    url: '/exchange/mail-contacts/{mailContactId}/general-properties'
}); };

/**
 * Update Mail Contact General Settings
 * Update exchange mail contact general settings, method will return you operation status.
 */
export const exchangeMailContactUpdateMailContactGeneralSettings = <ThrowOnError extends boolean = false>(options: Options<ExchangeMailContactUpdateMailContactGeneralSettingsData, ThrowOnError>) => { return (options?.client ?? client).put<ExchangeMailContactUpdateMailContactGeneralSettingsResponse, ExchangeMailContactUpdateMailContactGeneralSettingsError, ThrowOnError>({
    ...options,
    url: '/exchange/mail-contacts/{mailContactId}/general-properties'
}); };

/**
 * Get Mail Contact Advanced Settings
 * Get exchange mail contact advanced settings, method will return you exchange mail contact advanced settings.
 */
export const exchangeMailContactGetMailContactAdvancedSettings = <ThrowOnError extends boolean = false>(options: Options<ExchangeMailContactGetMailContactAdvancedSettingsData, ThrowOnError>) => { return (options?.client ?? client).get<ExchangeMailContactGetMailContactAdvancedSettingsResponse, ExchangeMailContactGetMailContactAdvancedSettingsError, ThrowOnError>({
    ...options,
    url: '/exchange/mail-contacts/{mailContactId}/advanced-properties'
}); };

/**
 * Update Mail Contact Advanced Settings
 * Update exchange mail contact advanced settings, method will return you operation status.
 */
export const exchangeMailContactUpdateMailContactAdvancedSettings = <ThrowOnError extends boolean = false>(options: Options<ExchangeMailContactUpdateMailContactAdvancedSettingsData, ThrowOnError>) => { return (options?.client ?? client).put<ExchangeMailContactUpdateMailContactAdvancedSettingsResponse, ExchangeMailContactUpdateMailContactAdvancedSettingsError, ThrowOnError>({
    ...options,
    url: '/exchange/mail-contacts/{mailContactId}/advanced-properties'
}); };

/**
 * Update Mail Contact
 * Update exchange mail contact, method will return you updated details of mail contact.
 */
export const exchangeMailContactUpdateMailContact = <ThrowOnError extends boolean = false>(options: Options<ExchangeMailContactUpdateMailContactData, ThrowOnError>) => { return (options?.client ?? client).put<ExchangeMailContactUpdateMailContactResponse, ExchangeMailContactUpdateMailContactError, ThrowOnError>({
    ...options,
    url: '/exchange/mail-contacts/{mailContactId}/enable-disable'
}); };

/**
 * Get all Resource Mailboxes
 * Get all resource mailboxes, method will return you list of resource mailboxes.
 */
export const exchangeResourceMailboxGetAllExchangeResourceMailboxs = <ThrowOnError extends boolean = false>(options?: Options<ExchangeResourceMailboxGetAllExchangeResourceMailboxsData, ThrowOnError>) => { return (options?.client ?? client).get<ExchangeResourceMailboxGetAllExchangeResourceMailboxsResponse, ExchangeResourceMailboxGetAllExchangeResourceMailboxsError, ThrowOnError>({
    ...options,
    url: '/exchange/resource-mailboxes'
}); };

/**
 * Add a new Resource Mailbox
 * Add resource mailbox, method will return you details of recently added resource mailbox.
 */
export const exchangeResourceMailboxAddExchangeResourceMailbox = <ThrowOnError extends boolean = false>(options: Options<ExchangeResourceMailboxAddExchangeResourceMailboxData, ThrowOnError>) => { return (options?.client ?? client).post<ExchangeResourceMailboxAddExchangeResourceMailboxResponse, ExchangeResourceMailboxAddExchangeResourceMailboxError, ThrowOnError>({
    ...options,
    url: '/exchange/resource-mailboxes'
}); };

/**
 * Get Resource Mailbox Details
 * Get resource mailbox details, method will return you resource mailbox details.
 */
export const exchangeResourceMailboxGetResourceMailboxDetails = <ThrowOnError extends boolean = false>(options: Options<ExchangeResourceMailboxGetResourceMailboxDetailsData, ThrowOnError>) => { return (options?.client ?? client).get<ExchangeResourceMailboxGetResourceMailboxDetailsResponse, ExchangeResourceMailboxGetResourceMailboxDetailsError, ThrowOnError>({
    ...options,
    url: '/exchange/resource-mailboxes/{exgMailboxId}'
}); };

/**
 * Delete Resource Mailbox
 * Delete resource mailbox, method will return you operation status.
 */
export const exchangeResourceMailboxDeleteExchangeResourceMailbox = <ThrowOnError extends boolean = false>(options: Options<ExchangeResourceMailboxDeleteExchangeResourceMailboxData, ThrowOnError>) => { return (options?.client ?? client).delete<ExchangeResourceMailboxDeleteExchangeResourceMailboxResponse, ExchangeResourceMailboxDeleteExchangeResourceMailboxError, ThrowOnError>({
    ...options,
    url: '/exchange/resource-mailboxes/{exgMailboxId}'
}); };

/**
 * Update Resource Mailbox
 * Update resource mailbox, method will return you updated details of resource mailbox.
 */
export const exchangeResourceMailboxUpdateExchangeResourceMailbox = <ThrowOnError extends boolean = false>(options: Options<ExchangeResourceMailboxUpdateExchangeResourceMailboxData, ThrowOnError>) => { return (options?.client ?? client).put<ExchangeResourceMailboxUpdateExchangeResourceMailboxResponse, ExchangeResourceMailboxUpdateExchangeResourceMailboxError, ThrowOnError>({
    ...options,
    url: '/exchange/resource-mailboxes/{exgMailboxId}/enable-disable'
}); };

/**
 * Get Archive Resource Mailbox Settings
 * Get archive resource mailbox settings, method will return you list of archive resource mailbox settings.
 */
export const exchangeResourceMailboxGetArchiveResourceMailboxSettings = <ThrowOnError extends boolean = false>(options: Options<ExchangeResourceMailboxGetArchiveResourceMailboxSettingsData, ThrowOnError>) => { return (options?.client ?? client).get<ExchangeResourceMailboxGetArchiveResourceMailboxSettingsResponse, ExchangeResourceMailboxGetArchiveResourceMailboxSettingsError, ThrowOnError>({
    ...options,
    url: '/exchange/resource-mailboxes/{mailboxId}/archive-mailbox'
}); };

/**
 * Update Archive Resource Mailbox
 * Update archive resource mailbox, method will return you updated details of archive resource mailbox.
 */
export const exchangeResourceMailboxUpdateArchiveResourceMailbox = <ThrowOnError extends boolean = false>(options: Options<ExchangeResourceMailboxUpdateArchiveResourceMailboxData, ThrowOnError>) => { return (options?.client ?? client).put<ExchangeResourceMailboxUpdateArchiveResourceMailboxResponse, ExchangeResourceMailboxUpdateArchiveResourceMailboxError, ThrowOnError>({
    ...options,
    url: '/exchange/resource-mailboxes/{mailboxId}/archive-mailbox'
}); };

/**
 * Add a new Archive Resource Mailbox
 * Add archive resource mailbox, method will return you details of recently added archive resource mailbox.
 */
export const exchangeResourceMailboxAddArchiveResourceMailbox = <ThrowOnError extends boolean = false>(options: Options<ExchangeResourceMailboxAddArchiveResourceMailboxData, ThrowOnError>) => { return (options?.client ?? client).post<ExchangeResourceMailboxAddArchiveResourceMailboxResponse, ExchangeResourceMailboxAddArchiveResourceMailboxError, ThrowOnError>({
    ...options,
    url: '/exchange/resource-mailboxes/{mailboxId}/archive-mailbox'
}); };

/**
 * Update Archive Resource Mailbox Status
 * Update archive resource mailbox status, method will return you operation status.
 */
export const exchangeResourceMailboxUpdateArchiveResourceMailboxStatus = <ThrowOnError extends boolean = false>(options: Options<ExchangeResourceMailboxUpdateArchiveResourceMailboxStatusData, ThrowOnError>) => { return (options?.client ?? client).put<ExchangeResourceMailboxUpdateArchiveResourceMailboxStatusResponse, ExchangeResourceMailboxUpdateArchiveResourceMailboxStatusError, ThrowOnError>({
    ...options,
    url: '/exchange/resource-mailboxes/{mailboxId}/archive-mailbox/enable-disable'
}); };

/**
 * Get Resource Mailbox General Properties
 * Get resource mailbox general properties, method will return you list of resource mailbox general properties.
 */
export const exchangeResourceMailboxGetExchangeResourceMailboxGeneralProperties = <ThrowOnError extends boolean = false>(options: Options<ExchangeResourceMailboxGetExchangeResourceMailboxGeneralPropertiesData, ThrowOnError>) => { return (options?.client ?? client).get<ExchangeResourceMailboxGetExchangeResourceMailboxGeneralPropertiesResponse, ExchangeResourceMailboxGetExchangeResourceMailboxGeneralPropertiesError, ThrowOnError>({
    ...options,
    url: '/exchange/resource-mailboxes/{mailboxId}/general-properties'
}); };

/**
 * Update Resource Mailbox General Properties
 * Update resource mailbox general properties, method will return you operation status.
 */
export const exchangeResourceMailboxUpdateExchangeResourceMailboxGeneralProperties = <ThrowOnError extends boolean = false>(options: Options<ExchangeResourceMailboxUpdateExchangeResourceMailboxGeneralPropertiesData, ThrowOnError>) => { return (options?.client ?? client).put<ExchangeResourceMailboxUpdateExchangeResourceMailboxGeneralPropertiesResponse, ExchangeResourceMailboxUpdateExchangeResourceMailboxGeneralPropertiesError, ThrowOnError>({
    ...options,
    url: '/exchange/resource-mailboxes/{mailboxId}/general-properties'
}); };

/**
 * Get Resource Mailbox Advanced Properties
 * Get resource mailbox advanced properties, method will return you list of resource mailbox advanced properties.
 */
export const exchangeResourceMailboxGetExchangeResourceMailboxAdvancedProperties = <ThrowOnError extends boolean = false>(options: Options<ExchangeResourceMailboxGetExchangeResourceMailboxAdvancedPropertiesData, ThrowOnError>) => { return (options?.client ?? client).get<ExchangeResourceMailboxGetExchangeResourceMailboxAdvancedPropertiesResponse, ExchangeResourceMailboxGetExchangeResourceMailboxAdvancedPropertiesError, ThrowOnError>({
    ...options,
    url: '/exchange/resource-mailboxes/{mailboxId}/advanced-properties'
}); };

/**
 * Update Resource Mailbox Advanced Properties
 * Update resource mailbox advanced properties, method will return you updated resource mailbox advanced properties.
 */
export const exchangeResourceMailboxUpdateExchangeResourceMailboxAdvancedProperties = <ThrowOnError extends boolean = false>(options: Options<ExchangeResourceMailboxUpdateExchangeResourceMailboxAdvancedPropertiesData, ThrowOnError>) => { return (options?.client ?? client).put<ExchangeResourceMailboxUpdateExchangeResourceMailboxAdvancedPropertiesResponse, ExchangeResourceMailboxUpdateExchangeResourceMailboxAdvancedPropertiesError, ThrowOnError>({
    ...options,
    url: '/exchange/resource-mailboxes/{mailboxId}/advanced-properties'
}); };

/**
 * Get Resource Mailbox Email Addresses
 * Get resource mailbox email addresses, method will return you list of resource mailbox email addresses.
 */
export const exchangeResourceMailboxGetResourceMailboxEmailAddresses = <ThrowOnError extends boolean = false>(options: Options<ExchangeResourceMailboxGetResourceMailboxEmailAddressesData, ThrowOnError>) => { return (options?.client ?? client).get<ExchangeResourceMailboxGetResourceMailboxEmailAddressesResponse, ExchangeResourceMailboxGetResourceMailboxEmailAddressesError, ThrowOnError>({
    ...options,
    url: '/exchange/resource-mailboxes/{mailboxId}/email-addresses'
}); };

/**
 * Set Primary Email Address
 * Set primary email address, method will return you operation status.
 */
export const exchangeResourceMailboxSetPrimaryEmailAddresses = <ThrowOnError extends boolean = false>(options: Options<ExchangeResourceMailboxSetPrimaryEmailAddressesData, ThrowOnError>) => { return (options?.client ?? client).put<ExchangeResourceMailboxSetPrimaryEmailAddressesResponse, ExchangeResourceMailboxSetPrimaryEmailAddressesError, ThrowOnError>({
    ...options,
    url: '/exchange/resource-mailboxes/{mailboxId}/email-addresses'
}); };

/**
 * Add Resource Mailbox Email Address
 * Add resource mailbox email address, method will return you operation status.
 */
export const exchangeResourceMailboxAddResourceMailboxEmailAddresses = <ThrowOnError extends boolean = false>(options: Options<ExchangeResourceMailboxAddResourceMailboxEmailAddressesData, ThrowOnError>) => { return (options?.client ?? client).post<ExchangeResourceMailboxAddResourceMailboxEmailAddressesResponse, ExchangeResourceMailboxAddResourceMailboxEmailAddressesError, ThrowOnError>({
    ...options,
    url: '/exchange/resource-mailboxes/{mailboxId}/email-addresses'
}); };

/**
 * Delete Resource Mailbox Email Address
 * Delete resource mailbox email address, method will return you operation status.
 */
export const exchangeResourceMailboxDeleteResourceMailboxEmailAddresses = <ThrowOnError extends boolean = false>(options: Options<ExchangeResourceMailboxDeleteResourceMailboxEmailAddressesData, ThrowOnError>) => { return (options?.client ?? client).delete<ExchangeResourceMailboxDeleteResourceMailboxEmailAddressesResponse, ExchangeResourceMailboxDeleteResourceMailboxEmailAddressesError, ThrowOnError>({
    ...options,
    url: '/exchange/resource-mailboxes/{mailboxId}/email-addresses'
}); };

/**
 * Get Resource Mailbox Send On Behalf Users
 * Get resource mailbox send on behalf users, method will return you list of resource mailbox send on behalf users.
 */
export const exchangeResourceMailboxGetResourceMailboxSendOnBehalfUsers = <ThrowOnError extends boolean = false>(options: Options<ExchangeResourceMailboxGetResourceMailboxSendOnBehalfUsersData, ThrowOnError>) => { return (options?.client ?? client).get<ExchangeResourceMailboxGetResourceMailboxSendOnBehalfUsersResponse, ExchangeResourceMailboxGetResourceMailboxSendOnBehalfUsersError, ThrowOnError>({
    ...options,
    url: '/exchange/resource-mailboxes/{mailboxId}/send-on-behalf'
}); };

/**
 * Add Resource Mailbox Send On Behalf Users
 * Add resource mailbox send on behalf users, method will return you operation status.
 */
export const exchangeResourceMailboxAddResourceMailboxSendOnBehalfUsers = <ThrowOnError extends boolean = false>(options: Options<ExchangeResourceMailboxAddResourceMailboxSendOnBehalfUsersData, ThrowOnError>) => { return (options?.client ?? client).put<ExchangeResourceMailboxAddResourceMailboxSendOnBehalfUsersResponse, ExchangeResourceMailboxAddResourceMailboxSendOnBehalfUsersError, ThrowOnError>({
    ...options,
    url: '/exchange/resource-mailboxes/{mailboxId}/send-on-behalf'
}); };

/**
 * Remove Resource Mailbox Send On Behalf Users
 * Remove resource mailbox send on behalf users, method will return you operation status.
 */
export const exchangeResourceMailboxRemoveResourceMailboxSendOnBehalfUsers = <ThrowOnError extends boolean = false>(options: Options<ExchangeResourceMailboxRemoveResourceMailboxSendOnBehalfUsersData, ThrowOnError>) => { return (options?.client ?? client).delete<ExchangeResourceMailboxRemoveResourceMailboxSendOnBehalfUsersResponse, ExchangeResourceMailboxRemoveResourceMailboxSendOnBehalfUsersError, ThrowOnError>({
    ...options,
    url: '/exchange/resource-mailboxes/{mailboxId}/send-on-behalf'
}); };

/**
 * Get Resource Mailbox Accepted Senders
 * Get resource mailbox accepted senders, method will return you list of resource mailbox accepted senders.
 */
export const exchangeResourceMailboxGetResourceMailboxAcceptedSenders = <ThrowOnError extends boolean = false>(options: Options<ExchangeResourceMailboxGetResourceMailboxAcceptedSendersData, ThrowOnError>) => { return (options?.client ?? client).get<ExchangeResourceMailboxGetResourceMailboxAcceptedSendersResponse, ExchangeResourceMailboxGetResourceMailboxAcceptedSendersError, ThrowOnError>({
    ...options,
    url: '/exchange/resource-mailboxes/{mailboxId}/accepted-senders'
}); };

/**
 * Add Resource Mailbox Accepted Senders
 * Add resource mailbox accepted senders, method will return you operation status.
 */
export const exchangeResourceMailboxAddResourceMailboxAcceptedSenders = <ThrowOnError extends boolean = false>(options: Options<ExchangeResourceMailboxAddResourceMailboxAcceptedSendersData, ThrowOnError>) => { return (options?.client ?? client).put<ExchangeResourceMailboxAddResourceMailboxAcceptedSendersResponse, ExchangeResourceMailboxAddResourceMailboxAcceptedSendersError, ThrowOnError>({
    ...options,
    url: '/exchange/resource-mailboxes/{mailboxId}/accepted-senders'
}); };

/**
 * Remove Resource Mailbox Accepted Senders
 * Remove resource mailbox accepted senders, method will return you operation status.
 */
export const exchangeResourceMailboxRemoveResourceMailboxAcceptedSenders = <ThrowOnError extends boolean = false>(options: Options<ExchangeResourceMailboxRemoveResourceMailboxAcceptedSendersData, ThrowOnError>) => { return (options?.client ?? client).delete<ExchangeResourceMailboxRemoveResourceMailboxAcceptedSendersResponse, ExchangeResourceMailboxRemoveResourceMailboxAcceptedSendersError, ThrowOnError>({
    ...options,
    url: '/exchange/resource-mailboxes/{mailboxId}/accepted-senders'
}); };

/**
 * Get Resource Mailbox Rejected Senders
 * Get resource mailbox rejected senders, method will return you list of resource mailbox rejected senders.
 */
export const exchangeResourceMailboxGetResourceMailboxRejectedSenders = <ThrowOnError extends boolean = false>(options: Options<ExchangeResourceMailboxGetResourceMailboxRejectedSendersData, ThrowOnError>) => { return (options?.client ?? client).get<ExchangeResourceMailboxGetResourceMailboxRejectedSendersResponse, ExchangeResourceMailboxGetResourceMailboxRejectedSendersError, ThrowOnError>({
    ...options,
    url: '/exchange/resource-mailboxes/{mailboxId}/rejected-senders'
}); };

/**
 * Add Resource Mailbox Rejected Senders
 * Add resource mailbox rejected senders, method will return you operation status.
 */
export const exchangeResourceMailboxAddResourceMailboxRejectedSenders = <ThrowOnError extends boolean = false>(options: Options<ExchangeResourceMailboxAddResourceMailboxRejectedSendersData, ThrowOnError>) => { return (options?.client ?? client).put<ExchangeResourceMailboxAddResourceMailboxRejectedSendersResponse, ExchangeResourceMailboxAddResourceMailboxRejectedSendersError, ThrowOnError>({
    ...options,
    url: '/exchange/resource-mailboxes/{mailboxId}/rejected-senders'
}); };

/**
 * Remove Resource Mailbox Rejected Senders
 * Remove resource mailbox rejected senders, method will return you operation status.
 */
export const exchangeResourceMailboxRemoveResourceMailboxRejectedSenders = <ThrowOnError extends boolean = false>(options: Options<ExchangeResourceMailboxRemoveResourceMailboxRejectedSendersData, ThrowOnError>) => { return (options?.client ?? client).delete<ExchangeResourceMailboxRemoveResourceMailboxRejectedSendersResponse, ExchangeResourceMailboxRemoveResourceMailboxRejectedSendersError, ThrowOnError>({
    ...options,
    url: '/exchange/resource-mailboxes/{mailboxId}/rejected-senders'
}); };

/**
 * Get Mailbox Full Access Permissions
 * Get mailbox full access permissions, method will return you list of mailbox full access permissions.
 */
export const exchangeResourceMailboxGetUserFullAccessPermission = <ThrowOnError extends boolean = false>(options: Options<ExchangeResourceMailboxGetUserFullAccessPermissionData, ThrowOnError>) => { return (options?.client ?? client).get<ExchangeResourceMailboxGetUserFullAccessPermissionResponse, ExchangeResourceMailboxGetUserFullAccessPermissionError, ThrowOnError>({
    ...options,
    url: '/exchange/resource-mailboxes/{mailboxId}/full-access-permissions'
}); };

/**
 * Add Mailbox Full Access Permission
 * Add mailbox full access permission, method will return you operation status.
 */
export const exchangeResourceMailboxAddUserFullAccessPermission = <ThrowOnError extends boolean = false>(options: Options<ExchangeResourceMailboxAddUserFullAccessPermissionData, ThrowOnError>) => { return (options?.client ?? client).put<ExchangeResourceMailboxAddUserFullAccessPermissionResponse, ExchangeResourceMailboxAddUserFullAccessPermissionError, ThrowOnError>({
    ...options,
    url: '/exchange/resource-mailboxes/{mailboxId}/full-access-permissions'
}); };

/**
 * Remove Mailbox Full Access Permission
 * Remove mailbox full access permission, method will return you operation status.
 */
export const exchangeResourceMailboxRemoveUserFullAccessPermission = <ThrowOnError extends boolean = false>(options: Options<ExchangeResourceMailboxRemoveUserFullAccessPermissionData, ThrowOnError>) => { return (options?.client ?? client).delete<ExchangeResourceMailboxRemoveUserFullAccessPermissionResponse, ExchangeResourceMailboxRemoveUserFullAccessPermissionError, ThrowOnError>({
    ...options,
    url: '/exchange/resource-mailboxes/{mailboxId}/full-access-permissions'
}); };

/**
 * Get Mailbox Send As Permissions
 * Get mailbox send as permissions, method will return you list of mailbox send as permissions.
 */
export const exchangeResourceMailboxGetUserSendAsPermission = <ThrowOnError extends boolean = false>(options: Options<ExchangeResourceMailboxGetUserSendAsPermissionData, ThrowOnError>) => { return (options?.client ?? client).get<ExchangeResourceMailboxGetUserSendAsPermissionResponse, ExchangeResourceMailboxGetUserSendAsPermissionError, ThrowOnError>({
    ...options,
    url: '/exchange/resource-mailboxes/{mailboxId}/send-as-permissions'
}); };

/**
 * Add Mailbox Send As Permission
 * Add mailbox send as permission, method will return you operation status.
 */
export const exchangeResourceMailboxAddUserSendAsPermission = <ThrowOnError extends boolean = false>(options: Options<ExchangeResourceMailboxAddUserSendAsPermissionData, ThrowOnError>) => { return (options?.client ?? client).put<ExchangeResourceMailboxAddUserSendAsPermissionResponse, ExchangeResourceMailboxAddUserSendAsPermissionError, ThrowOnError>({
    ...options,
    url: '/exchange/resource-mailboxes/{mailboxId}/send-as-permissions'
}); };

/**
 * Remove Mailbox Send As Permission
 * Remove mailbox send as permission, method will return you operation status.
 */
export const exchangeResourceMailboxRemoveUserSendAsPermission = <ThrowOnError extends boolean = false>(options: Options<ExchangeResourceMailboxRemoveUserSendAsPermissionData, ThrowOnError>) => { return (options?.client ?? client).delete<ExchangeResourceMailboxRemoveUserSendAsPermissionResponse, ExchangeResourceMailboxRemoveUserSendAsPermissionError, ThrowOnError>({
    ...options,
    url: '/exchange/resource-mailboxes/{mailboxId}/send-as-permissions'
}); };

/**
 * Get Mailbox Forwarding Address
 * Get mailbox forwarding Address, method will return you mailbox forwarding address.
 */
export const exchangeResourceMailboxGetUserForwardingAddress = <ThrowOnError extends boolean = false>(options: Options<ExchangeResourceMailboxGetUserForwardingAddressData, ThrowOnError>) => { return (options?.client ?? client).get<ExchangeResourceMailboxGetUserForwardingAddressResponse, ExchangeResourceMailboxGetUserForwardingAddressError, ThrowOnError>({
    ...options,
    url: '/exchange/resource-mailboxes/{mailboxId}/forwarding-address'
}); };

/**
 * Update Mailbox Forwarding Address
 * Update mailbox forwarding address, method will return you operation status.
 */
export const exchangeResourceMailboxUpdateUserForwardingAddress = <ThrowOnError extends boolean = false>(options: Options<ExchangeResourceMailboxUpdateUserForwardingAddressData, ThrowOnError>) => { return (options?.client ?? client).put<ExchangeResourceMailboxUpdateUserForwardingAddressResponse, ExchangeResourceMailboxUpdateUserForwardingAddressError, ThrowOnError>({
    ...options,
    url: '/exchange/resource-mailboxes/{mailboxId}/forwarding-address'
}); };

/**
 * Get Resource Mailbox Stats
 * Get resource mailbox stats, method will return you resource mailbox stats.
 */
export const exchangeResourceMailboxGetResourceMailboxStatistics = <ThrowOnError extends boolean = false>(options: Options<ExchangeResourceMailboxGetResourceMailboxStatisticsData, ThrowOnError>) => { return (options?.client ?? client).get<ExchangeResourceMailboxGetResourceMailboxStatisticsResponse, ExchangeResourceMailboxGetResourceMailboxStatisticsError, ThrowOnError>({
    ...options,
    url: '/exchange/resource-mailboxes/{mailboxId}/stats'
}); };

/**
 * Get All Distribution Lists Of User Mailbox
 * Get all distribution lists of user mailbox, method will return you list of all distribution lists of user mailbox.
 */
export const exchangeResourceMailboxGetAllListsOfUserMailbox = <ThrowOnError extends boolean = false>(options: Options<ExchangeResourceMailboxGetAllListsOfUserMailboxData, ThrowOnError>) => { return (options?.client ?? client).get<ExchangeResourceMailboxGetAllListsOfUserMailboxResponse, ExchangeResourceMailboxGetAllListsOfUserMailboxError, ThrowOnError>({
    ...options,
    url: '/exchange/resource-mailboxes/{mailboxId}/memberships'
}); };

/**
 * Add User Mailbox To Distribution List
 * Add user mailbox to distribution list, method will return you recently added user mailbox to distribution list.
 */
export const exchangeResourceMailboxAddUserMailboxToList = <ThrowOnError extends boolean = false>(options: Options<ExchangeResourceMailboxAddUserMailboxToListData, ThrowOnError>) => { return (options?.client ?? client).put<ExchangeResourceMailboxAddUserMailboxToListResponse, ExchangeResourceMailboxAddUserMailboxToListError, ThrowOnError>({
    ...options,
    url: '/exchange/resource-mailboxes/{mailboxId}/memberships'
}); };

/**
 * Remove User Mailbox From Distribution List
 * Remove user mailbox from distribution list, method will return you updated user mailbox distribution list.
 */
export const exchangeResourceMailboxRemoveUserMailboxFromList = <ThrowOnError extends boolean = false>(options: Options<ExchangeResourceMailboxRemoveUserMailboxFromListData, ThrowOnError>) => { return (options?.client ?? client).delete<ExchangeResourceMailboxRemoveUserMailboxFromListResponse, ExchangeResourceMailboxRemoveUserMailboxFromListError, ThrowOnError>({
    ...options,
    url: '/exchange/resource-mailboxes/{mailboxId}/memberships'
}); };

/**
 * Get Delegates For Resource Mailbox
 * Get delegates for resource mailbox, method will return you a list of delegates for resource mailbox.
 */
export const exchangeResourceMailboxGetDelegatesForResourceMailbox = <ThrowOnError extends boolean = false>(options: Options<ExchangeResourceMailboxGetDelegatesForResourceMailboxData, ThrowOnError>) => { return (options?.client ?? client).get<ExchangeResourceMailboxGetDelegatesForResourceMailboxResponse, ExchangeResourceMailboxGetDelegatesForResourceMailboxError, ThrowOnError>({
    ...options,
    url: '/exchange/resource-mailboxes/{mailboxId}/delegates'
}); };

/**
 * Add Delegates For Resource Mailbox
 * Add delegates for resource mailbox, method will return you operation status.
 */
export const exchangeResourceMailboxAddDelegatesForResourceMailbox = <ThrowOnError extends boolean = false>(options: Options<ExchangeResourceMailboxAddDelegatesForResourceMailboxData, ThrowOnError>) => { return (options?.client ?? client).put<ExchangeResourceMailboxAddDelegatesForResourceMailboxResponse, ExchangeResourceMailboxAddDelegatesForResourceMailboxError, ThrowOnError>({
    ...options,
    url: '/exchange/resource-mailboxes/{mailboxId}/delegates'
}); };

/**
 * Remove Delegates For Resource Mailbox
 * Remove delegates for resource mailbox, method will return you operation status.
 */
export const exchangeResourceMailboxRemoveDelegatesForResourceMailbox = <ThrowOnError extends boolean = false>(options: Options<ExchangeResourceMailboxRemoveDelegatesForResourceMailboxData, ThrowOnError>) => { return (options?.client ?? client).delete<ExchangeResourceMailboxRemoveDelegatesForResourceMailboxResponse, ExchangeResourceMailboxRemoveDelegatesForResourceMailboxError, ThrowOnError>({
    ...options,
    url: '/exchange/resource-mailboxes/{mailboxId}/delegates'
}); };

/**
 * Get Resource Mailbox Book In Policy Users
 * Get resource mailbox book in policy users, method will return you list of resource mailbox book in policy users.
 */
export const exchangeResourceMailboxGetResourceMailboxBookInPolicyUsers = <ThrowOnError extends boolean = false>(options: Options<ExchangeResourceMailboxGetResourceMailboxBookInPolicyUsersData, ThrowOnError>) => { return (options?.client ?? client).get<ExchangeResourceMailboxGetResourceMailboxBookInPolicyUsersResponse, ExchangeResourceMailboxGetResourceMailboxBookInPolicyUsersError, ThrowOnError>({
    ...options,
    url: '/exchange/resource-mailboxes/{mailboxId}/book-in-policy-users'
}); };

/**
 * Add Resource Mailbox Book In Policy Request
 * Add resource mailbox book in policy request, method will return you operation status.
 */
export const exchangeResourceMailboxAddResourceMailboxBookInPolicyRequest = <ThrowOnError extends boolean = false>(options: Options<ExchangeResourceMailboxAddResourceMailboxBookInPolicyRequestData, ThrowOnError>) => { return (options?.client ?? client).put<ExchangeResourceMailboxAddResourceMailboxBookInPolicyRequestResponse, ExchangeResourceMailboxAddResourceMailboxBookInPolicyRequestError, ThrowOnError>({
    ...options,
    url: '/exchange/resource-mailboxes/{mailboxId}/book-in-policy-users'
}); };

/**
 * Remove Resource Mailbox Book In Policy Users
 * Remove resource mailbox book in policy, method will return you operation status.
 */
export const exchangeResourceMailboxRemoveResourceMailboxBookInPolicyUsers = <ThrowOnError extends boolean = false>(options: Options<ExchangeResourceMailboxRemoveResourceMailboxBookInPolicyUsersData, ThrowOnError>) => { return (options?.client ?? client).delete<ExchangeResourceMailboxRemoveResourceMailboxBookInPolicyUsersResponse, ExchangeResourceMailboxRemoveResourceMailboxBookInPolicyUsersError, ThrowOnError>({
    ...options,
    url: '/exchange/resource-mailboxes/{mailboxId}/book-in-policy-users'
}); };

/**
 * Get Resource Mailbox Request In Policy Users
 * Get resource mailbox request in policy users, method will return you list of resource mailbox request in policy users.
 */
export const exchangeResourceMailboxGetResourceMailboxRequestInPolicyUsers = <ThrowOnError extends boolean = false>(options: Options<ExchangeResourceMailboxGetResourceMailboxRequestInPolicyUsersData, ThrowOnError>) => { return (options?.client ?? client).get<ExchangeResourceMailboxGetResourceMailboxRequestInPolicyUsersResponse, ExchangeResourceMailboxGetResourceMailboxRequestInPolicyUsersError, ThrowOnError>({
    ...options,
    url: '/exchange/resource-mailboxes/{mailboxId}/request-in-policy-users'
}); };

/**
 * Add Resource Mailbox Request In Policy Users
 * Add resource mailbox request in policy users, method will return you operation status.
 */
export const exchangeResourceMailboxAddResourceMailboxRequestInPolicyUsers = <ThrowOnError extends boolean = false>(options: Options<ExchangeResourceMailboxAddResourceMailboxRequestInPolicyUsersData, ThrowOnError>) => { return (options?.client ?? client).put<ExchangeResourceMailboxAddResourceMailboxRequestInPolicyUsersResponse, ExchangeResourceMailboxAddResourceMailboxRequestInPolicyUsersError, ThrowOnError>({
    ...options,
    url: '/exchange/resource-mailboxes/{mailboxId}/request-in-policy-users'
}); };

/**
 * Remove Resource Mailbox Request In Policy Users
 * Remove resource mailbox request in policy users, method will return you operation status.
 */
export const exchangeResourceMailboxRemoveResourceMailboxRequestInPolicyUsers = <ThrowOnError extends boolean = false>(options: Options<ExchangeResourceMailboxRemoveResourceMailboxRequestInPolicyUsersData, ThrowOnError>) => { return (options?.client ?? client).delete<ExchangeResourceMailboxRemoveResourceMailboxRequestInPolicyUsersResponse, ExchangeResourceMailboxRemoveResourceMailboxRequestInPolicyUsersError, ThrowOnError>({
    ...options,
    url: '/exchange/resource-mailboxes/{mailboxId}/request-in-policy-users'
}); };

/**
 * Get Resource Mailbox Out Policy Users
 * Get resource mailbox out policy users, method will return you list of resource mailbox out policy users.
 */
export const exchangeResourceMailboxGetResourceMailboxOutPolicyUsers = <ThrowOnError extends boolean = false>(options: Options<ExchangeResourceMailboxGetResourceMailboxOutPolicyUsersData, ThrowOnError>) => { return (options?.client ?? client).get<ExchangeResourceMailboxGetResourceMailboxOutPolicyUsersResponse, ExchangeResourceMailboxGetResourceMailboxOutPolicyUsersError, ThrowOnError>({
    ...options,
    url: '/exchange/resource-mailboxes/{mailboxId}/request-out-policy-users'
}); };

/**
 * Add Resource Mailbox Out Policy Users
 * Add resource mailbox out policy users, method will return you operation status.
 */
export const exchangeResourceMailboxAddResourceMailboxOutPolicyUsers = <ThrowOnError extends boolean = false>(options: Options<ExchangeResourceMailboxAddResourceMailboxOutPolicyUsersData, ThrowOnError>) => { return (options?.client ?? client).put<ExchangeResourceMailboxAddResourceMailboxOutPolicyUsersResponse, ExchangeResourceMailboxAddResourceMailboxOutPolicyUsersError, ThrowOnError>({
    ...options,
    url: '/exchange/resource-mailboxes/{mailboxId}/request-out-policy-users'
}); };

/**
 * Remove Resource Mailbox Out Policy Users
 * Remove resource mailbox out policy users, method will return you operation status.
 */
export const exchangeResourceMailboxRemoveResourceMailboxOutPolicyUsers = <ThrowOnError extends boolean = false>(options: Options<ExchangeResourceMailboxRemoveResourceMailboxOutPolicyUsersData, ThrowOnError>) => { return (options?.client ?? client).delete<ExchangeResourceMailboxRemoveResourceMailboxOutPolicyUsersResponse, ExchangeResourceMailboxRemoveResourceMailboxOutPolicyUsersError, ThrowOnError>({
    ...options,
    url: '/exchange/resource-mailboxes/{mailboxId}/request-out-policy-users'
}); };

/**
 * Get Resource Maibox Policy Settings
 * Get resource mailbox policy settings, method will return you resource mailbox policy settings.
 */
export const exchangeResourceMailboxGetResourceMaiboxPolicySettings = <ThrowOnError extends boolean = false>(options: Options<ExchangeResourceMailboxGetResourceMaiboxPolicySettingsData, ThrowOnError>) => { return (options?.client ?? client).get<ExchangeResourceMailboxGetResourceMaiboxPolicySettingsResponse, ExchangeResourceMailboxGetResourceMaiboxPolicySettingsError, ThrowOnError>({
    ...options,
    url: '/exchange/resource-mailboxes/{mailboxId}/resource-mailbox-policy-settings'
}); };

/**
 * Update Resource Maibox Policy Settings
 * Update resource mailbox policy settings, method will return you operation status.
 */
export const exchangeResourceMailboxUpdateResourceMaiboxPolicySettings = <ThrowOnError extends boolean = false>(options: Options<ExchangeResourceMailboxUpdateResourceMaiboxPolicySettingsData, ThrowOnError>) => { return (options?.client ?? client).put<ExchangeResourceMailboxUpdateResourceMaiboxPolicySettingsResponse, ExchangeResourceMailboxUpdateResourceMaiboxPolicySettingsError, ThrowOnError>({
    ...options,
    url: '/exchange/resource-mailboxes/{mailboxId}/resource-mailbox-policy-settings'
}); };

/**
 * Get All Exchange Public Folders
 * Get all exchange public folders, method will return you list of exchange public folders.
 */
export const exchangePublicFolderGetAllExchangePublicFolders = <ThrowOnError extends boolean = false>(options?: Options<ExchangePublicFolderGetAllExchangePublicFoldersData, ThrowOnError>) => { return (options?.client ?? client).get<ExchangePublicFolderGetAllExchangePublicFoldersResponse, ExchangePublicFolderGetAllExchangePublicFoldersError, ThrowOnError>({
    ...options,
    url: '/exchange/public-folders'
}); };

/**
 * Add Exchange Public Folder
 * Add exchange public folder, method will return you complete details of recently added public folder.
 */
export const exchangePublicFolderAddExchangePublicFolder = <ThrowOnError extends boolean = false>(options: Options<ExchangePublicFolderAddExchangePublicFolderData, ThrowOnError>) => { return (options?.client ?? client).post<ExchangePublicFolderAddExchangePublicFolderResponse, ExchangePublicFolderAddExchangePublicFolderError, ThrowOnError>({
    ...options,
    url: '/exchange/public-folders'
}); };

/**
 * Get Exchange Public Folder Details
 * Get exchange public folder details, method will return you complete details of public folder.
 */
export const exchangePublicFolderGetExchangePublicFolderDetails = <ThrowOnError extends boolean = false>(options: Options<ExchangePublicFolderGetExchangePublicFolderDetailsData, ThrowOnError>) => { return (options?.client ?? client).get<ExchangePublicFolderGetExchangePublicFolderDetailsResponse, ExchangePublicFolderGetExchangePublicFolderDetailsError, ThrowOnError>({
    ...options,
    url: '/exchange/public-folders/{publicFolderId}'
}); };

/**
 * Delete Exchange Public Folder
 * Delete exchange public folder, method will return you operation status.
 */
export const exchangePublicFolderDeleteExchangePublicFolder = <ThrowOnError extends boolean = false>(options: Options<ExchangePublicFolderDeleteExchangePublicFolderData, ThrowOnError>) => { return (options?.client ?? client).delete<ExchangePublicFolderDeleteExchangePublicFolderResponse, ExchangePublicFolderDeleteExchangePublicFolderError, ThrowOnError>({
    ...options,
    url: '/exchange/public-folders/{publicFolderId}'
}); };

/**
 * Get Exchange Public Folder General Properties
 * Get exchange public folder general properties, method will return you exchange public folder general properties.
 */
export const exchangePublicFolderGetExchangePublicFolderGeneralProperties = <ThrowOnError extends boolean = false>(options: Options<ExchangePublicFolderGetExchangePublicFolderGeneralPropertiesData, ThrowOnError>) => { return (options?.client ?? client).get<ExchangePublicFolderGetExchangePublicFolderGeneralPropertiesResponse, ExchangePublicFolderGetExchangePublicFolderGeneralPropertiesError, ThrowOnError>({
    ...options,
    url: '/exchange/public-folders/{publicFolderId}/general-properties'
}); };

/**
 * Update Exchange Public Folder General Properties
 * Update exchange public folder general properties, method will return you operation status.
 */
export const exchangePublicFolderUpdateExchangePublicFolderGeneralProperties = <ThrowOnError extends boolean = false>(options: Options<ExchangePublicFolderUpdateExchangePublicFolderGeneralPropertiesData, ThrowOnError>) => { return (options?.client ?? client).put<ExchangePublicFolderUpdateExchangePublicFolderGeneralPropertiesResponse, ExchangePublicFolderUpdateExchangePublicFolderGeneralPropertiesError, ThrowOnError>({
    ...options,
    url: '/exchange/public-folders/{publicFolderId}/general-properties'
}); };

/**
 * Get Exchange Public Folder Advanced Properties
 * Get exchange public folder advanced properties, method will return you exchange public folder advanced properties.
 */
export const exchangePublicFolderGetExchangePublicFolderAdvancedProperties = <ThrowOnError extends boolean = false>(options: Options<ExchangePublicFolderGetExchangePublicFolderAdvancedPropertiesData, ThrowOnError>) => { return (options?.client ?? client).get<ExchangePublicFolderGetExchangePublicFolderAdvancedPropertiesResponse, ExchangePublicFolderGetExchangePublicFolderAdvancedPropertiesError, ThrowOnError>({
    ...options,
    url: '/exchange/public-folders/{publicFolderId}/advanced-properties'
}); };

/**
 * Update Exchange Public Folder Advanced Properties
 * Update exchange public folder advanced properties, method will return you operation status.
 */
export const exchangePublicFolderUpdateExchangePublicFolderAdvancedProperties = <ThrowOnError extends boolean = false>(options: Options<ExchangePublicFolderUpdateExchangePublicFolderAdvancedPropertiesData, ThrowOnError>) => { return (options?.client ?? client).put<ExchangePublicFolderUpdateExchangePublicFolderAdvancedPropertiesResponse, ExchangePublicFolderUpdateExchangePublicFolderAdvancedPropertiesError, ThrowOnError>({
    ...options,
    url: '/exchange/public-folders/{publicFolderId}/advanced-properties'
}); };

/**
 * Get Exchange Public Folder Permissions
 * Get exchange public folder permissions, method will return you list of exchange public folder permissions.
 */
export const exchangePublicFolderGetExchangePublicFolderPermissions = <ThrowOnError extends boolean = false>(options: Options<ExchangePublicFolderGetExchangePublicFolderPermissionsData, ThrowOnError>) => { return (options?.client ?? client).get<ExchangePublicFolderGetExchangePublicFolderPermissionsResponse, ExchangePublicFolderGetExchangePublicFolderPermissionsError, ThrowOnError>({
    ...options,
    url: '/exchange/public-folders/{publicFolderId}/permissions'
}); };

/**
 * Update Exchange Public Folder Permissions
 * Update exchange public folder permissions, method will return you operation status.
 */
export const exchangePublicFolderUpdateExchangePublicFolderPermissions = <ThrowOnError extends boolean = false>(options: Options<ExchangePublicFolderUpdateExchangePublicFolderPermissionsData, ThrowOnError>) => { return (options?.client ?? client).put<ExchangePublicFolderUpdateExchangePublicFolderPermissionsResponse, ExchangePublicFolderUpdateExchangePublicFolderPermissionsError, ThrowOnError>({
    ...options,
    url: '/exchange/public-folders/{publicFolderId}/permissions'
}); };

/**
 * Get Public Folder Accepted Senders
 * Get exchange public folder accepted senders, method will return you list of exchange public folder accepted senders.
 */
export const exchangePublicFolderGetPublicFolderAcceptedSenders = <ThrowOnError extends boolean = false>(options: Options<ExchangePublicFolderGetPublicFolderAcceptedSendersData, ThrowOnError>) => { return (options?.client ?? client).get<ExchangePublicFolderGetPublicFolderAcceptedSendersResponse, ExchangePublicFolderGetPublicFolderAcceptedSendersError, ThrowOnError>({
    ...options,
    url: '/exchange/public-folders/{publicFolderId}/accepted-senders'
}); };

/**
 * Add Public Folder Accepted Senders
 * Add exchange public folder accepted senders, method will return you operation status.
 */
export const exchangePublicFolderAddPublicFolderAcceptedSenders = <ThrowOnError extends boolean = false>(options: Options<ExchangePublicFolderAddPublicFolderAcceptedSendersData, ThrowOnError>) => { return (options?.client ?? client).put<ExchangePublicFolderAddPublicFolderAcceptedSendersResponse, ExchangePublicFolderAddPublicFolderAcceptedSendersError, ThrowOnError>({
    ...options,
    url: '/exchange/public-folders/{publicFolderId}/accepted-senders'
}); };

/**
 * Remove Public Folder Accepted Senders
 * Remove exchange public folder accepted senders, method will return you operation status.
 */
export const exchangePublicFolderRemovePublicFolderAcceptedSenders = <ThrowOnError extends boolean = false>(options: Options<ExchangePublicFolderRemovePublicFolderAcceptedSendersData, ThrowOnError>) => { return (options?.client ?? client).delete<ExchangePublicFolderRemovePublicFolderAcceptedSendersResponse, ExchangePublicFolderRemovePublicFolderAcceptedSendersError, ThrowOnError>({
    ...options,
    url: '/exchange/public-folders/{publicFolderId}/accepted-senders'
}); };

/**
 * Get Public Folder Rejected Senders
 * Get exchange public folder rejected senders, method will return you list of exchange public folder rejected senders.
 */
export const exchangePublicFolderGetPublicFolderRejectedSenders = <ThrowOnError extends boolean = false>(options: Options<ExchangePublicFolderGetPublicFolderRejectedSendersData, ThrowOnError>) => { return (options?.client ?? client).get<ExchangePublicFolderGetPublicFolderRejectedSendersResponse, ExchangePublicFolderGetPublicFolderRejectedSendersError, ThrowOnError>({
    ...options,
    url: '/exchange/public-folders/{publicFolderId}/rejected-senders'
}); };

/**
 * Add Public Folder Rejected Senders
 * Add exchange public folder rejected senders, method will return you operation status.
 */
export const exchangePublicFolderAddPublicFolderRejectedSenders = <ThrowOnError extends boolean = false>(options: Options<ExchangePublicFolderAddPublicFolderRejectedSendersData, ThrowOnError>) => { return (options?.client ?? client).put<ExchangePublicFolderAddPublicFolderRejectedSendersResponse, ExchangePublicFolderAddPublicFolderRejectedSendersError, ThrowOnError>({
    ...options,
    url: '/exchange/public-folders/{publicFolderId}/rejected-senders'
}); };

/**
 * Remove Public Folder Rejected Senders
 * Remove exchange public folder rejected senders, method will return you operation status.
 */
export const exchangePublicFolderRemovePublicFolderRejectedSenders = <ThrowOnError extends boolean = false>(options: Options<ExchangePublicFolderRemovePublicFolderRejectedSendersData, ThrowOnError>) => { return (options?.client ?? client).delete<ExchangePublicFolderRemovePublicFolderRejectedSendersResponse, ExchangePublicFolderRemovePublicFolderRejectedSendersError, ThrowOnError>({
    ...options,
    url: '/exchange/public-folders/{publicFolderId}/rejected-senders'
}); };

/**
 * Get Public Folder Email Addresses
 * Get exchange public folder email addresses, method will return you list of exchange public folder email addresses.
 */
export const exchangePublicFolderGetPublicFolderEmailAddresses = <ThrowOnError extends boolean = false>(options: Options<ExchangePublicFolderGetPublicFolderEmailAddressesData, ThrowOnError>) => { return (options?.client ?? client).get<ExchangePublicFolderGetPublicFolderEmailAddressesResponse, ExchangePublicFolderGetPublicFolderEmailAddressesError, ThrowOnError>({
    ...options,
    url: '/exchange/public-folders/{publicFolderId}/email-addresses'
}); };

/**
 * Add Public Folder Email Addresses
 * Add exchange public folder email addresses, method will return you operation status.
 */
export const exchangePublicFolderAddPublicFolderEmailAddresses = <ThrowOnError extends boolean = false>(options: Options<ExchangePublicFolderAddPublicFolderEmailAddressesData, ThrowOnError>) => { return (options?.client ?? client).post<ExchangePublicFolderAddPublicFolderEmailAddressesResponse, ExchangePublicFolderAddPublicFolderEmailAddressesError, ThrowOnError>({
    ...options,
    url: '/exchange/public-folders/{publicFolderId}/email-addresses'
}); };

/**
 * Delete Public Folder Email Addresses
 * Delete exchange public folder email addresses, method will return you operation status.
 */
export const exchangePublicFolderDeletePublicFolderEmailAddresses = <ThrowOnError extends boolean = false>(options: Options<ExchangePublicFolderDeletePublicFolderEmailAddressesData, ThrowOnError>) => { return (options?.client ?? client).delete<ExchangePublicFolderDeletePublicFolderEmailAddressesResponse, ExchangePublicFolderDeletePublicFolderEmailAddressesError, ThrowOnError>({
    ...options,
    url: '/exchange/public-folders/{publicFolderId}/email-addresses'
}); };

/**
 * Get Public Folder Forwarding Address
 * Get exchange public folder Forwarding address, method will return you exchange public folder Forwarding address details.
 */
export const exchangePublicFolderGetPublicFolderForwardingAddress = <ThrowOnError extends boolean = false>(options: Options<ExchangePublicFolderGetPublicFolderForwardingAddressData, ThrowOnError>) => { return (options?.client ?? client).get<ExchangePublicFolderGetPublicFolderForwardingAddressResponse, ExchangePublicFolderGetPublicFolderForwardingAddressError, ThrowOnError>({
    ...options,
    url: '/exchange/public-folders/{publicFolderId}/forwarding-address'
}); };

/**
 * Update Public Folder Forwarding Address
 * Update exchange public folder forwarding address, method will return you operation status.
 */
export const exchangePublicFolderUpdatePublicFolderForwardingAddress = <ThrowOnError extends boolean = false>(options: Options<ExchangePublicFolderUpdatePublicFolderForwardingAddressData, ThrowOnError>) => { return (options?.client ?? client).put<ExchangePublicFolderUpdatePublicFolderForwardingAddressResponse, ExchangePublicFolderUpdatePublicFolderForwardingAddressError, ThrowOnError>({
    ...options,
    url: '/exchange/public-folders/{publicFolderId}/forwarding-address'
}); };

/**
 * Enable Disable Public Folder
 * Enable disable public folder, method will return you operation status.
 */
export const exchangePublicFolderEnableDisablePublicFolder = <ThrowOnError extends boolean = false>(options: Options<ExchangePublicFolderEnableDisablePublicFolderData, ThrowOnError>) => { return (options?.client ?? client).put<ExchangePublicFolderEnableDisablePublicFolderResponse, ExchangePublicFolderEnableDisablePublicFolderError, ThrowOnError>({
    ...options,
    url: '/exchange/public-folders/{publicFolderId}/enable-disable'
}); };

/**
 * Add Exchange Journal Rule
 * Add exchange journal rule, method will return you complete details of recently added journal rule.
 */
export const exchangeJournalRuleAddExchangeJournalRule = <ThrowOnError extends boolean = false>(options: Options<ExchangeJournalRuleAddExchangeJournalRuleData, ThrowOnError>) => { return (options?.client ?? client).post<ExchangeJournalRuleAddExchangeJournalRuleResponse, ExchangeJournalRuleAddExchangeJournalRuleError, ThrowOnError>({
    ...options,
    url: '/exchange/organizations/{organizationId}/journal-rules'
}); };

/**
 * Delete Exchange Journal Rule
 * Delete exchange journal rule, method will return you operation status.
 */
export const exchangeJournalRuleDeleteExchangeJournalRule = <ThrowOnError extends boolean = false>(options: Options<ExchangeJournalRuleDeleteExchangeJournalRuleData, ThrowOnError>) => { return (options?.client ?? client).delete<ExchangeJournalRuleDeleteExchangeJournalRuleResponse, ExchangeJournalRuleDeleteExchangeJournalRuleError, ThrowOnError>({
    ...options,
    url: '/exchange/organizations/{organizationId}/journal-rules'
}); };

/**
 * Get all Exchange Journal Rules
 * Get all exchange journal rule, method will return you list of journal rules.
 */
export const exchangeJournalRuleGetAllExchangeJournalRules = <ThrowOnError extends boolean = false>(options?: Options<ExchangeJournalRuleGetAllExchangeJournalRulesData, ThrowOnError>) => { return (options?.client ?? client).get<ExchangeJournalRuleGetAllExchangeJournalRulesResponse, ExchangeJournalRuleGetAllExchangeJournalRulesError, ThrowOnError>({
    ...options,
    url: '/exchange/organizations/journal-rules'
}); };

/**
 * Enable Disable Exchange Blocked Domain Rule
 * Enable disable exchange blocked domain rule, method will return you operation status.
 */
export const exchangeJournalRuleEnableDisableExchangeJournalRule = <ThrowOnError extends boolean = false>(options: Options<ExchangeJournalRuleEnableDisableExchangeJournalRuleData, ThrowOnError>) => { return (options?.client ?? client).put<ExchangeJournalRuleEnableDisableExchangeJournalRuleResponse, ExchangeJournalRuleEnableDisableExchangeJournalRuleError, ThrowOnError>({
    ...options,
    url: '/exchange/organizations/{organizationId}/journal-rules/enable-disable'
}); };

/**
 * Get Blocked Domain Rule Details
 * Get blocked domain rule details, method will return you blocked domain rule details.
 */
export const exchangeBlockedDomainRuleGetBlockedDomainRuleDetails = <ThrowOnError extends boolean = false>(options: Options<ExchangeBlockedDomainRuleGetBlockedDomainRuleDetailsData, ThrowOnError>) => { return (options?.client ?? client).get<ExchangeBlockedDomainRuleGetBlockedDomainRuleDetailsResponse, ExchangeBlockedDomainRuleGetBlockedDomainRuleDetailsError, ThrowOnError>({
    ...options,
    url: '/exchange/organizations/{organizationId}/blocked-domain-rules'
}); };

/**
 * Update Exchange Blocked Domain Rule
 * Update exchange blocked domain rule, method will return you updated blocked domain rule details.
 */
export const exchangeBlockedDomainRuleUpdateExchangeBlockedDomainRule = <ThrowOnError extends boolean = false>(options: Options<ExchangeBlockedDomainRuleUpdateExchangeBlockedDomainRuleData, ThrowOnError>) => { return (options?.client ?? client).put<ExchangeBlockedDomainRuleUpdateExchangeBlockedDomainRuleResponse, ExchangeBlockedDomainRuleUpdateExchangeBlockedDomainRuleError, ThrowOnError>({
    ...options,
    url: '/exchange/organizations/{organizationId}/blocked-domain-rules'
}); };

/**
 * Add Exchange Blocked Domain Rule
 * Add exchange blocked domain rule, method will return you recently added blocked domain rule details.
 */
export const exchangeBlockedDomainRuleAddExchangeBlockedDomainRule = <ThrowOnError extends boolean = false>(options: Options<ExchangeBlockedDomainRuleAddExchangeBlockedDomainRuleData, ThrowOnError>) => { return (options?.client ?? client).post<ExchangeBlockedDomainRuleAddExchangeBlockedDomainRuleResponse, ExchangeBlockedDomainRuleAddExchangeBlockedDomainRuleError, ThrowOnError>({
    ...options,
    url: '/exchange/organizations/{organizationId}/blocked-domain-rules'
}); };

/**
 * Delete Exchange Blocked Domain Rule
 * Delete exchange blocked domain rule, method will return you operation status.
 */
export const exchangeBlockedDomainRuleDeleteExchangeBlockedDomainRule = <ThrowOnError extends boolean = false>(options: Options<ExchangeBlockedDomainRuleDeleteExchangeBlockedDomainRuleData, ThrowOnError>) => { return (options?.client ?? client).delete<ExchangeBlockedDomainRuleDeleteExchangeBlockedDomainRuleResponse, ExchangeBlockedDomainRuleDeleteExchangeBlockedDomainRuleError, ThrowOnError>({
    ...options,
    url: '/exchange/organizations/{organizationId}/blocked-domain-rules'
}); };

/**
 * Get all Exchange Blocked Domain Rules
 * Get exchange blocked domain rules, method will return you list of exchange blocked domain rules.
 */
export const exchangeBlockedDomainRuleGetExchangeBlockedDomainRules = <ThrowOnError extends boolean = false>(options?: Options<ExchangeBlockedDomainRuleGetExchangeBlockedDomainRulesData, ThrowOnError>) => { return (options?.client ?? client).get<ExchangeBlockedDomainRuleGetExchangeBlockedDomainRulesResponse, ExchangeBlockedDomainRuleGetExchangeBlockedDomainRulesError, ThrowOnError>({
    ...options,
    url: '/exchange/organizations/blocked-domain-rules'
}); };

/**
 * Enable Disable Exchange Blocked Domain Rule
 * Enable disable exchange blocked domain rule, method will return you operation status.
 */
export const exchangeBlockedDomainRuleEnableDisableExchangeBlockedDomainRule = <ThrowOnError extends boolean = false>(options: Options<ExchangeBlockedDomainRuleEnableDisableExchangeBlockedDomainRuleData, ThrowOnError>) => { return (options?.client ?? client).put<ExchangeBlockedDomainRuleEnableDisableExchangeBlockedDomainRuleResponse, ExchangeBlockedDomainRuleEnableDisableExchangeBlockedDomainRuleError, ThrowOnError>({
    ...options,
    url: '/exchange/organizations/{organizationId}/blocked-domain-rules/enable-disable'
}); };

/**
 * Get All Exchange Mail Disclaimers
 * Get all exchange mail disclaimer, method will return you list of exchange mail disclaimers.
 */
export const exchangeMailDisclaimerGetAllExchangeMailDisclaimers = <ThrowOnError extends boolean = false>(options: Options<ExchangeMailDisclaimerGetAllExchangeMailDisclaimersData, ThrowOnError>) => { return (options?.client ?? client).get<ExchangeMailDisclaimerGetAllExchangeMailDisclaimersResponse, ExchangeMailDisclaimerGetAllExchangeMailDisclaimersError, ThrowOnError>({
    ...options,
    url: '/exchange/organizations/{organizationId}/mail-disclaimers'
}); };

/**
 * Update Exchange Mail Disclaimer
 * Update exchange mail disclaimer, method will return you operation status.
 */
export const exchangeMailDisclaimerUpdateExchangeMailDisclaimer = <ThrowOnError extends boolean = false>(options: Options<ExchangeMailDisclaimerUpdateExchangeMailDisclaimerData, ThrowOnError>) => { return (options?.client ?? client).put<ExchangeMailDisclaimerUpdateExchangeMailDisclaimerResponse, ExchangeMailDisclaimerUpdateExchangeMailDisclaimerError, ThrowOnError>({
    ...options,
    url: '/exchange/organizations/{organizationId}/mail-disclaimers'
}); };

/**
 * Add Exchange Mail Disclaimer
 * Add exchange mail disclaimer, method will return you recently added mail disclaimer details.
 */
export const exchangeMailDisclaimerAddExchangeMailDisclaimer = <ThrowOnError extends boolean = false>(options: Options<ExchangeMailDisclaimerAddExchangeMailDisclaimerData, ThrowOnError>) => { return (options?.client ?? client).post<ExchangeMailDisclaimerAddExchangeMailDisclaimerResponse, ExchangeMailDisclaimerAddExchangeMailDisclaimerError, ThrowOnError>({
    ...options,
    url: '/exchange/organizations/{organizationId}/mail-disclaimers'
}); };

/**
 * Delete Exchange Mail Disclaimer
 * Delete exchange mail disclaimer, method will return you operation status.
 */
export const exchangeMailDisclaimerDeleteExchangeMailDisclaimer = <ThrowOnError extends boolean = false>(options: Options<ExchangeMailDisclaimerDeleteExchangeMailDisclaimerData, ThrowOnError>) => { return (options?.client ?? client).delete<ExchangeMailDisclaimerDeleteExchangeMailDisclaimerResponse, ExchangeMailDisclaimerDeleteExchangeMailDisclaimerError, ThrowOnError>({
    ...options,
    url: '/exchange/organizations/{organizationId}/mail-disclaimers'
}); };

/**
 * Enable Disable Exchange Mail Disclaimer
 * Enable disable exchange mail disclaimer, method will return you operation status.
 */
export const exchangeMailDisclaimerEnableDisableExchangeMailDisclaimer = <ThrowOnError extends boolean = false>(options: Options<ExchangeMailDisclaimerEnableDisableExchangeMailDisclaimerData, ThrowOnError>) => { return (options?.client ?? client).put<ExchangeMailDisclaimerEnableDisableExchangeMailDisclaimerResponse, ExchangeMailDisclaimerEnableDisableExchangeMailDisclaimerError, ThrowOnError>({
    ...options,
    url: '/exchange/organizations/{organizationId}/mail-disclaimers/enable-disable'
}); };

/**
 * Get all Exchange Mailboxes Database
 * Get all exchange mailboxes database, method will return you list of exchange mailbox database.
 */
export const exgConfsGetAllExgMailBoxesDb = <ThrowOnError extends boolean = false>(options: Options<ExgConfsGetAllExgMailBoxesDbData, ThrowOnError>) => { return (options?.client ?? client).get<ExgConfsGetAllExgMailBoxesDbResponse, ExgConfsGetAllExgMailBoxesDbError, ThrowOnError>({
    ...options,
    url: '/exchange/{serverRoleId}/mailbox-databases'
}); };

/**
 * Get all Assigned Exchange Mailboxes Database
 * Get all exchange mailboxes database, method will return you list of exchange mailbox database.
 */
export const exgConfsGetAllExgMailBoxesDbByUserId = <ThrowOnError extends boolean = false>(options: Options<ExgConfsGetAllExgMailBoxesDbByUserIdData, ThrowOnError>) => { return (options?.client ?? client).get<ExgConfsGetAllExgMailBoxesDbByUserIdResponse, ExgConfsGetAllExgMailBoxesDbByUserIdError, ThrowOnError>({
    ...options,
    url: '/exchange/{serverRoleId}/mailbox-databases/{userId}'
}); };

/**
 * Get all Exchange Public Folder Mailboxes
 * Get all exchange public folder mailboxes, method will return you list of exchange public folder mailboxes.
 */
export const exgConfsGetAllExgPfMailBoxes = <ThrowOnError extends boolean = false>(options: Options<ExgConfsGetAllExgPfMailBoxesData, ThrowOnError>) => { return (options?.client ?? client).get<ExgConfsGetAllExgPfMailBoxesResponse, ExgConfsGetAllExgPfMailBoxesError, ThrowOnError>({
    ...options,
    url: '/exchange/{serverRoleId}/public-folder-mailboxes'
}); };

/**
 * Get all Assigned Exchange Public Folder Mailboxes
 * Get all exchange public folder mailboxes, method will return you operation status.
 */
export const exgConfsGetAllExgPfMailBoxesByUserId = <ThrowOnError extends boolean = false>(options: Options<ExgConfsGetAllExgPfMailBoxesByUserIdData, ThrowOnError>) => { return (options?.client ?? client).get<ExgConfsGetAllExgPfMailBoxesByUserIdResponse, ExgConfsGetAllExgPfMailBoxesByUserIdError, ThrowOnError>({
    ...options,
    url: '/exchange/{serverRoleId}/public-folder-mailboxes/{userId}'
}); };

/**
 * Active Sync Policies
 * Active sync policies, method will return you list of policies.
 */
export const exgConfsActiveSyncPolicies = <ThrowOnError extends boolean = false>(options: Options<ExgConfsActiveSyncPoliciesData, ThrowOnError>) => { return (options?.client ?? client).get<ExgConfsActiveSyncPoliciesResponse, ExgConfsActiveSyncPoliciesError, ThrowOnError>({
    ...options,
    url: '/exchange/{serverRoleId}/activesync-policies'
}); };

/**
 * Get Exchange Lists By Administrator.
 * Get exchange lists by administrator, method will return you list of exchange distribution list.
 */
export const exchangeGetExchangeListsByAdministrator = <ThrowOnError extends boolean = false>(options: Options<ExchangeGetExchangeListsByAdministratorData, ThrowOnError>) => { return (options?.client ?? client).get<ExchangeGetExchangeListsByAdministratorResponse, ExchangeGetExchangeListsByAdministratorError, ThrowOnError>({
    ...options,
    url: '/exchange/distribution-lists/by-administrator'
}); };

/**
 * Is User Distribution List Member
 * Is user distribution list member, method will return you boolean status of user existance.
 */
export const exchangeIsUserDistributionListMember = <ThrowOnError extends boolean = false>(options: Options<ExchangeIsUserDistributionListMemberData, ThrowOnError>) => { return (options?.client ?? client).get<ExchangeIsUserDistributionListMemberResponse, ExchangeIsUserDistributionListMemberError, ThrowOnError>({
    ...options,
    url: '/exchange/distribution-lists/{distributionlistsId}/is-member'
}); };

/**
 * Get all SharePoint Sites
 * Get all SharePoint sites, method will return you list of SharePoint sites.
 */
export const sharePointSiteGetAllSharePointSites = <ThrowOnError extends boolean = false>(options?: Options<SharePointSiteGetAllSharePointSitesData, ThrowOnError>) => { return (options?.client ?? client).get<SharePointSiteGetAllSharePointSitesResponse, SharePointSiteGetAllSharePointSitesError, ThrowOnError>({
    ...options,
    url: '/sharepoint/sites'
}); };

/**
 * Add a new SharePoint Site
 * Add SharePoint site, method will return you details of recently added SharePoint site.
 */
export const sharePointSiteAddSharePointSite = <ThrowOnError extends boolean = false>(options: Options<SharePointSiteAddSharePointSiteData, ThrowOnError>) => { return (options?.client ?? client).post<SharePointSiteAddSharePointSiteResponse, SharePointSiteAddSharePointSiteError, ThrowOnError>({
    ...options,
    url: '/sharepoint/sites'
}); };

/**
 * Get SharePoint Site Details
 * Get SharePoint site details, method will return you complete details of SharePoint site.
 */
export const sharePointSiteGetSharePointSiteDetails = <ThrowOnError extends boolean = false>(options: Options<SharePointSiteGetSharePointSiteDetailsData, ThrowOnError>) => { return (options?.client ?? client).get<SharePointSiteGetSharePointSiteDetailsResponse, SharePointSiteGetSharePointSiteDetailsError, ThrowOnError>({
    ...options,
    url: '/sharepoint/sites/{sharePointSiteId}'
}); };

/**
 * Delete SharePoint Site
 * Delete SharePoint site, method will return you operation status.
 */
export const sharePointSiteDeleteSharePointSite = <ThrowOnError extends boolean = false>(options: Options<SharePointSiteDeleteSharePointSiteData, ThrowOnError>) => { return (options?.client ?? client).delete<SharePointSiteDeleteSharePointSiteResponse, SharePointSiteDeleteSharePointSiteError, ThrowOnError>({
    ...options,
    url: '/sharepoint/sites/{sharePointSiteId}'
}); };

/**
 * Get all SharePoint Subsites
 * Get all SharePoint subsites, method will return you list of SharePoint subsites.
 */
export const sharePointSiteGetAllSharePointSubSites = <ThrowOnError extends boolean = false>(options: Options<SharePointSiteGetAllSharePointSubSitesData, ThrowOnError>) => { return (options?.client ?? client).get<SharePointSiteGetAllSharePointSubSitesResponse, SharePointSiteGetAllSharePointSubSitesError, ThrowOnError>({
    ...options,
    url: '/sharepoint/sites/{sharePointSiteId}/subsites'
}); };

/**
 * Add a new SharePoint Subsite
 * Add SharePoint subsite, method will return you complete details of recently added SharePoint subsite.
 */
export const sharePointSiteAddSharePointSubSite = <ThrowOnError extends boolean = false>(options: Options<SharePointSiteAddSharePointSubSiteData, ThrowOnError>) => { return (options?.client ?? client).post<SharePointSiteAddSharePointSubSiteResponse, SharePointSiteAddSharePointSubSiteError, ThrowOnError>({
    ...options,
    url: '/sharepoint/sites/{sharePointSiteId}/subsites'
}); };

/**
 * Get all SharePoint Site Roles
 * Get all SharePoint site roles, method will return you list of SharePoint site roles.
 */
export const sharePointSiteGetAllSharePointSiteRoles = <ThrowOnError extends boolean = false>(options: Options<SharePointSiteGetAllSharePointSiteRolesData, ThrowOnError>) => { return (options?.client ?? client).get<SharePointSiteGetAllSharePointSiteRolesResponse, SharePointSiteGetAllSharePointSiteRolesError, ThrowOnError>({
    ...options,
    url: '/sharepoint/sites/{sharePointSiteId}/roles'
}); };

/**
 * Delete SharePoint Subsite
 * Delete SharePoint subsite, method will return you operation status.
 */
export const sharePointSiteDeleteSharePointSubSite = <ThrowOnError extends boolean = false>(options: Options<SharePointSiteDeleteSharePointSubSiteData, ThrowOnError>) => { return (options?.client ?? client).delete<SharePointSiteDeleteSharePointSubSiteResponse, SharePointSiteDeleteSharePointSubSiteError, ThrowOnError>({
    ...options,
    url: '/sharepoint/sites/{sharePointSubSiteId}/subsites'
}); };

/**
 * Get SharePoint Site Stats
 * Get SharePoint site summary, method will return you SharePoint site summary.
 */
export const sharePointSiteGetSharePointSiteStats = <ThrowOnError extends boolean = false>(options: Options<SharePointSiteGetSharePointSiteStatsData, ThrowOnError>) => { return (options?.client ?? client).get<SharePointSiteGetSharePointSiteStatsResponse, SharePointSiteGetSharePointSiteStatsError, ThrowOnError>({
    ...options,
    url: '/sharepoint/sites/{sharePointSiteId}/stats'
}); };

/**
 * Get SharePoint Users
 * Get SharePoint users, method will return you list of SharePoint users.
 */
export const sharePointUserGetSharePointUsers = <ThrowOnError extends boolean = false>(options: Options<SharePointUserGetSharePointUsersData, ThrowOnError>) => { return (options?.client ?? client).get<SharePointUserGetSharePointUsersResponse, SharePointUserGetSharePointUsersError, ThrowOnError>({
    ...options,
    url: '/sharepoint/sites/{siteId}/users'
}); };

/**
 * Add a new SharePoint User
 * Add SharePoint user, method will return you operation status.
 */
export const sharePointUserAddSharePointUser = <ThrowOnError extends boolean = false>(options: Options<SharePointUserAddSharePointUserData, ThrowOnError>) => { return (options?.client ?? client).post<SharePointUserAddSharePointUserResponse, SharePointUserAddSharePointUserError, ThrowOnError>({
    ...options,
    url: '/sharepoint/sites/{siteId}/users'
}); };

/**
 * Get SharePoint User Details
 * Get SharePoint user details, method will return you complete details of SharePoint user.
 */
export const sharePointUserGetSharePointUserDetails = <ThrowOnError extends boolean = false>(options: Options<SharePointUserGetSharePointUserDetailsData, ThrowOnError>) => { return (options?.client ?? client).get<SharePointUserGetSharePointUserDetailsResponse, SharePointUserGetSharePointUserDetailsError, ThrowOnError>({
    ...options,
    url: '/sharepoint/sites/{siteId}/users/{sharePointUserId}'
}); };

/**
 * Delete SharePoint Site User
 * Delete SharePoint site user, method will return you operation status.
 */
export const sharePointUserDeleteSharePointSiteUser = <ThrowOnError extends boolean = false>(options: Options<SharePointUserDeleteSharePointSiteUserData, ThrowOnError>) => { return (options?.client ?? client).delete<SharePointUserDeleteSharePointSiteUserResponse, SharePointUserDeleteSharePointSiteUserError, ThrowOnError>({
    ...options,
    url: '/sharepoint/sites/{siteId}/users/{userId}'
}); };

/**
 * Get SharePoint User Roles
 * Get SharePoint user roles, method will return you list of SharePoint user Roles.
 */
export const sharePointUserGetSharePointUserRoles = <ThrowOnError extends boolean = false>(options: Options<SharePointUserGetSharePointUserRolesData, ThrowOnError>) => { return (options?.client ?? client).get<SharePointUserGetSharePointUserRolesResponse, SharePointUserGetSharePointUserRolesError, ThrowOnError>({
    ...options,
    url: '/sharepoint/sites/{siteId}/users/{userId}/roles'
}); };

/**
 * Update SharePoint User Roles
 * Update SharePoint user roles, method will return you operation status.
 */
export const sharePointUserUpdateSharePointUserRoles = <ThrowOnError extends boolean = false>(options: Options<SharePointUserUpdateSharePointUserRolesData, ThrowOnError>) => { return (options?.client ?? client).post<SharePointUserUpdateSharePointUserRolesResponse, SharePointUserUpdateSharePointUserRolesError, ThrowOnError>({
    ...options,
    url: '/sharepoint/sites/{siteId}/users/{userId}/roles'
}); };

/**
 * Change SharePoint User Password
 * Change SharePoint user password, method will return you operation status.
 */
export const sharePointUserChangeSharePointUserPassword = <ThrowOnError extends boolean = false>(options: Options<SharePointUserChangeSharePointUserPasswordData, ThrowOnError>) => { return (options?.client ?? client).put<SharePointUserChangeSharePointUserPasswordResponse, SharePointUserChangeSharePointUserPasswordError, ThrowOnError>({
    ...options,
    url: '/sharepoint/sites/{siteId}/users/{userId}/change-password'
}); };

/**
 * Get SharePoint User Properties
 * Get SharePoint user properties, method will return you list of SharePoint user properties.
 */
export const sharePointUserGetSharePointUserProperties = <ThrowOnError extends boolean = false>(options: Options<SharePointUserGetSharePointUserPropertiesData, ThrowOnError>) => { return (options?.client ?? client).get<SharePointUserGetSharePointUserPropertiesResponse, SharePointUserGetSharePointUserPropertiesError, ThrowOnError>({
    ...options,
    url: '/sharepoint/sites/{siteId}/users/{userId}/general-profile'
}); };

/**
 * Update SharePoint User Properties
 * Update SharePoint user properties, method will return you operation status.
 */
export const sharePointUserUpdateSharePointUserProperties = <ThrowOnError extends boolean = false>(options: Options<SharePointUserUpdateSharePointUserPropertiesData, ThrowOnError>) => { return (options?.client ?? client).put<SharePointUserUpdateSharePointUserPropertiesResponse, SharePointUserUpdateSharePointUserPropertiesError, ThrowOnError>({
    ...options,
    url: '/sharepoint/sites/{siteId}/users/{userId}/general-profile'
}); };

/**
 * Get Existing SharePoint Users
 * Get existing SharePoint user, method will return you list of existing SharePoint users.
 */
export const sharePointUserGetExistingSharePointUsers = <ThrowOnError extends boolean = false>(options: Options<SharePointUserGetExistingSharePointUsersData, ThrowOnError>) => { return (options?.client ?? client).get<SharePointUserGetExistingSharePointUsersResponse, SharePointUserGetExistingSharePointUsersError, ThrowOnError>({
    ...options,
    url: '/sharepoint/sites/{siteId}/users/existing'
}); };

/**
 * Get SharePoint Groups
 * Get SharePoint groups, method will return you list of SharePoint groups.
 */
export const sharePointGroupGetSharePointGroups = <ThrowOnError extends boolean = false>(options: Options<SharePointGroupGetSharePointGroupsData, ThrowOnError>) => { return (options?.client ?? client).get<SharePointGroupGetSharePointGroupsResponse, SharePointGroupGetSharePointGroupsError, ThrowOnError>({
    ...options,
    url: '/sharepoint/sites/{siteId}/groups'
}); };

/**
 * Add a new SharePoint Group
 * Add SharePoint group, method will return you operation status.
 */
export const sharePointGroupAddSharePointGroup = <ThrowOnError extends boolean = false>(options: Options<SharePointGroupAddSharePointGroupData, ThrowOnError>) => { return (options?.client ?? client).post<SharePointGroupAddSharePointGroupResponse, SharePointGroupAddSharePointGroupError, ThrowOnError>({
    ...options,
    url: '/sharepoint/sites/{siteId}/groups'
}); };

/**
 * Delete SharePoint Group
 * Delete SharePoint group, method will return you operation status.
 */
export const sharePointGroupDeleteSharePointGroups = <ThrowOnError extends boolean = false>(options: Options<SharePointGroupDeleteSharePointGroupsData, ThrowOnError>) => { return (options?.client ?? client).delete<SharePointGroupDeleteSharePointGroupsResponse, SharePointGroupDeleteSharePointGroupsError, ThrowOnError>({
    ...options,
    url: '/sharepoint/sites/{siteId}/groups/{groupName}'
}); };

/**
 * Get SharePoint Group Roles
 * Get SharePoint group roles, method will return you list of group roles.
 */
export const sharePointGroupGetSharePointGroupRoles = <ThrowOnError extends boolean = false>(options: Options<SharePointGroupGetSharePointGroupRolesData, ThrowOnError>) => { return (options?.client ?? client).get<SharePointGroupGetSharePointGroupRolesResponse, SharePointGroupGetSharePointGroupRolesError, ThrowOnError>({
    ...options,
    url: '/sharepoint/sites/{siteId}/groups/{groupName}/roles'
}); };

/**
 * Update SharePoint Group Roles
 * Update SharePoint group roles, method will return you operation status.
 */
export const sharePointGroupUpdateSharePointGroupRoles = <ThrowOnError extends boolean = false>(options: Options<SharePointGroupUpdateSharePointGroupRolesData, ThrowOnError>) => { return (options?.client ?? client).put<SharePointGroupUpdateSharePointGroupRolesResponse, SharePointGroupUpdateSharePointGroupRolesError, ThrowOnError>({
    ...options,
    url: '/sharepoint/sites/{siteId}/groups/{groupName}/roles'
}); };

/**
 * Get SharePoint Group Members
 * Get SharePoint group members, method will return you list of SharePoint group members.
 */
export const sharePointGroupGetSharePointGroupUsers = <ThrowOnError extends boolean = false>(options: Options<SharePointGroupGetSharePointGroupUsersData, ThrowOnError>) => { return (options?.client ?? client).get<SharePointGroupGetSharePointGroupUsersResponse, SharePointGroupGetSharePointGroupUsersError, ThrowOnError>({
    ...options,
    url: '/sharepoint/sites/{siteId}/groups/{groupName}/group-members'
}); };

/**
 * Add SharePoint Group Members
 * Add SharePoint group members, method will return you operation status.
 */
export const sharePointGroupAddSharePointGroupUsers = <ThrowOnError extends boolean = false>(options: Options<SharePointGroupAddSharePointGroupUsersData, ThrowOnError>) => { return (options?.client ?? client).put<SharePointGroupAddSharePointGroupUsersResponse, SharePointGroupAddSharePointGroupUsersError, ThrowOnError>({
    ...options,
    url: '/sharepoint/sites/{siteId}/groups/{groupName}/group-members'
}); };

/**
 * Remove SharePoint Group Members
 * Remove SharePoint group members, method will return you operation status.
 */
export const sharePointGroupRemoveSharePointGroupUsers = <ThrowOnError extends boolean = false>(options: Options<SharePointGroupRemoveSharePointGroupUsersData, ThrowOnError>) => { return (options?.client ?? client).delete<SharePointGroupRemoveSharePointGroupUsersResponse, SharePointGroupRemoveSharePointGroupUsersError, ThrowOnError>({
    ...options,
    url: '/sharepoint/sites/{siteId}/groups/{groupName}/group-members'
}); };

/**
 * Get User SharePoint Web Applications
 * Get user SharePoint web applications, method will return you list of user SharePoint web applications.
 */
export const sharePointConfGetUserSpWebApplications = <ThrowOnError extends boolean = false>(options: Options<SharePointConfGetUserSpWebApplicationsData, ThrowOnError>) => { return (options?.client ?? client).get<SharePointConfGetUserSpWebApplicationsResponse, SharePointConfGetUserSpWebApplicationsError, ThrowOnError>({
    ...options,
    url: '/sharepoint/{serverRoleId}/web-applications/{userId}'
}); };

/**
 * Get SharePoint Server Web Applications
 * Get SharePoint server web applications, method will return you list of SharePoint server web applications.
 */
export const sharePointServerGetSharePointServerWebApplications = <ThrowOnError extends boolean = false>(options: Options<SharePointServerGetSharePointServerWebApplicationsData, ThrowOnError>) => { return (options?.client ?? client).get<SharePointServerGetSharePointServerWebApplicationsResponse, SharePointServerGetSharePointServerWebApplicationsError, ThrowOnError>({
    ...options,
    url: '/sharepoint-server/{serverRoleId}/web-applications'
}); };

/**
 * Get SharePoint Server Locales
 * Get SharePoint server locales, method will return you list of SharePoint server locales.
 */
export const sharePointServerGetSharePointServerLocales = <ThrowOnError extends boolean = false>(options: Options<SharePointServerGetSharePointServerLocalesData, ThrowOnError>) => { return (options?.client ?? client).get<SharePointServerGetSharePointServerLocalesResponse, SharePointServerGetSharePointServerLocalesError, ThrowOnError>({
    ...options,
    url: '/sharepoint-server/{serverRoleId}/locales'
}); };

/**
 * Get SharePoint Server Web Templates
 * Get SharePoint server web templates, method will return you list of SharePoint server web templates.
 */
export const sharePointServerGetSharePointServerWebTemplates = <ThrowOnError extends boolean = false>(options: Options<SharePointServerGetSharePointServerWebTemplatesData, ThrowOnError>) => { return (options?.client ?? client).get<SharePointServerGetSharePointServerWebTemplatesResponse, SharePointServerGetSharePointServerWebTemplatesError, ThrowOnError>({
    ...options,
    url: '/sharepoint-server/{serverRoleId}/locales/{localeId}/web-templates'
}); };

/**
 * List Skype Users
 * List skype users, method will return you list of skype users.
 */
export const skypeUserListSkypeUsers = <ThrowOnError extends boolean = false>(options?: Options<SkypeUserListSkypeUsersData, ThrowOnError>) => { return (options?.client ?? client).get<SkypeUserListSkypeUsersResponse, SkypeUserListSkypeUsersError, ThrowOnError>({
    ...options,
    url: '/skype/users'
}); };

/**
 * Add a new Skype User
 * Add skype user, method will return you operation status.
 */
export const skypeUserAddSkypeUser = <ThrowOnError extends boolean = false>(options: Options<SkypeUserAddSkypeUserData, ThrowOnError>) => { return (options?.client ?? client).post<SkypeUserAddSkypeUserResponse, SkypeUserAddSkypeUserError, ThrowOnError>({
    ...options,
    url: '/skype/users'
}); };

/**
 * Get Skype User Details
 * Get skype user details, method will return you complete details of skype user.
 */
export const skypeUserGetSkypeUserDetails = <ThrowOnError extends boolean = false>(options: Options<SkypeUserGetSkypeUserDetailsData, ThrowOnError>) => { return (options?.client ?? client).get<SkypeUserGetSkypeUserDetailsResponse, SkypeUserGetSkypeUserDetailsError, ThrowOnError>({
    ...options,
    url: '/skype/users/{skypeUserId}'
}); };

/**
 * Delete Skype User
 * Get skype user details, method will return you operation status.
 */
export const skypeUserDeleteSkypeUser = <ThrowOnError extends boolean = false>(options: Options<SkypeUserDeleteSkypeUserData, ThrowOnError>) => { return (options?.client ?? client).delete<SkypeUserDeleteSkypeUserResponse, SkypeUserDeleteSkypeUserError, ThrowOnError>({
    ...options,
    url: '/skype/users/{skypeUserId}'
}); };

/**
 * Change Skype User Password
 * Change skype user password, method will return you operation status.
 */
export const skypeUserChangeSkypeUserPassword = <ThrowOnError extends boolean = false>(options: Options<SkypeUserChangeSkypeUserPasswordData, ThrowOnError>) => { return (options?.client ?? client).put<SkypeUserChangeSkypeUserPasswordResponse, SkypeUserChangeSkypeUserPasswordError, ThrowOnError>({
    ...options,
    url: '/skype/users/{userId}/change-password'
}); };

/**
 * Get Skype User Properties
 * Get skype user properties, method will return you skype user properties.
 */
export const skypeUserGetSkypeUserProperties = <ThrowOnError extends boolean = false>(options: Options<SkypeUserGetSkypeUserPropertiesData, ThrowOnError>) => { return (options?.client ?? client).get<SkypeUserGetSkypeUserPropertiesResponse, SkypeUserGetSkypeUserPropertiesError, ThrowOnError>({
    ...options,
    url: '/skype/users/{userId}/general-profile'
}); };

/**
 * Update Skype User Properties
 * Update skype user properties, method will return you operation status.
 */
export const skypeUserUpdateSkypeUserProperties = <ThrowOnError extends boolean = false>(options: Options<SkypeUserUpdateSkypeUserPropertiesData, ThrowOnError>) => { return (options?.client ?? client).put<SkypeUserUpdateSkypeUserPropertiesResponse, SkypeUserUpdateSkypeUserPropertiesError, ThrowOnError>({
    ...options,
    url: '/skype/users/{userId}/general-profile'
}); };

/**
 * Get Skype User Advanced Settings
 * Get skype user advanced settings, method will return you user advanced settings.
 */
export const skypeUserGetSkypeUserAdvancedSettings = <ThrowOnError extends boolean = false>(options: Options<SkypeUserGetSkypeUserAdvancedSettingsData, ThrowOnError>) => { return (options?.client ?? client).get<SkypeUserGetSkypeUserAdvancedSettingsResponse, SkypeUserGetSkypeUserAdvancedSettingsError, ThrowOnError>({
    ...options,
    url: '/skype/users/{userId}/advanced-properties'
}); };

/**
 * Update Skype User Advanced Properties
 * Update skype user advanced properties, method will return you operations status.
 */
export const skypeUserUpdateSkypeUserAdvancedProperties = <ThrowOnError extends boolean = false>(options: Options<SkypeUserUpdateSkypeUserAdvancedPropertiesData, ThrowOnError>) => { return (options?.client ?? client).put<SkypeUserUpdateSkypeUserAdvancedPropertiesResponse, SkypeUserUpdateSkypeUserAdvancedPropertiesError, ThrowOnError>({
    ...options,
    url: '/skype/users/{userId}/advanced-properties'
}); };

/**
 * Update Skype User Status
 * Update skype user status, method will return you operations status.
 */
export const skypeUserUpdateSkypeUserStatus = <ThrowOnError extends boolean = false>(options: Options<SkypeUserUpdateSkypeUserStatusData, ThrowOnError>) => { return (options?.client ?? client).put<SkypeUserUpdateSkypeUserStatusResponse, SkypeUserUpdateSkypeUserStatusError, ThrowOnError>({
    ...options,
    url: '/skype/users/{userId}/status'
}); };

/**
 * Get Skype User Forwarding Settings
 * Get skype user forwarding settings, method will return you user forwarding settings.
 */
export const skypeUserGetSkypeUserForwardingSettings = <ThrowOnError extends boolean = false>(options: Options<SkypeUserGetSkypeUserForwardingSettingsData, ThrowOnError>) => { return (options?.client ?? client).get<SkypeUserGetSkypeUserForwardingSettingsResponse, SkypeUserGetSkypeUserForwardingSettingsError, ThrowOnError>({
    ...options,
    url: '/skype/users/{userId}/forwarding'
}); };

/**
 * Update Skype User Forwarding Settings
 * Update skype user forwarding settings, method will return you operation status.
 */
export const skypeUserUpdateSkypeUserForwardingSettings = <ThrowOnError extends boolean = false>(options: Options<SkypeUserUpdateSkypeUserForwardingSettingsData, ThrowOnError>) => { return (options?.client ?? client).put<SkypeUserUpdateSkypeUserForwardingSettingsResponse, SkypeUserUpdateSkypeUserForwardingSettingsError, ThrowOnError>({
    ...options,
    url: '/skype/users/{userId}/forwarding'
}); };

/**
 * Check Bulk Skype Users Feasibility
 * Check bulk skype users feasibility, method will return you updated bulk user feasibility settings.
 */
export const skypeUserCheckBulkSkypeUsersFeasibility = <ThrowOnError extends boolean = false>(options: Options<SkypeUserCheckBulkSkypeUsersFeasibilityData, ThrowOnError>) => { return (options?.client ?? client).put<SkypeUserCheckBulkSkypeUsersFeasibilityResponse, SkypeUserCheckBulkSkypeUsersFeasibilityError, ThrowOnError>({
    ...options,
    url: '/skype/users/bulk/feasibility'
}); };

/**
 * Add Bulk Skype Users
 * Add bulk skype users, method will return you list of recenlty added bulk users.
 */
export const skypeUserAddBulkSkypeUsers = <ThrowOnError extends boolean = false>(options: Options<SkypeUserAddBulkSkypeUsersData, ThrowOnError>) => { return (options?.client ?? client).post<SkypeUserAddBulkSkypeUsersResponse, SkypeUserAddBulkSkypeUsersError, ThrowOnError>({
    ...options,
    url: '/skype/users/bulk'
}); };

/**
 * Update Skype User Telephony Settings
 * Update skype user telephony settings, method will return you operations status.
 */
export const skypeUserUpdateSkypeUserTelephonySettings = <ThrowOnError extends boolean = false>(options: Options<SkypeUserUpdateSkypeUserTelephonySettingsData, ThrowOnError>) => { return (options?.client ?? client).put<SkypeUserUpdateSkypeUserTelephonySettingsResponse, SkypeUserUpdateSkypeUserTelephonySettingsError, ThrowOnError>({
    ...options,
    url: '/skype/users/{userId}/telephony-settings'
}); };

/**
 * Update Skype User Policy Settings
 * Update skype users policy settings, method will return you operations status.
 */
export const skypeUserUpdateSkypeUserPolicySettings = <ThrowOnError extends boolean = false>(options: Options<SkypeUserUpdateSkypeUserPolicySettingsData, ThrowOnError>) => { return (options?.client ?? client).put<SkypeUserUpdateSkypeUserPolicySettingsResponse, SkypeUserUpdateSkypeUserPolicySettingsError, ThrowOnError>({
    ...options,
    url: '/skype/users/{userId}/policy-settings'
}); };

/**
 * List SIP Domains
 * Get SIP domains, method will return you list of SIP domains.
 */
export const skypeSipDomainListSipDomains = <ThrowOnError extends boolean = false>(options?: Options<SkypeSipDomainListSipDomainsData, ThrowOnError>) => { return (options?.client ?? client).get<SkypeSipDomainListSipDomainsResponse, SkypeSipDomainListSipDomainsError, ThrowOnError>({
    ...options,
    url: '/skype/sip-domains'
}); };

/**
 * Add a new Skype SIP Domain
 * Add SIP domain, method will return you complete details of recently added SIP domain.
 */
export const skypeSipDomainAddSkypeSipDomain = <ThrowOnError extends boolean = false>(options: Options<SkypeSipDomainAddSkypeSipDomainData, ThrowOnError>) => { return (options?.client ?? client).post<SkypeSipDomainAddSkypeSipDomainResponse, SkypeSipDomainAddSkypeSipDomainError, ThrowOnError>({
    ...options,
    url: '/skype/sip-domains'
}); };

/**
 * Get SIP Domain Details
 * Get SIP domain details, method will return you complete details of SIP domain.
 */
export const skypeSipDomainGetSipDomainDetails = <ThrowOnError extends boolean = false>(options: Options<SkypeSipDomainGetSipDomainDetailsData, ThrowOnError>) => { return (options?.client ?? client).get<SkypeSipDomainGetSipDomainDetailsResponse, SkypeSipDomainGetSipDomainDetailsError, ThrowOnError>({
    ...options,
    url: '/skype/sip-domains/{sipDomainId}'
}); };

/**
 * Delete SIP Domain
 * Delete SIP domain, method will return you operation status.
 */
export const skypeSipDomainDeleteSipDomain = <ThrowOnError extends boolean = false>(options: Options<SkypeSipDomainDeleteSipDomainData, ThrowOnError>) => { return (options?.client ?? client).delete<SkypeSipDomainDeleteSipDomainResponse, SkypeSipDomainDeleteSipDomainError, ThrowOnError>({
    ...options,
    url: '/skype/sip-domains/{sipDomainId}'
}); };

/**
 * List Skype Groups
 * List skype groups, method will return you list of skype groups.
 */
export const skypeGroupListSkypeGroups = <ThrowOnError extends boolean = false>(options?: Options<SkypeGroupListSkypeGroupsData, ThrowOnError>) => { return (options?.client ?? client).get<SkypeGroupListSkypeGroupsResponse, SkypeGroupListSkypeGroupsError, ThrowOnError>({
    ...options,
    url: '/skype/response-groups'
}); };

/**
 * Add a new Skype Response Group
 * Add skype resource group, method will return you complete details of recently added skype resource group.
 */
export const skypeGroupAddSkypeResponseGroup = <ThrowOnError extends boolean = false>(options: Options<SkypeGroupAddSkypeResponseGroupData, ThrowOnError>) => { return (options?.client ?? client).post<SkypeGroupAddSkypeResponseGroupResponse, SkypeGroupAddSkypeResponseGroupError, ThrowOnError>({
    ...options,
    url: '/skype/response-groups'
}); };

/**
 * Get Skype Group Details
 * Get skype group details, method will return you complete details of skype resource group.
 */
export const skypeGroupGetSkypeGroupDetails = <ThrowOnError extends boolean = false>(options: Options<SkypeGroupGetSkypeGroupDetailsData, ThrowOnError>) => { return (options?.client ?? client).get<SkypeGroupGetSkypeGroupDetailsResponse, SkypeGroupGetSkypeGroupDetailsError, ThrowOnError>({
    ...options,
    url: '/skype/response-groups/{skypeResponseGroupId}'
}); };

/**
 * Delete Skype Group
 * Delete skype group, method will return you operation status.
 */
export const skypeGroupDeleteSkypeGroup = <ThrowOnError extends boolean = false>(options: Options<SkypeGroupDeleteSkypeGroupData, ThrowOnError>) => { return (options?.client ?? client).delete<SkypeGroupDeleteSkypeGroupResponse, SkypeGroupDeleteSkypeGroupError, ThrowOnError>({
    ...options,
    url: '/skype/response-groups/{skypeResponseGroupId}'
}); };

/**
 * Get Skype Group Properties
 * Get skype group properties, method will return you skype group properties.
 */
export const skypeGroupGetSkypeGroupProperties = <ThrowOnError extends boolean = false>(options: Options<SkypeGroupGetSkypeGroupPropertiesData, ThrowOnError>) => { return (options?.client ?? client).get<SkypeGroupGetSkypeGroupPropertiesResponse, SkypeGroupGetSkypeGroupPropertiesError, ThrowOnError>({
    ...options,
    url: '/skype/response-groups/{skypeResponseGroupId}/properties'
}); };

/**
 * Update Skype Group Properties
 * Update skype group properties, method will return you operation status.
 */
export const skypeGroupUpdateSkypeGroupProperties = <ThrowOnError extends boolean = false>(options: Options<SkypeGroupUpdateSkypeGroupPropertiesData, ThrowOnError>) => { return (options?.client ?? client).put<SkypeGroupUpdateSkypeGroupPropertiesResponse, SkypeGroupUpdateSkypeGroupPropertiesError, ThrowOnError>({
    ...options,
    url: '/skype/response-groups/{skypeResponseGroupId}/properties'
}); };

/**
 * List Skype Queues
 * List skype queues, method will return you list of skype queues.
 */
export const skypeQueueListSkypeQueues = <ThrowOnError extends boolean = false>(options?: Options<SkypeQueueListSkypeQueuesData, ThrowOnError>) => { return (options?.client ?? client).get<SkypeQueueListSkypeQueuesResponse, SkypeQueueListSkypeQueuesError, ThrowOnError>({
    ...options,
    url: '/skype/queues'
}); };

/**
 * Add a new Skype Response Queue
 * Add skype response queue, method will return you complete details of recently added skype response queue.
 */
export const skypeQueueAddSkypeResponseQueue = <ThrowOnError extends boolean = false>(options: Options<SkypeQueueAddSkypeResponseQueueData, ThrowOnError>) => { return (options?.client ?? client).post<SkypeQueueAddSkypeResponseQueueResponse, SkypeQueueAddSkypeResponseQueueError, ThrowOnError>({
    ...options,
    url: '/skype/queues'
}); };

/**
 * Get Skype Queue Details
 * Get skype response queue details, method will return you complete details of skype response queue.
 */
export const skypeQueueGetSkypeQueueDetails = <ThrowOnError extends boolean = false>(options: Options<SkypeQueueGetSkypeQueueDetailsData, ThrowOnError>) => { return (options?.client ?? client).get<SkypeQueueGetSkypeQueueDetailsResponse, SkypeQueueGetSkypeQueueDetailsError, ThrowOnError>({
    ...options,
    url: '/skype/queues/{skypeResponseQueueId}'
}); };

/**
 * Delete Skype Queue
 * Delete skype response queue, method will return you operation status.
 */
export const skypeQueueDeleteSkypeQueue = <ThrowOnError extends boolean = false>(options: Options<SkypeQueueDeleteSkypeQueueData, ThrowOnError>) => { return (options?.client ?? client).delete<SkypeQueueDeleteSkypeQueueResponse, SkypeQueueDeleteSkypeQueueError, ThrowOnError>({
    ...options,
    url: '/skype/queues/{skypeResponseQueueId}'
}); };

/**
 * Get Skype Queue Properties
 * Get skype queue properties, method will return you skype queue properties.
 */
export const skypeQueueGetSkypeQueueProperties = <ThrowOnError extends boolean = false>(options: Options<SkypeQueueGetSkypeQueuePropertiesData, ThrowOnError>) => { return (options?.client ?? client).get<SkypeQueueGetSkypeQueuePropertiesResponse, SkypeQueueGetSkypeQueuePropertiesError, ThrowOnError>({
    ...options,
    url: '/skype/queues/{skypeResponseQueueId}/properties'
}); };

/**
 * Update Skype Queue Properties
 * Update skype queue properties, method will return you operation status.
 */
export const skypeQueueUpdateSkypeQueueProperties = <ThrowOnError extends boolean = false>(options: Options<SkypeQueueUpdateSkypeQueuePropertiesData, ThrowOnError>) => { return (options?.client ?? client).put<SkypeQueueUpdateSkypeQueuePropertiesResponse, SkypeQueueUpdateSkypeQueuePropertiesError, ThrowOnError>({
    ...options,
    url: '/skype/queues/{skypeResponseQueueId}/properties'
}); };

/**
 * List Skype Workflows
 * Get all skype workflows, method will return you list of workflows.
 */
export const skypeWorkflowListSkypeWorkflows = <ThrowOnError extends boolean = false>(options?: Options<SkypeWorkflowListSkypeWorkflowsData, ThrowOnError>) => { return (options?.client ?? client).get<SkypeWorkflowListSkypeWorkflowsResponse, SkypeWorkflowListSkypeWorkflowsError, ThrowOnError>({
    ...options,
    url: '/skype/workflows'
}); };

/**
 * Add a new Skype Workflow
 * Add skype workflow, method will return you complete details of recently added workflow.
 */
export const skypeWorkflowAddSkypeWorkflow = <ThrowOnError extends boolean = false>(options: Options<SkypeWorkflowAddSkypeWorkflowData, ThrowOnError>) => { return (options?.client ?? client).post<SkypeWorkflowAddSkypeWorkflowResponse, SkypeWorkflowAddSkypeWorkflowError, ThrowOnError>({
    ...options,
    url: '/skype/workflows'
}); };

/**
 * Get Skype Workflow Details
 * Get skype workflow details, method will return you complete details of workflow.
 */
export const skypeWorkflowGetSkypeWorkflowDetails = <ThrowOnError extends boolean = false>(options: Options<SkypeWorkflowGetSkypeWorkflowDetailsData, ThrowOnError>) => { return (options?.client ?? client).get<SkypeWorkflowGetSkypeWorkflowDetailsResponse, SkypeWorkflowGetSkypeWorkflowDetailsError, ThrowOnError>({
    ...options,
    url: '/skype/workflows/{workflowId}'
}); };

/**
 * Delete Skype Workflow
 * Delete skype workflow, method will return you operation status.
 */
export const skypeWorkflowDeleteSkypeWorkflow = <ThrowOnError extends boolean = false>(options: Options<SkypeWorkflowDeleteSkypeWorkflowData, ThrowOnError>) => { return (options?.client ?? client).delete<SkypeWorkflowDeleteSkypeWorkflowResponse, SkypeWorkflowDeleteSkypeWorkflowError, ThrowOnError>({
    ...options,
    url: '/skype/workflows/{workflowId}'
}); };

/**
 * Get Skype Workflow Settings
 * Get skype workflow settings, method will return you workflow settings.
 */
export const skypeWorkflowGetSkypeWorkflowSettings = <ThrowOnError extends boolean = false>(options: Options<SkypeWorkflowGetSkypeWorkflowSettingsData, ThrowOnError>) => { return (options?.client ?? client).get<SkypeWorkflowGetSkypeWorkflowSettingsResponse, SkypeWorkflowGetSkypeWorkflowSettingsError, ThrowOnError>({
    ...options,
    url: '/skype/workflows/{workflowId}/settings'
}); };

/**
 * Update Skype Workflow Settings
 * Update skype workflow settings, method will return you operation status.
 */
export const skypeWorkflowUpdateSkypeWorkflowSettings = <ThrowOnError extends boolean = false>(options: Options<SkypeWorkflowUpdateSkypeWorkflowSettingsData, ThrowOnError>) => { return (options?.client ?? client).put<SkypeWorkflowUpdateSkypeWorkflowSettingsResponse, SkypeWorkflowUpdateSkypeWorkflowSettingsError, ThrowOnError>({
    ...options,
    url: '/skype/workflows/{workflowId}/settings'
}); };

/**
 * Update Workflow Activation Status
 * Update workflow activation status, method will return you operation status.
 */
export const skypeWorkflowUpdateWorkflowActivationStatus = <ThrowOnError extends boolean = false>(options: Options<SkypeWorkflowUpdateWorkflowActivationStatusData, ThrowOnError>) => { return (options?.client ?? client).put<SkypeWorkflowUpdateWorkflowActivationStatusResponse, SkypeWorkflowUpdateWorkflowActivationStatusError, ThrowOnError>({
    ...options,
    url: '/skype/workflows/{workflowId}/activation'
}); };

/**
 * Update Workflow Federation Status
 * Update workflow federation status, method will return you operation status.
 */
export const skypeWorkflowUpdateWorkflowFederationStatus = <ThrowOnError extends boolean = false>(options: Options<SkypeWorkflowUpdateWorkflowFederationStatusData, ThrowOnError>) => { return (options?.client ?? client).put<SkypeWorkflowUpdateWorkflowFederationStatusResponse, SkypeWorkflowUpdateWorkflowFederationStatusError, ThrowOnError>({
    ...options,
    url: '/skype/workflows/{workflowId}/federation'
}); };

/**
 * Update Workflow Anonymity Status
 * Update workflow anonymity status, method will return you operation status.
 */
export const skypeWorkflowUpdateWorkflowAnonymityStatus = <ThrowOnError extends boolean = false>(options: Options<SkypeWorkflowUpdateWorkflowAnonymityStatusData, ThrowOnError>) => { return (options?.client ?? client).put<SkypeWorkflowUpdateWorkflowAnonymityStatusResponse, SkypeWorkflowUpdateWorkflowAnonymityStatusError, ThrowOnError>({
    ...options,
    url: '/skype/workflows/{workflowId}/anonymity'
}); };

/**
 * Update Workflow IVR Settings
 * Update workflow IVR settings, method will return you operation status.
 */
export const skypeWorkflowUpdateWorkflowIvrSettings = <ThrowOnError extends boolean = false>(options: Options<SkypeWorkflowUpdateWorkflowIvrSettingsData, ThrowOnError>) => { return (options?.client ?? client).put<SkypeWorkflowUpdateWorkflowIvrSettingsResponse, SkypeWorkflowUpdateWorkflowIvrSettingsError, ThrowOnError>({
    ...options,
    url: '/skype/workflows/{workflowId}/ivr'
}); };

/**
 * Get Server Registrar Pools
 * Get server registrar pools, method will return you server registrar pools.
 */
export const skypeServerGetServerRegistrarPools = <ThrowOnError extends boolean = false>(options: Options<SkypeServerGetServerRegistrarPoolsData, ThrowOnError>) => { return (options?.client ?? client).get<SkypeServerGetServerRegistrarPoolsResponse, SkypeServerGetServerRegistrarPoolsError, ThrowOnError>({
    ...options,
    url: '/skype-server/{serverRoleId}/registrar-pools'
}); };

/**
 * Get User Assigned Server Pools
 * Get user assigned server pools, method will return you user assigned server pools.
 */
export const skypeServerGetUserAssignedServerPools = <ThrowOnError extends boolean = false>(options: Options<SkypeServerGetUserAssignedServerPoolsData, ThrowOnError>) => { return (options?.client ?? client).get<SkypeServerGetUserAssignedServerPoolsResponse, SkypeServerGetUserAssignedServerPoolsError, ThrowOnError>({
    ...options,
    url: '/skype-server/{serverRoleId}/registrar-pools/{userId}'
}); };

/**
 * Get Server Time Zones
 * Get server time zones, method will return you list of server time zones.
 */
export const skypeServerGetServerTimeZones = <ThrowOnError extends boolean = false>(options: Options<SkypeServerGetServerTimeZonesData, ThrowOnError>) => { return (options?.client ?? client).get<SkypeServerGetServerTimeZonesResponse, SkypeServerGetServerTimeZonesError, ThrowOnError>({
    ...options,
    url: '/skype-server/{serverRoleId}/time-zones'
}); };

/**
 * List User Line URIs
 * Get all user line URIs, method will return you list of user line URIs.
 */
export const skypeServerListUserLineUris = <ThrowOnError extends boolean = false>(options?: Options<SkypeServerListUserLineUrisData, ThrowOnError>) => { return (options?.client ?? client).get<SkypeServerListUserLineUrisResponse, SkypeServerListUserLineUrisError, ThrowOnError>({
    ...options,
    url: '/skype-server/line-uris'
}); };

/**
 * Get Line URI Details
 * Get line URI details, method will return you line URI details.
 */
export const skypeServerGetLineUriDetails = <ThrowOnError extends boolean = false>(options: Options<SkypeServerGetLineUriDetailsData, ThrowOnError>) => { return (options?.client ?? client).get<SkypeServerGetLineUriDetailsResponse, SkypeServerGetLineUriDetailsError, ThrowOnError>({
    ...options,
    url: '/skype-server/line-uris/{lineUriId}'
}); };

/**
 * Get Federated Domains
 * Get federated domains, method will return you list of federated domains.
 */
export const skypeServerGetFederatedDomains = <ThrowOnError extends boolean = false>(options: Options<SkypeServerGetFederatedDomainsData, ThrowOnError>) => { return (options?.client ?? client).get<SkypeServerGetFederatedDomainsResponse, SkypeServerGetFederatedDomainsError, ThrowOnError>({
    ...options,
    url: '/skype-server/{serverRoleId}/federated-domains'
}); };

/**
 * Get Skype User Policies
 * Get skype user policies, method will return you list of user policies.
 */
export const skypeServerGetSkypeUserPolicies = <ThrowOnError extends boolean = false>(options: Options<SkypeServerGetSkypeUserPoliciesData, ThrowOnError>) => { return (options?.client ?? client).get<SkypeServerGetSkypeUserPoliciesResponse, SkypeServerGetSkypeUserPoliciesError, ThrowOnError>({
    ...options,
    url: '/skype-server/{serverRoleId}/user-policies'
}); };

/**
 * Get Server Application Services
 * Get server application services, method will return you list of server application services.
 */
export const skypeServerGetServerApplicationServices = <ThrowOnError extends boolean = false>(options: Options<SkypeServerGetServerApplicationServicesData, ThrowOnError>) => { return (options?.client ?? client).get<SkypeServerGetServerApplicationServicesResponse, SkypeServerGetServerApplicationServicesError, ThrowOnError>({
    ...options,
    url: '/skype-server/{serverRoleId}/application-services'
}); };

/**
 * Get User Assigned Application Services
 * Get user assigned application services, method will return you list of user assigned application services.
 */
export const skypeServerGetUserAssignedApplicationServices = <ThrowOnError extends boolean = false>(options: Options<SkypeServerGetUserAssignedApplicationServicesData, ThrowOnError>) => { return (options?.client ?? client).get<SkypeServerGetUserAssignedApplicationServicesResponse, SkypeServerGetUserAssignedApplicationServicesError, ThrowOnError>({
    ...options,
    url: '/skype-server/{serverRoleId}/application-services/{userId}'
}); };

/**
 * List Virtual Machines
 * List virtual machines, method will return you list of virtual machines.
 */
export const virtualMachineListVirtualMachines = <ThrowOnError extends boolean = false>(options?: Options<VirtualMachineListVirtualMachinesData, ThrowOnError>) => { return (options?.client ?? client).get<VirtualMachineListVirtualMachinesResponse, VirtualMachineListVirtualMachinesError, ThrowOnError>({
    ...options,
    url: '/virtualization/virtual-machines'
}); };

/**
 * Add a new Virtual Machine
 * Add virtual machine, method will return you complete details of recently added virtual machine.
 */
export const virtualMachineAddVirtualMachine = <ThrowOnError extends boolean = false>(options: Options<VirtualMachineAddVirtualMachineData, ThrowOnError>) => { return (options?.client ?? client).post<VirtualMachineAddVirtualMachineResponse, VirtualMachineAddVirtualMachineError, ThrowOnError>({
    ...options,
    url: '/virtualization/virtual-machines'
}); };

/**
 * Get Virtual Machine Details
 * Get virtual machine details, method will return you complete details of virtual machine.
 */
export const virtualMachineGetVirtualMachineDetails = <ThrowOnError extends boolean = false>(options: Options<VirtualMachineGetVirtualMachineDetailsData, ThrowOnError>) => { return (options?.client ?? client).get<VirtualMachineGetVirtualMachineDetailsResponse, VirtualMachineGetVirtualMachineDetailsError, ThrowOnError>({
    ...options,
    url: '/virtualization/virtual-machines/{virtualMachineId}'
}); };

/**
 * Update Virtual Machine
 * Update virtual machine details, method will return you complete details of virtual machine.
 */
export const virtualMachineUpdateVirtualMachine = <ThrowOnError extends boolean = false>(options: Options<VirtualMachineUpdateVirtualMachineData, ThrowOnError>) => { return (options?.client ?? client).put<VirtualMachineUpdateVirtualMachineResponse, VirtualMachineUpdateVirtualMachineError, ThrowOnError>({
    ...options,
    url: '/virtualization/virtual-machines/{virtualMachineId}'
}); };

/**
 * Delete Virtual Machine
 * Delete virtual machine, method will return you operations status.
 */
export const virtualMachineDeleteVirtualMachine = <ThrowOnError extends boolean = false>(options: Options<VirtualMachineDeleteVirtualMachineData, ThrowOnError>) => { return (options?.client ?? client).delete<VirtualMachineDeleteVirtualMachineResponse, VirtualMachineDeleteVirtualMachineError, ThrowOnError>({
    ...options,
    url: '/virtualization/virtual-machines/{virtualMachineId}'
}); };

/**
 * Update VLAN
 * Update VLAN, method will return you operations status.
 */
export const virtualMachineUpdateVlan = <ThrowOnError extends boolean = false>(options: Options<VirtualMachineUpdateVlanData, ThrowOnError>) => { return (options?.client ?? client).put<VirtualMachineUpdateVlanResponse, VirtualMachineUpdateVlanError, ThrowOnError>({
    ...options,
    url: '/virtualization/virtual-machines/{virtualMachineId}/vlan'
}); };

/**
 * System Virtual Machines List
 * Get system virtual machines, method will return you list of system virtual machines.
 */
export const virtualMachineSystemVirtualMachinesList = <ThrowOnError extends boolean = false>(options: Options<VirtualMachineSystemVirtualMachinesListData, ThrowOnError>) => { return (options?.client ?? client).get<VirtualMachineSystemVirtualMachinesListResponse, VirtualMachineSystemVirtualMachinesListError, ThrowOnError>({
    ...options,
    url: '/virtualization-server/{serverId}/virtual-machines'
}); };

/**
 * Get System Virtual Machine Settings
 * Get system virtual machine settings, method will return you system virtual machine settings.
 */
export const virtualMachineGetSystemVirtualMachineSettings = <ThrowOnError extends boolean = false>(options: Options<VirtualMachineGetSystemVirtualMachineSettingsData, ThrowOnError>) => { return (options?.client ?? client).get<VirtualMachineGetSystemVirtualMachineSettingsResponse, VirtualMachineGetSystemVirtualMachineSettingsError, ThrowOnError>({
    ...options,
    url: '/virtualization-server/{serverId}/virtual-machines/{virtualMachineGuid}'
}); };

/**
 * Get Virtual Machine IP Addresses
 * Get virtual machine IP addresses, method will return you list of virtual machine IP addresses.
 */
export const virtualMachineGetVirtualMachineIpAddresses = <ThrowOnError extends boolean = false>(options: Options<VirtualMachineGetVirtualMachineIpAddressesData, ThrowOnError>) => { return (options?.client ?? client).get<VirtualMachineGetVirtualMachineIpAddressesResponse, VirtualMachineGetVirtualMachineIpAddressesError, ThrowOnError>({
    ...options,
    url: '/virtualization/virtual-machines/{virtualMachineId}/ip-addresses'
}); };

/**
 * Assign Virtual Machine IP Addresses
 * Assign virtual machine IP addresses, method will return you operation status.
 */
export const virtualMachineAssignVmIpAddresses = <ThrowOnError extends boolean = false>(options: Options<VirtualMachineAssignVmIpAddressesData, ThrowOnError>) => { return (options?.client ?? client).put<VirtualMachineAssignVmIpAddressesResponse, VirtualMachineAssignVmIpAddressesError, ThrowOnError>({
    ...options,
    url: '/virtualization/virtual-machines/{virtualMachineId}/ip-addresses'
}); };

/**
 * Delete Virtual Machine Assigned IP Address
 * Delete virtual machine assigned IP address, method will return you operation status.
 */
export const virtualMachineDeleteVmAssignedIpAddress = <ThrowOnError extends boolean = false>(options: Options<VirtualMachineDeleteVmAssignedIpAddressData, ThrowOnError>) => { return (options?.client ?? client).delete<VirtualMachineDeleteVmAssignedIpAddressResponse, VirtualMachineDeleteVmAssignedIpAddressError, ThrowOnError>({
    ...options,
    url: '/virtualization/virtual-machines/{virtualMachineId}/ip-addresses/{ipAddressId}'
}); };

/**
 * Get all Snapshots
 * Get all snapshots, method will return you list of snapshots.
 */
export const virtualMachineGetAllSnapShots = <ThrowOnError extends boolean = false>(options: Options<VirtualMachineGetAllSnapShotsData, ThrowOnError>) => { return (options?.client ?? client).get<VirtualMachineGetAllSnapShotsResponse, VirtualMachineGetAllSnapShotsError, ThrowOnError>({
    ...options,
    url: '/virtualization/virtual-machines/{virtualMachineId}/snapshots'
}); };

/**
 * Take Snapshot
 * Take snapshot, method will return you complete details of recently taken snapshot.
 */
export const virtualMachineTakeSnapShot = <ThrowOnError extends boolean = false>(options: Options<VirtualMachineTakeSnapShotData, ThrowOnError>) => { return (options?.client ?? client).put<VirtualMachineTakeSnapShotResponse, VirtualMachineTakeSnapShotError, ThrowOnError>({
    ...options,
    url: '/virtualization/virtual-machines/{virtualMachineId}/snapshots'
}); };

/**
 * Apply Snapshot
 * Apply snapshot, method will return you operation status.
 */
export const virtualMachineApplySnapShot = <ThrowOnError extends boolean = false>(options: Options<VirtualMachineApplySnapShotData, ThrowOnError>) => { return (options?.client ?? client).put<VirtualMachineApplySnapShotResponse, VirtualMachineApplySnapShotError, ThrowOnError>({
    ...options,
    url: '/virtualization/virtual-machines/{virtualMachineId}/snapshots/{snapShotId}'
}); };

/**
 * Get Snapshot Details
 * Get snapshot details, method will return you snapshot details.
 */
export const virtualMachineGetSnapShotDetail = <ThrowOnError extends boolean = false>(options: Options<VirtualMachineGetSnapShotDetailData, ThrowOnError>) => { return (options?.client ?? client).get<VirtualMachineGetSnapShotDetailResponse, VirtualMachineGetSnapShotDetailError, ThrowOnError>({
    ...options,
    url: '/virtualization/virtual-machines/snapshots/{snapShotId}'
}); };

/**
 * Delete Snapshot
 * Delete snapshot, method will return you operation status.
 */
export const virtualMachineDeleteSnapShot = <ThrowOnError extends boolean = false>(options: Options<VirtualMachineDeleteSnapShotData, ThrowOnError>) => { return (options?.client ?? client).delete<VirtualMachineDeleteSnapShotResponse, VirtualMachineDeleteSnapShotError, ThrowOnError>({
    ...options,
    url: '/virtualization/virtual-machines/{virtualMachineId}/snapshots/{snapshotId}'
}); };

/**
 * Change Password
 * Change password, method will return you operation status.
 */
export const virtualMachineChangePassword = <ThrowOnError extends boolean = false>(options: Options<VirtualMachineChangePasswordData, ThrowOnError>) => { return (options?.client ?? client).put<VirtualMachineChangePasswordResponse, VirtualMachineChangePasswordError, ThrowOnError>({
    ...options,
    url: '/virtualization/virtual-machines/{virtualMachineId}/password'
}); };

/**
 * Start Virtual Machine
 * Start virtual machine, method will return you operation status.
 */
export const virtualMachineStartVirtualMachine = <ThrowOnError extends boolean = false>(options: Options<VirtualMachineStartVirtualMachineData, ThrowOnError>) => { return (options?.client ?? client).put<VirtualMachineStartVirtualMachineResponse, VirtualMachineStartVirtualMachineError, ThrowOnError>({
    ...options,
    url: '/virtualization/virtual-machines/{virtualMachineId}/start'
}); };

/**
 * Pause Virtual Machine
 * Pause virtual machine, method will return you operation status.
 */
export const virtualMachinePauseVirtualMachine = <ThrowOnError extends boolean = false>(options: Options<VirtualMachinePauseVirtualMachineData, ThrowOnError>) => { return (options?.client ?? client).put<VirtualMachinePauseVirtualMachineResponse, VirtualMachinePauseVirtualMachineError, ThrowOnError>({
    ...options,
    url: '/virtualization/virtual-machines/{virtualMachineId}/pause'
}); };

/**
 * Resume Virtual Machine
 * Resume virtual machine, method will return you operation status.
 */
export const virtualMachineResumeVirtualMachine = <ThrowOnError extends boolean = false>(options: Options<VirtualMachineResumeVirtualMachineData, ThrowOnError>) => { return (options?.client ?? client).put<VirtualMachineResumeVirtualMachineResponse, VirtualMachineResumeVirtualMachineError, ThrowOnError>({
    ...options,
    url: '/virtualization/virtual-machines/{virtualMachineId}/resume'
}); };

/**
 * Reboot Virtual Machine
 * Reboot virtual machine, method will return you operation status.
 */
export const virtualMachineRebootVirtualMachine = <ThrowOnError extends boolean = false>(options: Options<VirtualMachineRebootVirtualMachineData, ThrowOnError>) => { return (options?.client ?? client).put<VirtualMachineRebootVirtualMachineResponse, VirtualMachineRebootVirtualMachineError, ThrowOnError>({
    ...options,
    url: '/virtualization/virtual-machines/{virtualMachineId}/reboot'
}); };

/**
 * Shut Down Virtual Machine
 * Shut down virtual machine, method will return you operation status.
 */
export const virtualMachineShutdownVirtualMachine = <ThrowOnError extends boolean = false>(options: Options<VirtualMachineShutdownVirtualMachineData, ThrowOnError>) => { return (options?.client ?? client).put<VirtualMachineShutdownVirtualMachineResponse, VirtualMachineShutdownVirtualMachineError, ThrowOnError>({
    ...options,
    url: '/virtualization/virtual-machines/{virtualMachineId}/shutdown'
}); };

/**
 * Import Virtual Machine
 * Import virtual machine, method will return you complete details of recently imported virtual machine.
 */
export const virtualMachineImportVirtualMachine = <ThrowOnError extends boolean = false>(options: Options<VirtualMachineImportVirtualMachineData, ThrowOnError>) => { return (options?.client ?? client).post<VirtualMachineImportVirtualMachineResponse, VirtualMachineImportVirtualMachineError, ThrowOnError>({
    ...options,
    url: '/virtualization/virtual-machines/importvm'
}); };

/**
 * Transfer Virtual Machine
 * Transfer virtual machine, method will return you complete details of recently transfered virtual machine.
 */
export const virtualMachineTransferVirtualMachine = <ThrowOnError extends boolean = false>(options: Options<VirtualMachineTransferVirtualMachineData, ThrowOnError>) => { return (options?.client ?? client).put<VirtualMachineTransferVirtualMachineResponse, VirtualMachineTransferVirtualMachineError, ThrowOnError>({
    ...options,
    url: '/virtualization/virtual-machines/{virtualMachineId}/transfer'
}); };

/**
 * Get Virtual Machine Current State
 * Get virtual machine current state, method will return you virtual machine current state.
 */
export const virtualMachineGetVirtualMachineCurrentState = <ThrowOnError extends boolean = false>(options: Options<VirtualMachineGetVirtualMachineCurrentStateData, ThrowOnError>) => { return (options?.client ?? client).get<VirtualMachineGetVirtualMachineCurrentStateResponse, VirtualMachineGetVirtualMachineCurrentStateError, ThrowOnError>({
    ...options,
    url: '/virtualization/virtual-machines/{virtualMachineId}/state'
}); };

/**
 * Fetch Machine Password
 * Fetch virtual machine password, method will return you operation status.
 */
export const virtualMachineFetchMachinePassword = <ThrowOnError extends boolean = false>(options: Options<VirtualMachineFetchMachinePasswordData, ThrowOnError>) => { return (options?.client ?? client).put<VirtualMachineFetchMachinePasswordResponse, VirtualMachineFetchMachinePasswordError, ThrowOnError>({
    ...options,
    url: '/virtualization/virtual-machines/{virtualMachineId}/fetchpassword'
}); };

/**
 * Get all Base OS Types
 * Get all base OS types, method will return you list of base OS types.
 */
export const resourceGetAllBaseOsTypes = <ThrowOnError extends boolean = false>(options?: Options<unknown, ThrowOnError>) => { return (options?.client ?? client).get<ResourceGetAllBaseOsTypesResponse, ResourceGetAllBaseOsTypesError, ThrowOnError>({
    ...options,
    url: '/virtualization/base-os-types'
}); };

/**
 * Get all VLANs
 * Get all VLANs, method will return you list of VLANs.
 */
export const vlaNsGetAllVlaNs = <ThrowOnError extends boolean = false>(options?: Options<VlaNsGetAllVlaNsData, ThrowOnError>) => { return (options?.client ?? client).get<VlaNsGetAllVlaNsResponse, VlaNsGetAllVlaNsError, ThrowOnError>({
    ...options,
    url: '/virtualization/vlans'
}); };

/**
 * Get all OS Templates
 * Get all OS templates, method will return you list of OS templates.
 */
export const osTemplatesGetAllOsTemplates = <ThrowOnError extends boolean = false>(options?: Options<OsTemplatesGetAllOsTemplatesData, ThrowOnError>) => { return (options?.client ?? client).get<OsTemplatesGetAllOsTemplatesResponse, OsTemplatesGetAllOsTemplatesError, ThrowOnError>({
    ...options,
    url: '/virtualization/os-templates'
}); };